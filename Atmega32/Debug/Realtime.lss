
Realtime.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fa2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00003fa2  00004036  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000c4  008000c4  0000409a  2**0
                  ALLOC
  3 .stab         00003390  00000000  00000000  0000409c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010d3  00000000  00000000  0000742c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000084ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000863f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000087af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b2e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c090  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c47d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 75 1f 	jmp	0x3eea	; 0x3eea <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 42 14 	call	0x2884	; 0x2884 <main>
      8a:	0c 94 cf 1f 	jmp	0x3f9e	; 0x3f9e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ea       	ldi	r26, 0xA1	; 161
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ea       	ldi	r24, 0xA1	; 161
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a8 1f 	jmp	0x3f50	; 0x3f50 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c4 1f 	jmp	0x3f88	; 0x3f88 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <timer2_overflow_init_interrupt>:
#include "../LIB/std_macros.h"
#include <avr/io.h>
#include <avr/interrupt.h>
void timer2_overflow_init_interrupt(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* select timer clock */
	SET_BIT(ASSR,AS2);
     b4e:	a2 e4       	ldi	r26, 0x42	; 66
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e2 e4       	ldi	r30, 0x42	; 66
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
	/* select timer pre scalar */
	SET_BIT(TCCR2,CS20);
     b5c:	a5 e4       	ldi	r26, 0x45	; 69
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e5 e4       	ldi	r30, 0x45	; 69
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	81 60       	ori	r24, 0x01	; 1
     b68:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS22);
     b6a:	a5 e4       	ldi	r26, 0x45	; 69
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e5 e4       	ldi	r30, 0x45	; 69
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	84 60       	ori	r24, 0x04	; 4
     b76:	8c 93       	st	X, r24
	/* enable interrupt*/
	sei();
     b78:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
     b7a:	a9 e5       	ldi	r26, 0x59	; 89
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e9 e5       	ldi	r30, 0x59	; 89
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	80 64       	ori	r24, 0x40	; 64
     b86:	8c 93       	st	X, r24
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <timer_CTC_init_interrupt>:
void timer_CTC_init_interrupt(void)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
     b96:	a3 e5       	ldi	r26, 0x53	; 83
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	e3 e5       	ldi	r30, 0x53	; 83
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	88 60       	ori	r24, 0x08	; 8
     ba2:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=80;
     ba4:	ec e5       	ldi	r30, 0x5C	; 92
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 e5       	ldi	r24, 0x50	; 80
     baa:	80 83       	st	Z, r24
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
     bac:	a3 e5       	ldi	r26, 0x53	; 83
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e3 e5       	ldi	r30, 0x53	; 83
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	81 60       	ori	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     bba:	a3 e5       	ldi	r26, 0x53	; 83
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e3 e5       	ldi	r30, 0x53	; 83
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	84 60       	ori	r24, 0x04	; 4
     bc6:	8c 93       	st	X, r24
	/* enable interrupt*/
	sei();
     bc8:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
     bca:	a9 e5       	ldi	r26, 0x59	; 89
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e9 e5       	ldi	r30, 0x59	; 89
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	82 60       	ori	r24, 0x02	; 2
     bd6:	8c 93       	st	X, r24
}
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     be6:	a7 e3       	ldi	r26, 0x37	; 55
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e7 e3       	ldi	r30, 0x37	; 55
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	88 60       	ori	r24, 0x08	; 8
     bf2:	8c 93       	st	X, r24
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
     bf4:	a3 e5       	ldi	r26, 0x53	; 83
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e3 e5       	ldi	r30, 0x53	; 83
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	88 60       	ori	r24, 0x08	; 8
     c00:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
     c02:	ec e5       	ldi	r30, 0x5C	; 92
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 e4       	ldi	r24, 0x40	; 64
     c08:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     c0a:	a3 e5       	ldi	r26, 0x53	; 83
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e3 e5       	ldi	r30, 0x53	; 83
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	81 60       	ori	r24, 0x01	; 1
     c16:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     c18:	a3 e5       	ldi	r26, 0x53	; 83
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e3 e5       	ldi	r30, 0x53	; 83
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	84 60       	ori	r24, 0x04	; 4
     c24:	8c 93       	st	X, r24
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
     c26:	a3 e5       	ldi	r26, 0x53	; 83
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e3 e5       	ldi	r30, 0x53	; 83
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 61       	ori	r24, 0x10	; 16
     c32:	8c 93       	st	X, r24
}
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <timer_wave_fastPWM>:

void timer_wave_fastPWM(void)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     c42:	a7 e3       	ldi	r26, 0x37	; 55
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e7 e3       	ldi	r30, 0x37	; 55
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	88 60       	ori	r24, 0x08	; 8
     c4e:	8c 93       	st	X, r24
	/* select fast PWM mode*/
	SET_BIT(TCCR0,WGM00);
     c50:	a3 e5       	ldi	r26, 0x53	; 83
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	e3 e5       	ldi	r30, 0x53	; 83
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	80 64       	ori	r24, 0x40	; 64
     c5c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
     c5e:	a3 e5       	ldi	r26, 0x53	; 83
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e3 e5       	ldi	r30, 0x53	; 83
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	88 60       	ori	r24, 0x08	; 8
     c6a:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
     c6c:	ec e5       	ldi	r30, 0x5C	; 92
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 e4       	ldi	r24, 0x40	; 64
     c72:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     c74:	a3 e5       	ldi	r26, 0x53	; 83
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e3 e5       	ldi	r30, 0x53	; 83
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	81 60       	ori	r24, 0x01	; 1
     c80:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     c82:	a3 e5       	ldi	r26, 0x53	; 83
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e3 e5       	ldi	r30, 0x53	; 83
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	84 60       	ori	r24, 0x04	; 4
     c8e:	8c 93       	st	X, r24
	/* Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)*/
	SET_BIT(TCCR0,COM00);
     c90:	a3 e5       	ldi	r26, 0x53	; 83
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e3 e5       	ldi	r30, 0x53	; 83
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	80 61       	ori	r24, 0x10	; 16
     c9c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
     c9e:	a3 e5       	ldi	r26, 0x53	; 83
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e3 e5       	ldi	r30, 0x53	; 83
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	80 62       	ori	r24, 0x20	; 32
     caa:	8c 93       	st	X, r24
}
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     cba:	a7 e3       	ldi	r26, 0x37	; 55
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e7 e3       	ldi	r30, 0x37	; 55
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	88 60       	ori	r24, 0x08	; 8
     cc6:	8c 93       	st	X, r24
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
     cc8:	a3 e5       	ldi	r26, 0x53	; 83
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e3 e5       	ldi	r30, 0x53	; 83
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	80 64       	ori	r24, 0x40	; 64
     cd4:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0=64;
     cd6:	ec e5       	ldi	r30, 0x5C	; 92
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 e4       	ldi	r24, 0x40	; 64
     cdc:	80 83       	st	Z, r24
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
     cde:	a3 e5       	ldi	r26, 0x53	; 83
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e3 e5       	ldi	r30, 0x53	; 83
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	81 60       	ori	r24, 0x01	; 1
     cea:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
     cec:	a3 e5       	ldi	r26, 0x53	; 83
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e3 e5       	ldi	r30, 0x53	; 83
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	84 60       	ori	r24, 0x04	; 4
     cf8:	8c 93       	st	X, r24
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
     cfa:	a3 e5       	ldi	r26, 0x53	; 83
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e3 e5       	ldi	r30, 0x53	; 83
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 61       	ori	r24, 0x10	; 16
     d06:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
     d08:	a3 e5       	ldi	r26, 0x53	; 83
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e3 e5       	ldi	r30, 0x53	; 83
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 62       	ori	r24, 0x20	; 32
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <LED_vInit>:
*
*/
#include  "../LIB/STD_TYPES.h"
#include "../DIO/DIO.h"
void LED_vInit(u8 portname,u8 pinnumber)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <LED_vInit+0x6>
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	89 83       	std	Y+1, r24	; 0x01
     d28:	6a 83       	std	Y+2, r22	; 0x02
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	6a 81       	ldd	r22, Y+2	; 0x02
     d2e:	41 e0       	ldi	r20, 0x01	; 1
     d30:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <LED_vTurnOn>:
void LED_vTurnOn(u8 portname,u8 pinnumber)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	00 d0       	rcall	.+0      	; 0xd44 <LED_vTurnOn+0x6>
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	6a 81       	ldd	r22, Y+2	; 0x02
     d50:	41 e0       	ldi	r20, 0x01	; 1
     d52:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
}
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <LED_vTurnOff>:
void LED_vTurnOff(u8 portname,u8 pinnumber)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	00 d0       	rcall	.+0      	; 0xd66 <LED_vTurnOff+0x6>
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	6a 81       	ldd	r22, Y+2	; 0x02
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
}
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <LED_vToggle>:
void LED_vToggle(u8 portname,u8 pinnumber)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	00 d0       	rcall	.+0      	; 0xd88 <LED_vToggle+0x6>
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	6a 83       	std	Y+2, r22	; 0x02
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	6a 81       	ldd	r22, Y+2	; 0x02
     d94:	0e 94 e6 10 	call	0x21cc	; 0x21cc <DIO_toggle>
}
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <LCD_vInit>:
#include "LCD.h"
#define  F_CPU 8000000UL 
#include <util/delay.h>

void LCD_vInit(void)
{
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	c4 55       	subi	r28, 0x54	; 84
     db0:	d0 40       	sbci	r29, 0x00	; 0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	fe 01       	movw	r30, r28
     dbe:	ef 5a       	subi	r30, 0xAF	; 175
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	a8 e4       	ldi	r26, 0x48	; 72
     dc8:	b3 e4       	ldi	r27, 0x43	; 67
     dca:	80 83       	st	Z, r24
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	a2 83       	std	Z+2, r26	; 0x02
     dd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd2:	8e 01       	movw	r16, r28
     dd4:	03 5b       	subi	r16, 0xB3	; 179
     dd6:	1f 4f       	sbci	r17, 0xFF	; 255
     dd8:	fe 01       	movw	r30, r28
     dda:	ef 5a       	subi	r30, 0xAF	; 175
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	60 81       	ld	r22, Z
     de0:	71 81       	ldd	r23, Z+1	; 0x01
     de2:	82 81       	ldd	r24, Z+2	; 0x02
     de4:	93 81       	ldd	r25, Z+3	; 0x03
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	4a ef       	ldi	r20, 0xFA	; 250
     dec:	54 e4       	ldi	r21, 0x44	; 68
     dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	f8 01       	movw	r30, r16
     df8:	80 83       	st	Z, r24
     dfa:	91 83       	std	Z+1, r25	; 0x01
     dfc:	a2 83       	std	Z+2, r26	; 0x02
     dfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e00:	fe 01       	movw	r30, r28
     e02:	e3 5b       	subi	r30, 0xB3	; 179
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	60 81       	ld	r22, Z
     e08:	71 81       	ldd	r23, Z+1	; 0x01
     e0a:	82 81       	ldd	r24, Z+2	; 0x02
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e8       	ldi	r20, 0x80	; 128
     e14:	5f e3       	ldi	r21, 0x3F	; 63
     e16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e1a:	88 23       	and	r24, r24
     e1c:	44 f4       	brge	.+16     	; 0xe2e <LCD_vInit+0x8c>
		__ticks = 1;
     e1e:	fe 01       	movw	r30, r28
     e20:	e5 5b       	subi	r30, 0xB5	; 181
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	91 83       	std	Z+1, r25	; 0x01
     e2a:	80 83       	st	Z, r24
     e2c:	64 c0       	rjmp	.+200    	; 0xef6 <LCD_vInit+0x154>
	else if (__tmp > 65535)
     e2e:	fe 01       	movw	r30, r28
     e30:	e3 5b       	subi	r30, 0xB3	; 179
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	60 81       	ld	r22, Z
     e36:	71 81       	ldd	r23, Z+1	; 0x01
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	93 81       	ldd	r25, Z+3	; 0x03
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	3f ef       	ldi	r19, 0xFF	; 255
     e40:	4f e7       	ldi	r20, 0x7F	; 127
     e42:	57 e4       	ldi	r21, 0x47	; 71
     e44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e48:	18 16       	cp	r1, r24
     e4a:	0c f0       	brlt	.+2      	; 0xe4e <LCD_vInit+0xac>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <LCD_vInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4e:	fe 01       	movw	r30, r28
     e50:	ef 5a       	subi	r30, 0xAF	; 175
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	60 81       	ld	r22, Z
     e56:	71 81       	ldd	r23, Z+1	; 0x01
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e2       	ldi	r20, 0x20	; 32
     e62:	51 e4       	ldi	r21, 0x41	; 65
     e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	8e 01       	movw	r16, r28
     e6e:	05 5b       	subi	r16, 0xB5	; 181
     e70:	1f 4f       	sbci	r17, 0xFF	; 255
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	f8 01       	movw	r30, r16
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	80 83       	st	Z, r24
     e84:	1f c0       	rjmp	.+62     	; 0xec4 <LCD_vInit+0x122>
     e86:	fe 01       	movw	r30, r28
     e88:	e7 5b       	subi	r30, 0xB7	; 183
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	88 ec       	ldi	r24, 0xC8	; 200
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	91 83       	std	Z+1, r25	; 0x01
     e92:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e94:	fe 01       	movw	r30, r28
     e96:	e7 5b       	subi	r30, 0xB7	; 183
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	80 81       	ld	r24, Z
     e9c:	91 81       	ldd	r25, Z+1	; 0x01
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <LCD_vInit+0xfc>
     ea2:	fe 01       	movw	r30, r28
     ea4:	e7 5b       	subi	r30, 0xB7	; 183
     ea6:	ff 4f       	sbci	r31, 0xFF	; 255
     ea8:	91 83       	std	Z+1, r25	; 0x01
     eaa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eac:	de 01       	movw	r26, r28
     eae:	a5 5b       	subi	r26, 0xB5	; 181
     eb0:	bf 4f       	sbci	r27, 0xFF	; 255
     eb2:	fe 01       	movw	r30, r28
     eb4:	e5 5b       	subi	r30, 0xB5	; 181
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	11 96       	adiw	r26, 0x01	; 1
     ec0:	9c 93       	st	X, r25
     ec2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec4:	fe 01       	movw	r30, r28
     ec6:	e5 5b       	subi	r30, 0xB5	; 181
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	80 81       	ld	r24, Z
     ecc:	91 81       	ldd	r25, Z+1	; 0x01
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	d1 f6       	brne	.-76     	; 0xe86 <LCD_vInit+0xe4>
     ed2:	27 c0       	rjmp	.+78     	; 0xf22 <LCD_vInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed4:	8e 01       	movw	r16, r28
     ed6:	05 5b       	subi	r16, 0xB5	; 181
     ed8:	1f 4f       	sbci	r17, 0xFF	; 255
     eda:	fe 01       	movw	r30, r28
     edc:	e3 5b       	subi	r30, 0xB3	; 179
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	60 81       	ld	r22, Z
     ee2:	71 81       	ldd	r23, Z+1	; 0x01
     ee4:	82 81       	ldd	r24, Z+2	; 0x02
     ee6:	93 81       	ldd	r25, Z+3	; 0x03
     ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	f8 01       	movw	r30, r16
     ef2:	91 83       	std	Z+1, r25	; 0x01
     ef4:	80 83       	st	Z, r24
     ef6:	de 01       	movw	r26, r28
     ef8:	a9 5b       	subi	r26, 0xB9	; 185
     efa:	bf 4f       	sbci	r27, 0xFF	; 255
     efc:	fe 01       	movw	r30, r28
     efe:	e5 5b       	subi	r30, 0xB5	; 181
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	80 81       	ld	r24, Z
     f04:	91 81       	ldd	r25, Z+1	; 0x01
     f06:	8d 93       	st	X+, r24
     f08:	9c 93       	st	X, r25
     f0a:	fe 01       	movw	r30, r28
     f0c:	e9 5b       	subi	r30, 0xB9	; 185
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	80 81       	ld	r24, Z
     f12:	91 81       	ldd	r25, Z+1	; 0x01
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <LCD_vInit+0x172>
     f18:	fe 01       	movw	r30, r28
     f1a:	e9 5b       	subi	r30, 0xB9	; 185
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1); 
	
	#elif defined four_bits_mode
	DIO_vsetPINDir('A',4,1);
     f22:	81 e4       	ldi	r24, 0x41	; 65
     f24:	64 e0       	ldi	r22, 0x04	; 4
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
     f2c:	81 e4       	ldi	r24, 0x41	; 65
     f2e:	65 e0       	ldi	r22, 0x05	; 5
     f30:	41 e0       	ldi	r20, 0x01	; 1
     f32:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
     f36:	81 e4       	ldi	r24, 0x41	; 65
     f38:	66 e0       	ldi	r22, 0x06	; 6
     f3a:	41 e0       	ldi	r20, 0x01	; 1
     f3c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
     f40:	81 e4       	ldi	r24, 0x41	; 65
     f42:	67 e0       	ldi	r22, 0x07	; 7
     f44:	41 e0       	ldi	r20, 0x01	; 1
     f46:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',EN,1);
     f4a:	81 e4       	ldi	r24, 0x41	; 65
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	41 e0       	ldi	r20, 0x01	; 1
     f50:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RW,1);
     f54:	81 e4       	ldi	r24, 0x41	; 65
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	41 e0       	ldi	r20, 0x01	; 1
     f5a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RS,1);
     f5e:	81 e4       	ldi	r24, 0x41	; 65
     f60:	62 e0       	ldi	r22, 0x02	; 2
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
   	DIO_write('A',RW,0);
     f68:	81 e4       	ldi	r24, 0x41	; 65
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
	LCD_vSend_cmd(RETURN_HOME); //return home
     f72:	82 e0       	ldi	r24, 0x02	; 2
     f74:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_vSend_cmd>
     f78:	fe 01       	movw	r30, r28
     f7a:	ed 5b       	subi	r30, 0xBD	; 189
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	a0 e2       	ldi	r26, 0x20	; 32
     f84:	b1 e4       	ldi	r27, 0x41	; 65
     f86:	80 83       	st	Z, r24
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	a2 83       	std	Z+2, r26	; 0x02
     f8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8e:	8e 01       	movw	r16, r28
     f90:	01 5c       	subi	r16, 0xC1	; 193
     f92:	1f 4f       	sbci	r17, 0xFF	; 255
     f94:	fe 01       	movw	r30, r28
     f96:	ed 5b       	subi	r30, 0xBD	; 189
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	60 81       	ld	r22, Z
     f9c:	71 81       	ldd	r23, Z+1	; 0x01
     f9e:	82 81       	ldd	r24, Z+2	; 0x02
     fa0:	93 81       	ldd	r25, Z+3	; 0x03
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	4a ef       	ldi	r20, 0xFA	; 250
     fa8:	54 e4       	ldi	r21, 0x44	; 68
     faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	f8 01       	movw	r30, r16
     fb4:	80 83       	st	Z, r24
     fb6:	91 83       	std	Z+1, r25	; 0x01
     fb8:	a2 83       	std	Z+2, r26	; 0x02
     fba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fbc:	fe 01       	movw	r30, r28
     fbe:	ff 96       	adiw	r30, 0x3f	; 63
     fc0:	60 81       	ld	r22, Z
     fc2:	71 81       	ldd	r23, Z+1	; 0x01
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	93 81       	ldd	r25, Z+3	; 0x03
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e8       	ldi	r20, 0x80	; 128
     fce:	5f e3       	ldi	r21, 0x3F	; 63
     fd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fd4:	88 23       	and	r24, r24
     fd6:	2c f4       	brge	.+10     	; 0xfe2 <LCD_vInit+0x240>
		__ticks = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	9e af       	std	Y+62, r25	; 0x3e
     fde:	8d af       	std	Y+61, r24	; 0x3d
     fe0:	46 c0       	rjmp	.+140    	; 0x106e <LCD_vInit+0x2cc>
	else if (__tmp > 65535)
     fe2:	fe 01       	movw	r30, r28
     fe4:	ff 96       	adiw	r30, 0x3f	; 63
     fe6:	60 81       	ld	r22, Z
     fe8:	71 81       	ldd	r23, Z+1	; 0x01
     fea:	82 81       	ldd	r24, Z+2	; 0x02
     fec:	93 81       	ldd	r25, Z+3	; 0x03
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	3f ef       	ldi	r19, 0xFF	; 255
     ff2:	4f e7       	ldi	r20, 0x7F	; 127
     ff4:	57 e4       	ldi	r21, 0x47	; 71
     ff6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ffa:	18 16       	cp	r1, r24
     ffc:	64 f5       	brge	.+88     	; 0x1056 <LCD_vInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffe:	fe 01       	movw	r30, r28
    1000:	ed 5b       	subi	r30, 0xBD	; 189
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	60 81       	ld	r22, Z
    1006:	71 81       	ldd	r23, Z+1	; 0x01
    1008:	82 81       	ldd	r24, Z+2	; 0x02
    100a:	93 81       	ldd	r25, Z+3	; 0x03
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e2       	ldi	r20, 0x20	; 32
    1012:	51 e4       	ldi	r21, 0x41	; 65
    1014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	9e af       	std	Y+62, r25	; 0x3e
    102a:	8d af       	std	Y+61, r24	; 0x3d
    102c:	0f c0       	rjmp	.+30     	; 0x104c <LCD_vInit+0x2aa>
    102e:	88 ec       	ldi	r24, 0xC8	; 200
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	9c af       	std	Y+60, r25	; 0x3c
    1034:	8b af       	std	Y+59, r24	; 0x3b
    1036:	8b ad       	ldd	r24, Y+59	; 0x3b
    1038:	9c ad       	ldd	r25, Y+60	; 0x3c
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <LCD_vInit+0x298>
    103e:	9c af       	std	Y+60, r25	; 0x3c
    1040:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1042:	8d ad       	ldd	r24, Y+61	; 0x3d
    1044:	9e ad       	ldd	r25, Y+62	; 0x3e
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	9e af       	std	Y+62, r25	; 0x3e
    104a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104c:	8d ad       	ldd	r24, Y+61	; 0x3d
    104e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	69 f7       	brne	.-38     	; 0x102e <LCD_vInit+0x28c>
    1054:	16 c0       	rjmp	.+44     	; 0x1082 <LCD_vInit+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1056:	fe 01       	movw	r30, r28
    1058:	ff 96       	adiw	r30, 0x3f	; 63
    105a:	60 81       	ld	r22, Z
    105c:	71 81       	ldd	r23, Z+1	; 0x01
    105e:	82 81       	ldd	r24, Z+2	; 0x02
    1060:	93 81       	ldd	r25, Z+3	; 0x03
    1062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	9e af       	std	Y+62, r25	; 0x3e
    106c:	8d af       	std	Y+61, r24	; 0x3d
    106e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1070:	9e ad       	ldd	r25, Y+62	; 0x3e
    1072:	9a af       	std	Y+58, r25	; 0x3a
    1074:	89 af       	std	Y+57, r24	; 0x39
    1076:	89 ad       	ldd	r24, Y+57	; 0x39
    1078:	9a ad       	ldd	r25, Y+58	; 0x3a
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <LCD_vInit+0x2d8>
    107e:	9a af       	std	Y+58, r25	; 0x3a
    1080:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_vSend_cmd(FOUR_BITS); //4bit mode
    1082:	88 e2       	ldi	r24, 0x28	; 40
    1084:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_vSend_cmd>
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a0 e8       	ldi	r26, 0x80	; 128
    108e:	bf e3       	ldi	r27, 0x3F	; 63
    1090:	8d ab       	std	Y+53, r24	; 0x35
    1092:	9e ab       	std	Y+54, r25	; 0x36
    1094:	af ab       	std	Y+55, r26	; 0x37
    1096:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1098:	6d a9       	ldd	r22, Y+53	; 0x35
    109a:	7e a9       	ldd	r23, Y+54	; 0x36
    109c:	8f a9       	ldd	r24, Y+55	; 0x37
    109e:	98 ad       	ldd	r25, Y+56	; 0x38
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	4a ef       	ldi	r20, 0xFA	; 250
    10a6:	54 e4       	ldi	r21, 0x44	; 68
    10a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	89 ab       	std	Y+49, r24	; 0x31
    10b2:	9a ab       	std	Y+50, r25	; 0x32
    10b4:	ab ab       	std	Y+51, r26	; 0x33
    10b6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10b8:	69 a9       	ldd	r22, Y+49	; 0x31
    10ba:	7a a9       	ldd	r23, Y+50	; 0x32
    10bc:	8b a9       	ldd	r24, Y+51	; 0x33
    10be:	9c a9       	ldd	r25, Y+52	; 0x34
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e8       	ldi	r20, 0x80	; 128
    10c6:	5f e3       	ldi	r21, 0x3F	; 63
    10c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10cc:	88 23       	and	r24, r24
    10ce:	2c f4       	brge	.+10     	; 0x10da <LCD_vInit+0x338>
		__ticks = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	98 ab       	std	Y+48, r25	; 0x30
    10d6:	8f a7       	std	Y+47, r24	; 0x2f
    10d8:	3f c0       	rjmp	.+126    	; 0x1158 <LCD_vInit+0x3b6>
	else if (__tmp > 65535)
    10da:	69 a9       	ldd	r22, Y+49	; 0x31
    10dc:	7a a9       	ldd	r23, Y+50	; 0x32
    10de:	8b a9       	ldd	r24, Y+51	; 0x33
    10e0:	9c a9       	ldd	r25, Y+52	; 0x34
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	3f ef       	ldi	r19, 0xFF	; 255
    10e6:	4f e7       	ldi	r20, 0x7F	; 127
    10e8:	57 e4       	ldi	r21, 0x47	; 71
    10ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ee:	18 16       	cp	r1, r24
    10f0:	4c f5       	brge	.+82     	; 0x1144 <LCD_vInit+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f2:	6d a9       	ldd	r22, Y+53	; 0x35
    10f4:	7e a9       	ldd	r23, Y+54	; 0x36
    10f6:	8f a9       	ldd	r24, Y+55	; 0x37
    10f8:	98 ad       	ldd	r25, Y+56	; 0x38
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e2       	ldi	r20, 0x20	; 32
    1100:	51 e4       	ldi	r21, 0x41	; 65
    1102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	bc 01       	movw	r22, r24
    110c:	cd 01       	movw	r24, r26
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	98 ab       	std	Y+48, r25	; 0x30
    1118:	8f a7       	std	Y+47, r24	; 0x2f
    111a:	0f c0       	rjmp	.+30     	; 0x113a <LCD_vInit+0x398>
    111c:	88 ec       	ldi	r24, 0xC8	; 200
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9e a7       	std	Y+46, r25	; 0x2e
    1122:	8d a7       	std	Y+45, r24	; 0x2d
    1124:	8d a5       	ldd	r24, Y+45	; 0x2d
    1126:	9e a5       	ldd	r25, Y+46	; 0x2e
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <LCD_vInit+0x386>
    112c:	9e a7       	std	Y+46, r25	; 0x2e
    112e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1130:	8f a5       	ldd	r24, Y+47	; 0x2f
    1132:	98 a9       	ldd	r25, Y+48	; 0x30
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	98 ab       	std	Y+48, r25	; 0x30
    1138:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113a:	8f a5       	ldd	r24, Y+47	; 0x2f
    113c:	98 a9       	ldd	r25, Y+48	; 0x30
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	69 f7       	brne	.-38     	; 0x111c <LCD_vInit+0x37a>
    1142:	14 c0       	rjmp	.+40     	; 0x116c <LCD_vInit+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1144:	69 a9       	ldd	r22, Y+49	; 0x31
    1146:	7a a9       	ldd	r23, Y+50	; 0x32
    1148:	8b a9       	ldd	r24, Y+51	; 0x33
    114a:	9c a9       	ldd	r25, Y+52	; 0x34
    114c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	98 ab       	std	Y+48, r25	; 0x30
    1156:	8f a7       	std	Y+47, r24	; 0x2f
    1158:	8f a5       	ldd	r24, Y+47	; 0x2f
    115a:	98 a9       	ldd	r25, Y+48	; 0x30
    115c:	9c a7       	std	Y+44, r25	; 0x2c
    115e:	8b a7       	std	Y+43, r24	; 0x2b
    1160:	8b a5       	ldd	r24, Y+43	; 0x2b
    1162:	9c a5       	ldd	r25, Y+44	; 0x2c
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <LCD_vInit+0x3c2>
    1168:	9c a7       	std	Y+44, r25	; 0x2c
    116a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
    116c:	8e e0       	ldi	r24, 0x0E	; 14
    116e:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_vSend_cmd>
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a0 e8       	ldi	r26, 0x80	; 128
    1178:	bf e3       	ldi	r27, 0x3F	; 63
    117a:	8f a3       	std	Y+39, r24	; 0x27
    117c:	98 a7       	std	Y+40, r25	; 0x28
    117e:	a9 a7       	std	Y+41, r26	; 0x29
    1180:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1182:	6f a1       	ldd	r22, Y+39	; 0x27
    1184:	78 a5       	ldd	r23, Y+40	; 0x28
    1186:	89 a5       	ldd	r24, Y+41	; 0x29
    1188:	9a a5       	ldd	r25, Y+42	; 0x2a
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	4a ef       	ldi	r20, 0xFA	; 250
    1190:	54 e4       	ldi	r21, 0x44	; 68
    1192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	8b a3       	std	Y+35, r24	; 0x23
    119c:	9c a3       	std	Y+36, r25	; 0x24
    119e:	ad a3       	std	Y+37, r26	; 0x25
    11a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11a2:	6b a1       	ldd	r22, Y+35	; 0x23
    11a4:	7c a1       	ldd	r23, Y+36	; 0x24
    11a6:	8d a1       	ldd	r24, Y+37	; 0x25
    11a8:	9e a1       	ldd	r25, Y+38	; 0x26
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 e8       	ldi	r20, 0x80	; 128
    11b0:	5f e3       	ldi	r21, 0x3F	; 63
    11b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11b6:	88 23       	and	r24, r24
    11b8:	2c f4       	brge	.+10     	; 0x11c4 <LCD_vInit+0x422>
		__ticks = 1;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	9a a3       	std	Y+34, r25	; 0x22
    11c0:	89 a3       	std	Y+33, r24	; 0x21
    11c2:	3f c0       	rjmp	.+126    	; 0x1242 <LCD_vInit+0x4a0>
	else if (__tmp > 65535)
    11c4:	6b a1       	ldd	r22, Y+35	; 0x23
    11c6:	7c a1       	ldd	r23, Y+36	; 0x24
    11c8:	8d a1       	ldd	r24, Y+37	; 0x25
    11ca:	9e a1       	ldd	r25, Y+38	; 0x26
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	3f ef       	ldi	r19, 0xFF	; 255
    11d0:	4f e7       	ldi	r20, 0x7F	; 127
    11d2:	57 e4       	ldi	r21, 0x47	; 71
    11d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d8:	18 16       	cp	r1, r24
    11da:	4c f5       	brge	.+82     	; 0x122e <LCD_vInit+0x48c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11dc:	6f a1       	ldd	r22, Y+39	; 0x27
    11de:	78 a5       	ldd	r23, Y+40	; 0x28
    11e0:	89 a5       	ldd	r24, Y+41	; 0x29
    11e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e2       	ldi	r20, 0x20	; 32
    11ea:	51 e4       	ldi	r21, 0x41	; 65
    11ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	9a a3       	std	Y+34, r25	; 0x22
    1202:	89 a3       	std	Y+33, r24	; 0x21
    1204:	0f c0       	rjmp	.+30     	; 0x1224 <LCD_vInit+0x482>
    1206:	88 ec       	ldi	r24, 0xC8	; 200
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	98 a3       	std	Y+32, r25	; 0x20
    120c:	8f 8f       	std	Y+31, r24	; 0x1f
    120e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1210:	98 a1       	ldd	r25, Y+32	; 0x20
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <LCD_vInit+0x470>
    1216:	98 a3       	std	Y+32, r25	; 0x20
    1218:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121a:	89 a1       	ldd	r24, Y+33	; 0x21
    121c:	9a a1       	ldd	r25, Y+34	; 0x22
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	9a a3       	std	Y+34, r25	; 0x22
    1222:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1224:	89 a1       	ldd	r24, Y+33	; 0x21
    1226:	9a a1       	ldd	r25, Y+34	; 0x22
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	69 f7       	brne	.-38     	; 0x1206 <LCD_vInit+0x464>
    122c:	14 c0       	rjmp	.+40     	; 0x1256 <LCD_vInit+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122e:	6b a1       	ldd	r22, Y+35	; 0x23
    1230:	7c a1       	ldd	r23, Y+36	; 0x24
    1232:	8d a1       	ldd	r24, Y+37	; 0x25
    1234:	9e a1       	ldd	r25, Y+38	; 0x26
    1236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	9a a3       	std	Y+34, r25	; 0x22
    1240:	89 a3       	std	Y+33, r24	; 0x21
    1242:	89 a1       	ldd	r24, Y+33	; 0x21
    1244:	9a a1       	ldd	r25, Y+34	; 0x22
    1246:	9e 8f       	std	Y+30, r25	; 0x1e
    1248:	8d 8f       	std	Y+29, r24	; 0x1d
    124a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    124c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <LCD_vInit+0x4ac>
    1252:	9e 8f       	std	Y+30, r25	; 0x1e
    1254:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_vSend_cmd>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a0 e2       	ldi	r26, 0x20	; 32
    1262:	b1 e4       	ldi	r27, 0x41	; 65
    1264:	89 8f       	std	Y+25, r24	; 0x19
    1266:	9a 8f       	std	Y+26, r25	; 0x1a
    1268:	ab 8f       	std	Y+27, r26	; 0x1b
    126a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126c:	69 8d       	ldd	r22, Y+25	; 0x19
    126e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1270:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1272:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	4a ef       	ldi	r20, 0xFA	; 250
    127a:	54 e4       	ldi	r21, 0x44	; 68
    127c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	8d 8b       	std	Y+21, r24	; 0x15
    1286:	9e 8b       	std	Y+22, r25	; 0x16
    1288:	af 8b       	std	Y+23, r26	; 0x17
    128a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    128c:	6d 89       	ldd	r22, Y+21	; 0x15
    128e:	7e 89       	ldd	r23, Y+22	; 0x16
    1290:	8f 89       	ldd	r24, Y+23	; 0x17
    1292:	98 8d       	ldd	r25, Y+24	; 0x18
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e8       	ldi	r20, 0x80	; 128
    129a:	5f e3       	ldi	r21, 0x3F	; 63
    129c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	2c f4       	brge	.+10     	; 0x12ae <LCD_vInit+0x50c>
		__ticks = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9c 8b       	std	Y+20, r25	; 0x14
    12aa:	8b 8b       	std	Y+19, r24	; 0x13
    12ac:	3f c0       	rjmp	.+126    	; 0x132c <LCD_vInit+0x58a>
	else if (__tmp > 65535)
    12ae:	6d 89       	ldd	r22, Y+21	; 0x15
    12b0:	7e 89       	ldd	r23, Y+22	; 0x16
    12b2:	8f 89       	ldd	r24, Y+23	; 0x17
    12b4:	98 8d       	ldd	r25, Y+24	; 0x18
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	4f e7       	ldi	r20, 0x7F	; 127
    12bc:	57 e4       	ldi	r21, 0x47	; 71
    12be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c2:	18 16       	cp	r1, r24
    12c4:	4c f5       	brge	.+82     	; 0x1318 <LCD_vInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c6:	69 8d       	ldd	r22, Y+25	; 0x19
    12c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9c 8b       	std	Y+20, r25	; 0x14
    12ec:	8b 8b       	std	Y+19, r24	; 0x13
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <LCD_vInit+0x56c>
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9a 8b       	std	Y+18, r25	; 0x12
    12f6:	89 8b       	std	Y+17, r24	; 0x11
    12f8:	89 89       	ldd	r24, Y+17	; 0x11
    12fa:	9a 89       	ldd	r25, Y+18	; 0x12
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <LCD_vInit+0x55a>
    1300:	9a 8b       	std	Y+18, r25	; 0x12
    1302:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	8b 89       	ldd	r24, Y+19	; 0x13
    1306:	9c 89       	ldd	r25, Y+20	; 0x14
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9c 8b       	std	Y+20, r25	; 0x14
    130c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	8b 89       	ldd	r24, Y+19	; 0x13
    1310:	9c 89       	ldd	r25, Y+20	; 0x14
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f7       	brne	.-38     	; 0x12f0 <LCD_vInit+0x54e>
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <LCD_vInit+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1318:	6d 89       	ldd	r22, Y+21	; 0x15
    131a:	7e 89       	ldd	r23, Y+22	; 0x16
    131c:	8f 89       	ldd	r24, Y+23	; 0x17
    131e:	98 8d       	ldd	r25, Y+24	; 0x18
    1320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9c 8b       	std	Y+20, r25	; 0x14
    132a:	8b 8b       	std	Y+19, r24	; 0x13
    132c:	8b 89       	ldd	r24, Y+19	; 0x13
    132e:	9c 89       	ldd	r25, Y+20	; 0x14
    1330:	98 8b       	std	Y+16, r25	; 0x10
    1332:	8f 87       	std	Y+15, r24	; 0x0f
    1334:	8f 85       	ldd	r24, Y+15	; 0x0f
    1336:	98 89       	ldd	r25, Y+16	; 0x10
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <LCD_vInit+0x596>
    133c:	98 8b       	std	Y+16, r25	; 0x10
    133e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
    1340:	86 e0       	ldi	r24, 0x06	; 6
    1342:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_vSend_cmd>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a0 e8       	ldi	r26, 0x80	; 128
    134c:	bf e3       	ldi	r27, 0x3F	; 63
    134e:	8b 87       	std	Y+11, r24	; 0x0b
    1350:	9c 87       	std	Y+12, r25	; 0x0c
    1352:	ad 87       	std	Y+13, r26	; 0x0d
    1354:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1356:	6b 85       	ldd	r22, Y+11	; 0x0b
    1358:	7c 85       	ldd	r23, Y+12	; 0x0c
    135a:	8d 85       	ldd	r24, Y+13	; 0x0d
    135c:	9e 85       	ldd	r25, Y+14	; 0x0e
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	4a ef       	ldi	r20, 0xFA	; 250
    1364:	54 e4       	ldi	r21, 0x44	; 68
    1366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	8f 83       	std	Y+7, r24	; 0x07
    1370:	98 87       	std	Y+8, r25	; 0x08
    1372:	a9 87       	std	Y+9, r26	; 0x09
    1374:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1376:	6f 81       	ldd	r22, Y+7	; 0x07
    1378:	78 85       	ldd	r23, Y+8	; 0x08
    137a:	89 85       	ldd	r24, Y+9	; 0x09
    137c:	9a 85       	ldd	r25, Y+10	; 0x0a
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e8       	ldi	r20, 0x80	; 128
    1384:	5f e3       	ldi	r21, 0x3F	; 63
    1386:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    138a:	88 23       	and	r24, r24
    138c:	2c f4       	brge	.+10     	; 0x1398 <LCD_vInit+0x5f6>
		__ticks = 1;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	3f c0       	rjmp	.+126    	; 0x1416 <LCD_vInit+0x674>
	else if (__tmp > 65535)
    1398:	6f 81       	ldd	r22, Y+7	; 0x07
    139a:	78 85       	ldd	r23, Y+8	; 0x08
    139c:	89 85       	ldd	r24, Y+9	; 0x09
    139e:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	3f ef       	ldi	r19, 0xFF	; 255
    13a4:	4f e7       	ldi	r20, 0x7F	; 127
    13a6:	57 e4       	ldi	r21, 0x47	; 71
    13a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ac:	18 16       	cp	r1, r24
    13ae:	4c f5       	brge	.+82     	; 0x1402 <LCD_vInit+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e2       	ldi	r20, 0x20	; 32
    13be:	51 e4       	ldi	r21, 0x41	; 65
    13c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	9e 83       	std	Y+6, r25	; 0x06
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	0f c0       	rjmp	.+30     	; 0x13f8 <LCD_vInit+0x656>
    13da:	88 ec       	ldi	r24, 0xC8	; 200
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	9c 83       	std	Y+4, r25	; 0x04
    13e0:	8b 83       	std	Y+3, r24	; 0x03
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <LCD_vInit+0x644>
    13ea:	9c 83       	std	Y+4, r25	; 0x04
    13ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	9e 83       	std	Y+6, r25	; 0x06
    13f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	69 f7       	brne	.-38     	; 0x13da <LCD_vInit+0x638>
    1400:	14 c0       	rjmp	.+40     	; 0x142a <LCD_vInit+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1402:	6f 81       	ldd	r22, Y+7	; 0x07
    1404:	78 85       	ldd	r23, Y+8	; 0x08
    1406:	89 85       	ldd	r24, Y+9	; 0x09
    1408:	9a 85       	ldd	r25, Y+10	; 0x0a
    140a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <LCD_vInit+0x680>
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	#endif
}
    142a:	cc 5a       	subi	r28, 0xAC	; 172
    142c:	df 4f       	sbci	r29, 0xFF	; 255
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	08 95       	ret

00001442 <send_falling_edge>:


static void send_falling_edge(void)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	6c 97       	sbiw	r28, 0x1c	; 28
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
	DIO_write('A',EN,1);
    1456:	81 e4       	ldi	r24, 0x41	; 65
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 e0       	ldi	r26, 0x00	; 0
    1466:	b0 e4       	ldi	r27, 0x40	; 64
    1468:	89 8f       	std	Y+25, r24	; 0x19
    146a:	9a 8f       	std	Y+26, r25	; 0x1a
    146c:	ab 8f       	std	Y+27, r26	; 0x1b
    146e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	69 8d       	ldd	r22, Y+25	; 0x19
    1472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	4a ef       	ldi	r20, 0xFA	; 250
    147e:	54 e4       	ldi	r21, 0x44	; 68
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8d 8b       	std	Y+21, r24	; 0x15
    148a:	9e 8b       	std	Y+22, r25	; 0x16
    148c:	af 8b       	std	Y+23, r26	; 0x17
    148e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1490:	6d 89       	ldd	r22, Y+21	; 0x15
    1492:	7e 89       	ldd	r23, Y+22	; 0x16
    1494:	8f 89       	ldd	r24, Y+23	; 0x17
    1496:	98 8d       	ldd	r25, Y+24	; 0x18
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <send_falling_edge+0x70>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9c 8b       	std	Y+20, r25	; 0x14
    14ae:	8b 8b       	std	Y+19, r24	; 0x13
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <send_falling_edge+0xee>
	else if (__tmp > 65535)
    14b2:	6d 89       	ldd	r22, Y+21	; 0x15
    14b4:	7e 89       	ldd	r23, Y+22	; 0x16
    14b6:	8f 89       	ldd	r24, Y+23	; 0x17
    14b8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <send_falling_edge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	69 8d       	ldd	r22, Y+25	; 0x19
    14cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9c 8b       	std	Y+20, r25	; 0x14
    14f0:	8b 8b       	std	Y+19, r24	; 0x13
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <send_falling_edge+0xd0>
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9a 8b       	std	Y+18, r25	; 0x12
    14fa:	89 8b       	std	Y+17, r24	; 0x11
    14fc:	89 89       	ldd	r24, Y+17	; 0x11
    14fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <send_falling_edge+0xbe>
    1504:	9a 8b       	std	Y+18, r25	; 0x12
    1506:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	8b 89       	ldd	r24, Y+19	; 0x13
    150a:	9c 89       	ldd	r25, Y+20	; 0x14
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	9c 8b       	std	Y+20, r25	; 0x14
    1510:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	8b 89       	ldd	r24, Y+19	; 0x13
    1514:	9c 89       	ldd	r25, Y+20	; 0x14
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f7       	brne	.-38     	; 0x14f4 <send_falling_edge+0xb2>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <send_falling_edge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	6d 89       	ldd	r22, Y+21	; 0x15
    151e:	7e 89       	ldd	r23, Y+22	; 0x16
    1520:	8f 89       	ldd	r24, Y+23	; 0x17
    1522:	98 8d       	ldd	r25, Y+24	; 0x18
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9c 8b       	std	Y+20, r25	; 0x14
    152e:	8b 8b       	std	Y+19, r24	; 0x13
    1530:	8b 89       	ldd	r24, Y+19	; 0x13
    1532:	9c 89       	ldd	r25, Y+20	; 0x14
    1534:	98 8b       	std	Y+16, r25	; 0x10
    1536:	8f 87       	std	Y+15, r24	; 0x0f
    1538:	8f 85       	ldd	r24, Y+15	; 0x0f
    153a:	98 89       	ldd	r25, Y+16	; 0x10
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <send_falling_edge+0xfa>
    1540:	98 8b       	std	Y+16, r25	; 0x10
    1542:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_write('A',EN,0);
    1544:	81 e4       	ldi	r24, 0x41	; 65
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a0 e0       	ldi	r26, 0x00	; 0
    1554:	b0 e4       	ldi	r27, 0x40	; 64
    1556:	8b 87       	std	Y+11, r24	; 0x0b
    1558:	9c 87       	std	Y+12, r25	; 0x0c
    155a:	ad 87       	std	Y+13, r26	; 0x0d
    155c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1560:	7c 85       	ldd	r23, Y+12	; 0x0c
    1562:	8d 85       	ldd	r24, Y+13	; 0x0d
    1564:	9e 85       	ldd	r25, Y+14	; 0x0e
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	4a ef       	ldi	r20, 0xFA	; 250
    156c:	54 e4       	ldi	r21, 0x44	; 68
    156e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	8f 83       	std	Y+7, r24	; 0x07
    1578:	98 87       	std	Y+8, r25	; 0x08
    157a:	a9 87       	std	Y+9, r26	; 0x09
    157c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    157e:	6f 81       	ldd	r22, Y+7	; 0x07
    1580:	78 85       	ldd	r23, Y+8	; 0x08
    1582:	89 85       	ldd	r24, Y+9	; 0x09
    1584:	9a 85       	ldd	r25, Y+10	; 0x0a
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e8       	ldi	r20, 0x80	; 128
    158c:	5f e3       	ldi	r21, 0x3F	; 63
    158e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1592:	88 23       	and	r24, r24
    1594:	2c f4       	brge	.+10     	; 0x15a0 <send_falling_edge+0x15e>
		__ticks = 1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	9e 83       	std	Y+6, r25	; 0x06
    159c:	8d 83       	std	Y+5, r24	; 0x05
    159e:	3f c0       	rjmp	.+126    	; 0x161e <send_falling_edge+0x1dc>
	else if (__tmp > 65535)
    15a0:	6f 81       	ldd	r22, Y+7	; 0x07
    15a2:	78 85       	ldd	r23, Y+8	; 0x08
    15a4:	89 85       	ldd	r24, Y+9	; 0x09
    15a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	3f ef       	ldi	r19, 0xFF	; 255
    15ac:	4f e7       	ldi	r20, 0x7F	; 127
    15ae:	57 e4       	ldi	r21, 0x47	; 71
    15b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b4:	18 16       	cp	r1, r24
    15b6:	4c f5       	brge	.+82     	; 0x160a <send_falling_edge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    15bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15be:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e2       	ldi	r20, 0x20	; 32
    15c6:	51 e4       	ldi	r21, 0x41	; 65
    15c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	bc 01       	movw	r22, r24
    15d2:	cd 01       	movw	r24, r26
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	9e 83       	std	Y+6, r25	; 0x06
    15de:	8d 83       	std	Y+5, r24	; 0x05
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <send_falling_edge+0x1be>
    15e2:	88 ec       	ldi	r24, 0xC8	; 200
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	9c 83       	std	Y+4, r25	; 0x04
    15e8:	8b 83       	std	Y+3, r24	; 0x03
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <send_falling_edge+0x1ac>
    15f2:	9c 83       	std	Y+4, r25	; 0x04
    15f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	9e 81       	ldd	r25, Y+6	; 0x06
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	9e 83       	std	Y+6, r25	; 0x06
    15fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	69 f7       	brne	.-38     	; 0x15e2 <send_falling_edge+0x1a0>
    1608:	14 c0       	rjmp	.+40     	; 0x1632 <send_falling_edge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160a:	6f 81       	ldd	r22, Y+7	; 0x07
    160c:	78 85       	ldd	r23, Y+8	; 0x08
    160e:	89 85       	ldd	r24, Y+9	; 0x09
    1610:	9a 85       	ldd	r25, Y+10	; 0x0a
    1612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	8d 81       	ldd	r24, Y+5	; 0x05
    1620:	9e 81       	ldd	r25, Y+6	; 0x06
    1622:	9a 83       	std	Y+2, r25	; 0x02
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	9a 81       	ldd	r25, Y+2	; 0x02
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <send_falling_edge+0x1e8>
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1632:	6c 96       	adiw	r28, 0x1c	; 28
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	2f 97       	sbiw	r28, 0x0f	; 15
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',cmd>>4);
    165a:	8f 85       	ldd	r24, Y+15	; 0x0f
    165c:	98 2f       	mov	r25, r24
    165e:	92 95       	swap	r25
    1660:	9f 70       	andi	r25, 0x0F	; 15
    1662:	81 e4       	ldi	r24, 0x41	; 65
    1664:	69 2f       	mov	r22, r25
    1666:	0e 94 80 13 	call	0x2700	; 0x2700 <write_high_nibble>
	DIO_write('A',RS,0);
    166a:	81 e4       	ldi	r24, 0x41	; 65
    166c:	62 e0       	ldi	r22, 0x02	; 2
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
	send_falling_edge();
    1674:	0e 94 21 0a 	call	0x1442	; 0x1442 <send_falling_edge>
	write_high_nibble('A',cmd);
    1678:	81 e4       	ldi	r24, 0x41	; 65
    167a:	6f 85       	ldd	r22, Y+15	; 0x0f
    167c:	0e 94 80 13 	call	0x2700	; 0x2700 <write_high_nibble>
	DIO_write('A',RS,0);
    1680:	81 e4       	ldi	r24, 0x41	; 65
    1682:	62 e0       	ldi	r22, 0x02	; 2
    1684:	40 e0       	ldi	r20, 0x00	; 0
    1686:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
	send_falling_edge();
    168a:	0e 94 21 0a 	call	0x1442	; 0x1442 <send_falling_edge>
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a0 e8       	ldi	r26, 0x80	; 128
    1694:	bf e3       	ldi	r27, 0x3F	; 63
    1696:	8b 87       	std	Y+11, r24	; 0x0b
    1698:	9c 87       	std	Y+12, r25	; 0x0c
    169a:	ad 87       	std	Y+13, r26	; 0x0d
    169c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169e:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	4a ef       	ldi	r20, 0xFA	; 250
    16ac:	54 e4       	ldi	r21, 0x44	; 68
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	8f 83       	std	Y+7, r24	; 0x07
    16b8:	98 87       	std	Y+8, r25	; 0x08
    16ba:	a9 87       	std	Y+9, r26	; 0x09
    16bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16be:	6f 81       	ldd	r22, Y+7	; 0x07
    16c0:	78 85       	ldd	r23, Y+8	; 0x08
    16c2:	89 85       	ldd	r24, Y+9	; 0x09
    16c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <LCD_vSend_cmd+0x9c>
		__ticks = 1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
    16de:	3f c0       	rjmp	.+126    	; 0x175e <LCD_vSend_cmd+0x11a>
	else if (__tmp > 65535)
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	4f e7       	ldi	r20, 0x7F	; 127
    16ee:	57 e4       	ldi	r21, 0x47	; 71
    16f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	4c f5       	brge	.+82     	; 0x174a <LCD_vSend_cmd+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e2       	ldi	r20, 0x20	; 32
    1706:	51 e4       	ldi	r21, 0x41	; 65
    1708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <LCD_vSend_cmd+0xfc>
    1722:	88 ec       	ldi	r24, 0xC8	; 200
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <LCD_vSend_cmd+0xea>
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	9e 83       	std	Y+6, r25	; 0x06
    173e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	9e 81       	ldd	r25, Y+6	; 0x06
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	69 f7       	brne	.-38     	; 0x1722 <LCD_vSend_cmd+0xde>
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <LCD_vSend_cmd+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174a:	6f 81       	ldd	r22, Y+7	; 0x07
    174c:	78 85       	ldd	r23, Y+8	; 0x08
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <LCD_vSend_cmd+0x126>
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    1772:	2f 96       	adiw	r28, 0x0f	; 15
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <LCD_vSend_char>:

void LCD_vSend_char(char data)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	2f 97       	sbiw	r28, 0x0f	; 15
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_write_port('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	write_high_nibble('A',data>>4);
    179a:	8f 85       	ldd	r24, Y+15	; 0x0f
    179c:	98 2f       	mov	r25, r24
    179e:	92 95       	swap	r25
    17a0:	9f 70       	andi	r25, 0x0F	; 15
    17a2:	81 e4       	ldi	r24, 0x41	; 65
    17a4:	69 2f       	mov	r22, r25
    17a6:	0e 94 80 13 	call	0x2700	; 0x2700 <write_high_nibble>
	DIO_write('A',RS,1);
    17aa:	81 e4       	ldi	r24, 0x41	; 65
    17ac:	62 e0       	ldi	r22, 0x02	; 2
    17ae:	41 e0       	ldi	r20, 0x01	; 1
    17b0:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
	send_falling_edge();
    17b4:	0e 94 21 0a 	call	0x1442	; 0x1442 <send_falling_edge>
	write_high_nibble('A',data);
    17b8:	81 e4       	ldi	r24, 0x41	; 65
    17ba:	6f 85       	ldd	r22, Y+15	; 0x0f
    17bc:	0e 94 80 13 	call	0x2700	; 0x2700 <write_high_nibble>
	DIO_write('A',RS,1);
    17c0:	81 e4       	ldi	r24, 0x41	; 65
    17c2:	62 e0       	ldi	r22, 0x02	; 2
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
	send_falling_edge();
    17ca:	0e 94 21 0a 	call	0x1442	; 0x1442 <send_falling_edge>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a0 e8       	ldi	r26, 0x80	; 128
    17d4:	bf e3       	ldi	r27, 0x3F	; 63
    17d6:	8b 87       	std	Y+11, r24	; 0x0b
    17d8:	9c 87       	std	Y+12, r25	; 0x0c
    17da:	ad 87       	std	Y+13, r26	; 0x0d
    17dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17de:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	4a ef       	ldi	r20, 0xFA	; 250
    17ec:	54 e4       	ldi	r21, 0x44	; 68
    17ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	8f 83       	std	Y+7, r24	; 0x07
    17f8:	98 87       	std	Y+8, r25	; 0x08
    17fa:	a9 87       	std	Y+9, r26	; 0x09
    17fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1800:	78 85       	ldd	r23, Y+8	; 0x08
    1802:	89 85       	ldd	r24, Y+9	; 0x09
    1804:	9a 85       	ldd	r25, Y+10	; 0x0a
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	5f e3       	ldi	r21, 0x3F	; 63
    180e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1812:	88 23       	and	r24, r24
    1814:	2c f4       	brge	.+10     	; 0x1820 <LCD_vSend_char+0x9c>
		__ticks = 1;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
    181e:	3f c0       	rjmp	.+126    	; 0x189e <LCD_vSend_char+0x11a>
	else if (__tmp > 65535)
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	3f ef       	ldi	r19, 0xFF	; 255
    182c:	4f e7       	ldi	r20, 0x7F	; 127
    182e:	57 e4       	ldi	r21, 0x47	; 71
    1830:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1834:	18 16       	cp	r1, r24
    1836:	4c f5       	brge	.+82     	; 0x188a <LCD_vSend_char+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1838:	6b 85       	ldd	r22, Y+11	; 0x0b
    183a:	7c 85       	ldd	r23, Y+12	; 0x0c
    183c:	8d 85       	ldd	r24, Y+13	; 0x0d
    183e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e2       	ldi	r20, 0x20	; 32
    1846:	51 e4       	ldi	r21, 0x41	; 65
    1848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <LCD_vSend_char+0xfc>
    1862:	88 ec       	ldi	r24, 0xC8	; 200
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9c 83       	std	Y+4, r25	; 0x04
    1868:	8b 83       	std	Y+3, r24	; 0x03
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_vSend_char+0xea>
    1872:	9c 83       	std	Y+4, r25	; 0x04
    1874:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	9e 83       	std	Y+6, r25	; 0x06
    187e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	69 f7       	brne	.-38     	; 0x1862 <LCD_vSend_char+0xde>
    1888:	14 c0       	rjmp	.+40     	; 0x18b2 <LCD_vSend_char+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188a:	6f 81       	ldd	r22, Y+7	; 0x07
    188c:	78 85       	ldd	r23, Y+8	; 0x08
    188e:	89 85       	ldd	r24, Y+9	; 0x09
    1890:	9a 85       	ldd	r25, Y+10	; 0x0a
    1892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	9a 83       	std	Y+2, r25	; 0x02
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <LCD_vSend_char+0x126>
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
	#endif
	_delay_ms(1);
}
    18b2:	2f 96       	adiw	r28, 0x0f	; 15
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <LCD_vSend_string+0x6>
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	0a c0       	rjmp	.+20     	; 0x18e8 <LCD_vSend_string+0x24>
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
    18d4:	e9 81       	ldd	r30, Y+1	; 0x01
    18d6:	fa 81       	ldd	r31, Y+2	; 0x02
    18d8:	80 81       	ld	r24, Z
    18da:	0e 94 c2 0b 	call	0x1784	; 0x1784 <LCD_vSend_char>
		data++;
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	9a 81       	ldd	r25, Y+2	; 0x02
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	9a 83       	std	Y+2, r25	; 0x02
    18e6:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
    18e8:	e9 81       	ldd	r30, Y+1	; 0x01
    18ea:	fa 81       	ldd	r31, Y+2	; 0x02
    18ec:	80 81       	ld	r24, Z
    18ee:	88 23       	and	r24, r24
    18f0:	89 f7       	brne	.-30     	; 0x18d4 <LCD_vSend_string+0x10>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <LCD_clearscreen>:
void LCD_clearscreen()
{
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	2e 97       	sbiw	r28, 0x0e	; 14
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_vSend_cmd>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	a0 e2       	ldi	r26, 0x20	; 32
    191c:	b1 e4       	ldi	r27, 0x41	; 65
    191e:	8b 87       	std	Y+11, r24	; 0x0b
    1920:	9c 87       	std	Y+12, r25	; 0x0c
    1922:	ad 87       	std	Y+13, r26	; 0x0d
    1924:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1926:	6b 85       	ldd	r22, Y+11	; 0x0b
    1928:	7c 85       	ldd	r23, Y+12	; 0x0c
    192a:	8d 85       	ldd	r24, Y+13	; 0x0d
    192c:	9e 85       	ldd	r25, Y+14	; 0x0e
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	4a ef       	ldi	r20, 0xFA	; 250
    1934:	54 e4       	ldi	r21, 0x44	; 68
    1936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	8f 83       	std	Y+7, r24	; 0x07
    1940:	98 87       	std	Y+8, r25	; 0x08
    1942:	a9 87       	std	Y+9, r26	; 0x09
    1944:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1946:	6f 81       	ldd	r22, Y+7	; 0x07
    1948:	78 85       	ldd	r23, Y+8	; 0x08
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e8       	ldi	r20, 0x80	; 128
    1954:	5f e3       	ldi	r21, 0x3F	; 63
    1956:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    195a:	88 23       	and	r24, r24
    195c:	2c f4       	brge	.+10     	; 0x1968 <LCD_clearscreen+0x6c>
		__ticks = 1;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9e 83       	std	Y+6, r25	; 0x06
    1964:	8d 83       	std	Y+5, r24	; 0x05
    1966:	3f c0       	rjmp	.+126    	; 0x19e6 <LCD_clearscreen+0xea>
	else if (__tmp > 65535)
    1968:	6f 81       	ldd	r22, Y+7	; 0x07
    196a:	78 85       	ldd	r23, Y+8	; 0x08
    196c:	89 85       	ldd	r24, Y+9	; 0x09
    196e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	3f ef       	ldi	r19, 0xFF	; 255
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	57 e4       	ldi	r21, 0x47	; 71
    1978:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    197c:	18 16       	cp	r1, r24
    197e:	4c f5       	brge	.+82     	; 0x19d2 <LCD_clearscreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1980:	6b 85       	ldd	r22, Y+11	; 0x0b
    1982:	7c 85       	ldd	r23, Y+12	; 0x0c
    1984:	8d 85       	ldd	r24, Y+13	; 0x0d
    1986:	9e 85       	ldd	r25, Y+14	; 0x0e
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e2       	ldi	r20, 0x20	; 32
    198e:	51 e4       	ldi	r21, 0x41	; 65
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <LCD_clearscreen+0xcc>
    19aa:	88 ec       	ldi	r24, 0xC8	; 200
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9c 83       	std	Y+4, r25	; 0x04
    19b0:	8b 83       	std	Y+3, r24	; 0x03
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <LCD_clearscreen+0xba>
    19ba:	9c 83       	std	Y+4, r25	; 0x04
    19bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19be:	8d 81       	ldd	r24, Y+5	; 0x05
    19c0:	9e 81       	ldd	r25, Y+6	; 0x06
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	9e 83       	std	Y+6, r25	; 0x06
    19c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	9e 81       	ldd	r25, Y+6	; 0x06
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	69 f7       	brne	.-38     	; 0x19aa <LCD_clearscreen+0xae>
    19d0:	14 c0       	rjmp	.+40     	; 0x19fa <LCD_clearscreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d2:	6f 81       	ldd	r22, Y+7	; 0x07
    19d4:	78 85       	ldd	r23, Y+8	; 0x08
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	9e 83       	std	Y+6, r25	; 0x06
    19e4:	8d 83       	std	Y+5, r24	; 0x05
    19e6:	8d 81       	ldd	r24, Y+5	; 0x05
    19e8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	9a 81       	ldd	r25, Y+2	; 0x02
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <LCD_clearscreen+0xf6>
    19f6:	9a 83       	std	Y+2, r25	; 0x02
    19f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    19fa:	2e 96       	adiw	r28, 0x0e	; 14
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	61 97       	sbiw	r28, 0x11	; 17
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	88 8b       	std	Y+16, r24	; 0x10
    1a22:	69 8b       	std	Y+17, r22	; 0x11
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
    1a24:	88 89       	ldd	r24, Y+16	; 0x10
    1a26:	83 30       	cpi	r24, 0x03	; 3
    1a28:	48 f4       	brcc	.+18     	; 0x1a3c <LCD_movecursor+0x30>
    1a2a:	88 89       	ldd	r24, Y+16	; 0x10
    1a2c:	88 23       	and	r24, r24
    1a2e:	31 f0       	breq	.+12     	; 0x1a3c <LCD_movecursor+0x30>
    1a30:	89 89       	ldd	r24, Y+17	; 0x11
    1a32:	81 31       	cpi	r24, 0x11	; 17
    1a34:	18 f4       	brcc	.+6      	; 0x1a3c <LCD_movecursor+0x30>
    1a36:	89 89       	ldd	r24, Y+17	; 0x11
    1a38:	88 23       	and	r24, r24
    1a3a:	19 f4       	brne	.+6      	; 0x1a42 <LCD_movecursor+0x36>
	{
		data=0x80;
    1a3c:	80 e8       	ldi	r24, 0x80	; 128
    1a3e:	8f 87       	std	Y+15, r24	; 0x0f
    1a40:	0d c0       	rjmp	.+26     	; 0x1a5c <LCD_movecursor+0x50>
	}
	else if(row==1)
    1a42:	88 89       	ldd	r24, Y+16	; 0x10
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	21 f4       	brne	.+8      	; 0x1a50 <LCD_movecursor+0x44>
	{
		data=0x80+coloumn-1 ;
    1a48:	89 89       	ldd	r24, Y+17	; 0x11
    1a4a:	81 58       	subi	r24, 0x81	; 129
    1a4c:	8f 87       	std	Y+15, r24	; 0x0f
    1a4e:	06 c0       	rjmp	.+12     	; 0x1a5c <LCD_movecursor+0x50>
	}
	else if (row==2)
    1a50:	88 89       	ldd	r24, Y+16	; 0x10
    1a52:	82 30       	cpi	r24, 0x02	; 2
    1a54:	19 f4       	brne	.+6      	; 0x1a5c <LCD_movecursor+0x50>
	{
		data=0xc0+coloumn-1;
    1a56:	89 89       	ldd	r24, Y+17	; 0x11
    1a58:	81 54       	subi	r24, 0x41	; 65
    1a5a:	8f 87       	std	Y+15, r24	; 0x0f
	}
	LCD_vSend_cmd(data);
    1a5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5e:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_vSend_cmd>
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a0 e8       	ldi	r26, 0x80	; 128
    1a68:	bf e3       	ldi	r27, 0x3F	; 63
    1a6a:	8b 87       	std	Y+11, r24	; 0x0b
    1a6c:	9c 87       	std	Y+12, r25	; 0x0c
    1a6e:	ad 87       	std	Y+13, r26	; 0x0d
    1a70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a ef       	ldi	r20, 0xFA	; 250
    1a80:	54 e4       	ldi	r21, 0x44	; 68
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	8f 83       	std	Y+7, r24	; 0x07
    1a8c:	98 87       	std	Y+8, r25	; 0x08
    1a8e:	a9 87       	std	Y+9, r26	; 0x09
    1a90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a92:	6f 81       	ldd	r22, Y+7	; 0x07
    1a94:	78 85       	ldd	r23, Y+8	; 0x08
    1a96:	89 85       	ldd	r24, Y+9	; 0x09
    1a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	2c f4       	brge	.+10     	; 0x1ab4 <LCD_movecursor+0xa8>
		__ticks = 1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9e 83       	std	Y+6, r25	; 0x06
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <LCD_movecursor+0x126>
	else if (__tmp > 65535)
    1ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab6:	78 85       	ldd	r23, Y+8	; 0x08
    1ab8:	89 85       	ldd	r24, Y+9	; 0x09
    1aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	3f ef       	ldi	r19, 0xFF	; 255
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	57 e4       	ldi	r21, 0x47	; 71
    1ac4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac8:	18 16       	cp	r1, r24
    1aca:	4c f5       	brge	.+82     	; 0x1b1e <LCD_movecursor+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e2       	ldi	r20, 0x20	; 32
    1ada:	51 e4       	ldi	r21, 0x41	; 65
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	0f c0       	rjmp	.+30     	; 0x1b14 <LCD_movecursor+0x108>
    1af6:	88 ec       	ldi	r24, 0xC8	; 200
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9c 83       	std	Y+4, r25	; 0x04
    1afc:	8b 83       	std	Y+3, r24	; 0x03
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <LCD_movecursor+0xf6>
    1b06:	9c 83       	std	Y+4, r25	; 0x04
    1b08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f7       	brne	.-38     	; 0x1af6 <LCD_movecursor+0xea>
    1b1c:	14 c0       	rjmp	.+40     	; 0x1b46 <LCD_movecursor+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b20:	78 85       	ldd	r23, Y+8	; 0x08
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	8d 81       	ldd	r24, Y+5	; 0x05
    1b34:	9e 81       	ldd	r25, Y+6	; 0x06
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCD_movecursor+0x132>
    1b42:	9a 83       	std	Y+2, r25	; 0x02
    1b44:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1b46:	61 96       	adiw	r28, 0x11	; 17
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	f8 94       	cli
    1b4c:	de bf       	out	0x3e, r29	; 62
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	cd bf       	out	0x3d, r28	; 61
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <keypad_vInit>:
 * keypad_driver.c

 */ 
 #include "keypad.h"
 void keypad_vInit()
 {
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
	 DIO_vsetPINDir('D',0,1);
    1b60:	84 e4       	ldi	r24, 0x44	; 68
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',1,1);
    1b6a:	84 e4       	ldi	r24, 0x44	; 68
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',2,1);
    1b74:	84 e4       	ldi	r24, 0x44	; 68
    1b76:	62 e0       	ldi	r22, 0x02	; 2
    1b78:	41 e0       	ldi	r20, 0x01	; 1
    1b7a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',3,1);
    1b7e:	84 e4       	ldi	r24, 0x44	; 68
    1b80:	63 e0       	ldi	r22, 0x03	; 3
    1b82:	41 e0       	ldi	r20, 0x01	; 1
    1b84:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',4,0);
    1b88:	84 e4       	ldi	r24, 0x44	; 68
    1b8a:	64 e0       	ldi	r22, 0x04	; 4
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',5,0);
    1b92:	84 e4       	ldi	r24, 0x44	; 68
    1b94:	65 e0       	ldi	r22, 0x05	; 5
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',6,0);
    1b9c:	84 e4       	ldi	r24, 0x44	; 68
    1b9e:	66 e0       	ldi	r22, 0x06	; 6
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',7,0);
    1ba6:	84 e4       	ldi	r24, 0x44	; 68
    1ba8:	67 e0       	ldi	r22, 0x07	; 7
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <DIO_vsetPINDir>
	 DIO_vconnectpullup('D',4,1);
    1bb0:	84 e4       	ldi	r24, 0x44	; 68
    1bb2:	64 e0       	ldi	r22, 0x04	; 4
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	0e 94 2b 12 	call	0x2456	; 0x2456 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',5,1);
    1bba:	84 e4       	ldi	r24, 0x44	; 68
    1bbc:	65 e0       	ldi	r22, 0x05	; 5
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 2b 12 	call	0x2456	; 0x2456 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',6,1);
    1bc4:	84 e4       	ldi	r24, 0x44	; 68
    1bc6:	66 e0       	ldi	r22, 0x06	; 6
    1bc8:	41 e0       	ldi	r20, 0x01	; 1
    1bca:	0e 94 2b 12 	call	0x2456	; 0x2456 <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',7,1);
    1bce:	84 e4       	ldi	r24, 0x44	; 68
    1bd0:	67 e0       	ldi	r22, 0x07	; 7
    1bd2:	41 e0       	ldi	r20, 0x01	; 1
    1bd4:	0e 94 2b 12 	call	0x2456	; 0x2456 <DIO_vconnectpullup>
	  
 }
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <keypad_u8check_press>:
 char keypad_u8check_press()
 {
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	69 97       	sbiw	r28, 0x19	; 25
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	05 96       	adiw	r24, 0x05	; 5
    1bf6:	9e 8b       	std	Y+22, r25	; 0x16
    1bf8:	8d 8b       	std	Y+21, r24	; 0x15
    1bfa:	e9 ea       	ldi	r30, 0xA9	; 169
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	f8 8f       	std	Y+24, r31	; 0x18
    1c00:	ef 8b       	std	Y+23, r30	; 0x17
    1c02:	f0 e1       	ldi	r31, 0x10	; 16
    1c04:	f9 8f       	std	Y+25, r31	; 0x19
    1c06:	ef 89       	ldd	r30, Y+23	; 0x17
    1c08:	f8 8d       	ldd	r31, Y+24	; 0x18
    1c0a:	00 80       	ld	r0, Z
    1c0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	98 8f       	std	Y+24, r25	; 0x18
    1c14:	8f 8b       	std	Y+23, r24	; 0x17
    1c16:	ed 89       	ldd	r30, Y+21	; 0x15
    1c18:	fe 89       	ldd	r31, Y+22	; 0x16
    1c1a:	00 82       	st	Z, r0
    1c1c:	8d 89       	ldd	r24, Y+21	; 0x15
    1c1e:	9e 89       	ldd	r25, Y+22	; 0x16
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	9e 8b       	std	Y+22, r25	; 0x16
    1c24:	8d 8b       	std	Y+21, r24	; 0x15
    1c26:	99 8d       	ldd	r25, Y+25	; 0x19
    1c28:	91 50       	subi	r25, 0x01	; 1
    1c2a:	99 8f       	std	Y+25, r25	; 0x19
    1c2c:	e9 8d       	ldd	r30, Y+25	; 0x19
    1c2e:	ee 23       	and	r30, r30
    1c30:	51 f7       	brne	.-44     	; 0x1c06 <keypad_u8check_press+0x28>
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
    1c32:	8f ef       	ldi	r24, 0xFF	; 255
    1c34:	89 83       	std	Y+1, r24	; 0x01
	 for(row=0;row<4;row++)
    1c36:	1c 82       	std	Y+4, r1	; 0x04
    1c38:	47 c0       	rjmp	.+142    	; 0x1cc8 <keypad_u8check_press+0xea>
	 {
	 DIO_write('D',0,1);
    1c3a:	84 e4       	ldi	r24, 0x44	; 68
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	41 e0       	ldi	r20, 0x01	; 1
    1c40:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
	 DIO_write('D',1,1);
    1c44:	84 e4       	ldi	r24, 0x44	; 68
    1c46:	61 e0       	ldi	r22, 0x01	; 1
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
	 DIO_write('D',2,1);
    1c4e:	84 e4       	ldi	r24, 0x44	; 68
    1c50:	62 e0       	ldi	r22, 0x02	; 2
    1c52:	41 e0       	ldi	r20, 0x01	; 1
    1c54:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
	 DIO_write('D',3,1);
    1c58:	84 e4       	ldi	r24, 0x44	; 68
    1c5a:	63 e0       	ldi	r22, 0x03	; 3
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
	 DIO_write('D',row,0);
    1c62:	84 e4       	ldi	r24, 0x44	; 68
    1c64:	6c 81       	ldd	r22, Y+4	; 0x04
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	0e 94 56 0f 	call	0x1eac	; 0x1eac <DIO_write>
	
		for(coloumn=0;coloumn<4;coloumn++)
    1c6c:	1b 82       	std	Y+3, r1	; 0x03
    1c6e:	23 c0       	rjmp	.+70     	; 0x1cb6 <keypad_u8check_press+0xd8>
		{
		 x=DIO_u8read('D',(coloumn+4));
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	98 2f       	mov	r25, r24
    1c74:	9c 5f       	subi	r25, 0xFC	; 252
    1c76:	84 e4       	ldi	r24, 0x44	; 68
    1c78:	69 2f       	mov	r22, r25
    1c7a:	0e 94 3a 10 	call	0x2074	; 0x2074 <DIO_u8read>
    1c7e:	8a 83       	std	Y+2, r24	; 0x02
		 if(x==0)
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	88 23       	and	r24, r24
    1c84:	a9 f4       	brne	.+42     	; 0x1cb0 <keypad_u8check_press+0xd2>
			 {
			 returnval=arr[row][coloumn];
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	48 2f       	mov	r20, r24
    1c90:	50 e0       	ldi	r21, 0x00	; 0
    1c92:	22 0f       	add	r18, r18
    1c94:	33 1f       	adc	r19, r19
    1c96:	22 0f       	add	r18, r18
    1c98:	33 1f       	adc	r19, r19
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	01 96       	adiw	r24, 0x01	; 1
    1c9e:	82 0f       	add	r24, r18
    1ca0:	93 1f       	adc	r25, r19
    1ca2:	84 0f       	add	r24, r20
    1ca4:	95 1f       	adc	r25, r21
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	34 96       	adiw	r30, 0x04	; 4
    1caa:	80 81       	ld	r24, Z
    1cac:	89 83       	std	Y+1, r24	; 0x01
    1cae:	06 c0       	rjmp	.+12     	; 0x1cbc <keypad_u8check_press+0xde>
	 DIO_write('D',1,1);
	 DIO_write('D',2,1);
	 DIO_write('D',3,1);
	 DIO_write('D',row,0);
	
		for(coloumn=0;coloumn<4;coloumn++)
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	8f 5f       	subi	r24, 0xFF	; 255
    1cb4:	8b 83       	std	Y+3, r24	; 0x03
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	84 30       	cpi	r24, 0x04	; 4
    1cba:	d0 f2       	brcs	.-76     	; 0x1c70 <keypad_u8check_press+0x92>
			 {
			 returnval=arr[row][coloumn];
			 break;
			 }  
		}	
	 if(x==0)
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	88 23       	and	r24, r24
    1cc0:	39 f0       	breq	.+14     	; 0x1cd0 <keypad_u8check_press+0xf2>
 char keypad_u8check_press()
 {
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	8f 5f       	subi	r24, 0xFF	; 255
    1cc6:	8c 83       	std	Y+4, r24	; 0x04
    1cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cca:	84 30       	cpi	r24, 0x04	; 4
    1ccc:	08 f4       	brcc	.+2      	; 0x1cd0 <keypad_u8check_press+0xf2>
    1cce:	b5 cf       	rjmp	.-150    	; 0x1c3a <keypad_u8check_press+0x5c>
	 if(x==0)
		{
		 break;
		}
	 }	 
	 return returnval ;	 
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
 }
    1cd2:	69 96       	adiw	r28, 0x19	; 25
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <DIO_vsetPINDir>:
#include "../LIB/std_macros.h"
#include <avr/io.h>
#include "../LIB/STD_TYPES.h"
#include "DIO.h"
void DIO_vsetPINDir(u8 portname,unsigned char pinnumber,u8 direction)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <DIO_vsetPINDir+0x6>
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <DIO_vsetPINDir+0x8>
    1cec:	0f 92       	push	r0
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	6a 83       	std	Y+2, r22	; 0x02
    1cf6:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	3d 83       	std	Y+5, r19	; 0x05
    1d00:	2c 83       	std	Y+4, r18	; 0x04
    1d02:	8c 81       	ldd	r24, Y+4	; 0x04
    1d04:	9d 81       	ldd	r25, Y+5	; 0x05
    1d06:	82 34       	cpi	r24, 0x42	; 66
    1d08:	91 05       	cpc	r25, r1
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <DIO_vsetPINDir+0x2a>
    1d0c:	44 c0       	rjmp	.+136    	; 0x1d96 <DIO_vsetPINDir+0xb2>
    1d0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d10:	3d 81       	ldd	r19, Y+5	; 0x05
    1d12:	23 34       	cpi	r18, 0x43	; 67
    1d14:	31 05       	cpc	r19, r1
    1d16:	34 f4       	brge	.+12     	; 0x1d24 <DIO_vsetPINDir+0x40>
    1d18:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1c:	81 34       	cpi	r24, 0x41	; 65
    1d1e:	91 05       	cpc	r25, r1
    1d20:	71 f0       	breq	.+28     	; 0x1d3e <DIO_vsetPINDir+0x5a>
    1d22:	bc c0       	rjmp	.+376    	; 0x1e9c <DIO_vsetPINDir+0x1b8>
    1d24:	2c 81       	ldd	r18, Y+4	; 0x04
    1d26:	3d 81       	ldd	r19, Y+5	; 0x05
    1d28:	23 34       	cpi	r18, 0x43	; 67
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <DIO_vsetPINDir+0x4c>
    1d2e:	5f c0       	rjmp	.+190    	; 0x1dee <DIO_vsetPINDir+0x10a>
    1d30:	8c 81       	ldd	r24, Y+4	; 0x04
    1d32:	9d 81       	ldd	r25, Y+5	; 0x05
    1d34:	84 34       	cpi	r24, 0x44	; 68
    1d36:	91 05       	cpc	r25, r1
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <DIO_vsetPINDir+0x58>
    1d3a:	85 c0       	rjmp	.+266    	; 0x1e46 <DIO_vsetPINDir+0x162>
    1d3c:	af c0       	rjmp	.+350    	; 0x1e9c <DIO_vsetPINDir+0x1b8>
	{
		
		
		case 'A':
		if(direction==1)
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	a1 f4       	brne	.+40     	; 0x1d6c <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
    1d44:	aa e3       	ldi	r26, 0x3A	; 58
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	ea e3       	ldi	r30, 0x3A	; 58
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	48 2f       	mov	r20, r24
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 2e       	mov	r0, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <DIO_vsetPINDir+0x7e>
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	0a 94       	dec	r0
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <DIO_vsetPINDir+0x7a>
    1d66:	84 2b       	or	r24, r20
    1d68:	8c 93       	st	X, r24
    1d6a:	98 c0       	rjmp	.+304    	; 0x1e9c <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
    1d6c:	aa e3       	ldi	r26, 0x3A	; 58
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	ea e3       	ldi	r30, 0x3A	; 58
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	48 2f       	mov	r20, r24
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	02 2e       	mov	r0, r18
    1d84:	02 c0       	rjmp	.+4      	; 0x1d8a <DIO_vsetPINDir+0xa6>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	0a 94       	dec	r0
    1d8c:	e2 f7       	brpl	.-8      	; 0x1d86 <DIO_vsetPINDir+0xa2>
    1d8e:	80 95       	com	r24
    1d90:	84 23       	and	r24, r20
    1d92:	8c 93       	st	X, r24
    1d94:	83 c0       	rjmp	.+262    	; 0x1e9c <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	a1 f4       	brne	.+40     	; 0x1dc4 <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
    1d9c:	a7 e3       	ldi	r26, 0x37	; 55
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e7 e3       	ldi	r30, 0x37	; 55
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	48 2f       	mov	r20, r24
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 2e       	mov	r0, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <DIO_vsetPINDir+0xd6>
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	0a 94       	dec	r0
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <DIO_vsetPINDir+0xd2>
    1dbe:	84 2b       	or	r24, r20
    1dc0:	8c 93       	st	X, r24
    1dc2:	6c c0       	rjmp	.+216    	; 0x1e9c <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
    1dc4:	a7 e3       	ldi	r26, 0x37	; 55
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e7 e3       	ldi	r30, 0x37	; 55
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	48 2f       	mov	r20, r24
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 2e       	mov	r0, r18
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <DIO_vsetPINDir+0xfe>
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	0a 94       	dec	r0
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <DIO_vsetPINDir+0xfa>
    1de6:	80 95       	com	r24
    1de8:	84 23       	and	r24, r20
    1dea:	8c 93       	st	X, r24
    1dec:	57 c0       	rjmp	.+174    	; 0x1e9c <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	a1 f4       	brne	.+40     	; 0x1e1c <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
    1df4:	a4 e3       	ldi	r26, 0x34	; 52
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e4 e3       	ldi	r30, 0x34	; 52
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	48 2f       	mov	r20, r24
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 2e       	mov	r0, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <DIO_vsetPINDir+0x12e>
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	0a 94       	dec	r0
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <DIO_vsetPINDir+0x12a>
    1e16:	84 2b       	or	r24, r20
    1e18:	8c 93       	st	X, r24
    1e1a:	40 c0       	rjmp	.+128    	; 0x1e9c <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
    1e1c:	a4 e3       	ldi	r26, 0x34	; 52
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e4 e3       	ldi	r30, 0x34	; 52
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	48 2f       	mov	r20, r24
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 2e       	mov	r0, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_vsetPINDir+0x156>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_vsetPINDir+0x152>
    1e3e:	80 95       	com	r24
    1e40:	84 23       	and	r24, r20
    1e42:	8c 93       	st	X, r24
    1e44:	2b c0       	rjmp	.+86     	; 0x1e9c <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	a1 f4       	brne	.+40     	; 0x1e74 <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
    1e4c:	a1 e3       	ldi	r26, 0x31	; 49
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e1 e3       	ldi	r30, 0x31	; 49
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	48 2f       	mov	r20, r24
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	02 2e       	mov	r0, r18
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <DIO_vsetPINDir+0x186>
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	0a 94       	dec	r0
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <DIO_vsetPINDir+0x182>
    1e6e:	84 2b       	or	r24, r20
    1e70:	8c 93       	st	X, r24
    1e72:	14 c0       	rjmp	.+40     	; 0x1e9c <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
    1e74:	a1 e3       	ldi	r26, 0x31	; 49
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e1 e3       	ldi	r30, 0x31	; 49
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	48 2f       	mov	r20, r24
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	02 2e       	mov	r0, r18
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <DIO_vsetPINDir+0x1ae>
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	0a 94       	dec	r0
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <DIO_vsetPINDir+0x1aa>
    1e96:	80 95       	com	r24
    1e98:	84 23       	and	r24, r20
    1e9a:	8c 93       	st	X, r24
		}
		break;
		default: 
		break;
	}
}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <DIO_write>:


void DIO_write(u8 portname,u8 pinnumber,u8 outputvalue)
{
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <DIO_write+0x6>
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <DIO_write+0x8>
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	6a 83       	std	Y+2, r22	; 0x02
    1ebe:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1ec0:	89 81       	ldd	r24, Y+1	; 0x01
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	3d 83       	std	Y+5, r19	; 0x05
    1ec8:	2c 83       	std	Y+4, r18	; 0x04
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ece:	82 34       	cpi	r24, 0x42	; 66
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <DIO_write+0x2a>
    1ed4:	44 c0       	rjmp	.+136    	; 0x1f5e <DIO_write+0xb2>
    1ed6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eda:	23 34       	cpi	r18, 0x43	; 67
    1edc:	31 05       	cpc	r19, r1
    1ede:	34 f4       	brge	.+12     	; 0x1eec <DIO_write+0x40>
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee4:	81 34       	cpi	r24, 0x41	; 65
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	71 f0       	breq	.+28     	; 0x1f06 <DIO_write+0x5a>
    1eea:	bc c0       	rjmp	.+376    	; 0x2064 <DIO_write+0x1b8>
    1eec:	2c 81       	ldd	r18, Y+4	; 0x04
    1eee:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef0:	23 34       	cpi	r18, 0x43	; 67
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <DIO_write+0x4c>
    1ef6:	5f c0       	rjmp	.+190    	; 0x1fb6 <DIO_write+0x10a>
    1ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    1efa:	9d 81       	ldd	r25, Y+5	; 0x05
    1efc:	84 34       	cpi	r24, 0x44	; 68
    1efe:	91 05       	cpc	r25, r1
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <DIO_write+0x58>
    1f02:	85 c0       	rjmp	.+266    	; 0x200e <DIO_write+0x162>
    1f04:	af c0       	rjmp	.+350    	; 0x2064 <DIO_write+0x1b8>
	{
		case 'A' :
		
		if(outputvalue==1)
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	a1 f4       	brne	.+40     	; 0x1f34 <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
    1f0c:	ab e3       	ldi	r26, 0x3B	; 59
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	eb e3       	ldi	r30, 0x3B	; 59
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	48 2f       	mov	r20, r24
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	02 2e       	mov	r0, r18
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <DIO_write+0x7e>
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	0a 94       	dec	r0
    1f2c:	e2 f7       	brpl	.-8      	; 0x1f26 <DIO_write+0x7a>
    1f2e:	84 2b       	or	r24, r20
    1f30:	8c 93       	st	X, r24
    1f32:	98 c0       	rjmp	.+304    	; 0x2064 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
    1f34:	ab e3       	ldi	r26, 0x3B	; 59
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	eb e3       	ldi	r30, 0x3B	; 59
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	48 2f       	mov	r20, r24
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	02 2e       	mov	r0, r18
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <DIO_write+0xa6>
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	0a 94       	dec	r0
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <DIO_write+0xa2>
    1f56:	80 95       	com	r24
    1f58:	84 23       	and	r24, r20
    1f5a:	8c 93       	st	X, r24
    1f5c:	83 c0       	rjmp	.+262    	; 0x2064 <DIO_write+0x1b8>
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	a1 f4       	brne	.+40     	; 0x1f8c <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
    1f64:	a8 e3       	ldi	r26, 0x38	; 56
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e8 e3       	ldi	r30, 0x38	; 56
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	48 2f       	mov	r20, r24
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	02 2e       	mov	r0, r18
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <DIO_write+0xd6>
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	0a 94       	dec	r0
    1f84:	e2 f7       	brpl	.-8      	; 0x1f7e <DIO_write+0xd2>
    1f86:	84 2b       	or	r24, r20
    1f88:	8c 93       	st	X, r24
    1f8a:	6c c0       	rjmp	.+216    	; 0x2064 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
    1f8c:	a8 e3       	ldi	r26, 0x38	; 56
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e8 e3       	ldi	r30, 0x38	; 56
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	48 2f       	mov	r20, r24
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	02 2e       	mov	r0, r18
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <DIO_write+0xfe>
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	0a 94       	dec	r0
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <DIO_write+0xfa>
    1fae:	80 95       	com	r24
    1fb0:	84 23       	and	r24, r20
    1fb2:	8c 93       	st	X, r24
    1fb4:	57 c0       	rjmp	.+174    	; 0x2064 <DIO_write+0x1b8>
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	a1 f4       	brne	.+40     	; 0x1fe4 <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
    1fbc:	a5 e3       	ldi	r26, 0x35	; 53
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e5 e3       	ldi	r30, 0x35	; 53
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	48 2f       	mov	r20, r24
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	02 2e       	mov	r0, r18
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <DIO_write+0x12e>
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	0a 94       	dec	r0
    1fdc:	e2 f7       	brpl	.-8      	; 0x1fd6 <DIO_write+0x12a>
    1fde:	84 2b       	or	r24, r20
    1fe0:	8c 93       	st	X, r24
    1fe2:	40 c0       	rjmp	.+128    	; 0x2064 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
    1fe4:	a5 e3       	ldi	r26, 0x35	; 53
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e5 e3       	ldi	r30, 0x35	; 53
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	48 2f       	mov	r20, r24
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	02 2e       	mov	r0, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <DIO_write+0x156>
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	0a 94       	dec	r0
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <DIO_write+0x152>
    2006:	80 95       	com	r24
    2008:	84 23       	and	r24, r20
    200a:	8c 93       	st	X, r24
    200c:	2b c0       	rjmp	.+86     	; 0x2064 <DIO_write+0x1b8>
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	a1 f4       	brne	.+40     	; 0x203c <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
    2014:	a2 e3       	ldi	r26, 0x32	; 50
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e2 e3       	ldi	r30, 0x32	; 50
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	48 2f       	mov	r20, r24
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	02 2e       	mov	r0, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <DIO_write+0x186>
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	0a 94       	dec	r0
    2034:	e2 f7       	brpl	.-8      	; 0x202e <DIO_write+0x182>
    2036:	84 2b       	or	r24, r20
    2038:	8c 93       	st	X, r24
    203a:	14 c0       	rjmp	.+40     	; 0x2064 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
    203c:	a2 e3       	ldi	r26, 0x32	; 50
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e2 e3       	ldi	r30, 0x32	; 50
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	48 2f       	mov	r20, r24
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	02 2e       	mov	r0, r18
    2054:	02 c0       	rjmp	.+4      	; 0x205a <DIO_write+0x1ae>
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	0a 94       	dec	r0
    205c:	e2 f7       	brpl	.-8      	; 0x2056 <DIO_write+0x1aa>
    205e:	80 95       	com	r24
    2060:	84 23       	and	r24, r20
    2062:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <DIO_u8read>:


unsigned char DIO_u8read(u8 portname,u8 pinnumber)
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	00 d0       	rcall	.+0      	; 0x207a <DIO_u8read+0x6>
    207a:	00 d0       	rcall	.+0      	; 0x207c <DIO_u8read+0x8>
    207c:	0f 92       	push	r0
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	8a 83       	std	Y+2, r24	; 0x02
    2084:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
    2086:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	3d 83       	std	Y+5, r19	; 0x05
    2090:	2c 83       	std	Y+4, r18	; 0x04
    2092:	4c 81       	ldd	r20, Y+4	; 0x04
    2094:	5d 81       	ldd	r21, Y+5	; 0x05
    2096:	42 34       	cpi	r20, 0x42	; 66
    2098:	51 05       	cpc	r21, r1
    209a:	b1 f1       	breq	.+108    	; 0x2108 <DIO_u8read+0x94>
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	9d 81       	ldd	r25, Y+5	; 0x05
    20a0:	83 34       	cpi	r24, 0x43	; 67
    20a2:	91 05       	cpc	r25, r1
    20a4:	34 f4       	brge	.+12     	; 0x20b2 <DIO_u8read+0x3e>
    20a6:	2c 81       	ldd	r18, Y+4	; 0x04
    20a8:	3d 81       	ldd	r19, Y+5	; 0x05
    20aa:	21 34       	cpi	r18, 0x41	; 65
    20ac:	31 05       	cpc	r19, r1
    20ae:	71 f0       	breq	.+28     	; 0x20cc <DIO_u8read+0x58>
    20b0:	84 c0       	rjmp	.+264    	; 0x21ba <DIO_u8read+0x146>
    20b2:	4c 81       	ldd	r20, Y+4	; 0x04
    20b4:	5d 81       	ldd	r21, Y+5	; 0x05
    20b6:	43 34       	cpi	r20, 0x43	; 67
    20b8:	51 05       	cpc	r21, r1
    20ba:	09 f4       	brne	.+2      	; 0x20be <DIO_u8read+0x4a>
    20bc:	43 c0       	rjmp	.+134    	; 0x2144 <DIO_u8read+0xd0>
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	84 34       	cpi	r24, 0x44	; 68
    20c4:	91 05       	cpc	r25, r1
    20c6:	09 f4       	brne	.+2      	; 0x20ca <DIO_u8read+0x56>
    20c8:	5b c0       	rjmp	.+182    	; 0x2180 <DIO_u8read+0x10c>
    20ca:	77 c0       	rjmp	.+238    	; 0x21ba <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
    20cc:	e9 e3       	ldi	r30, 0x39	; 57
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	48 2f       	mov	r20, r24
    20d4:	50 e0       	ldi	r21, 0x00	; 0
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <DIO_u8read+0x72>
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	2a 95       	dec	r18
    20e8:	e2 f7       	brpl	.-8      	; 0x20e2 <DIO_u8read+0x6e>
    20ea:	9a 01       	movw	r18, r20
    20ec:	28 23       	and	r18, r24
    20ee:	39 23       	and	r19, r25
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	88 2f       	mov	r24, r24
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	a9 01       	movw	r20, r18
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <DIO_u8read+0x8a>
    20fa:	55 95       	asr	r21
    20fc:	47 95       	ror	r20
    20fe:	8a 95       	dec	r24
    2100:	e2 f7       	brpl	.-8      	; 0x20fa <DIO_u8read+0x86>
    2102:	ca 01       	movw	r24, r20
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	59 c0       	rjmp	.+178    	; 0x21ba <DIO_u8read+0x146>
		break;
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
    2108:	e6 e3       	ldi	r30, 0x36	; 54
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	48 2f       	mov	r20, r24
    2110:	50 e0       	ldi	r21, 0x00	; 0
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <DIO_u8read+0xae>
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	2a 95       	dec	r18
    2124:	e2 f7       	brpl	.-8      	; 0x211e <DIO_u8read+0xaa>
    2126:	9a 01       	movw	r18, r20
    2128:	28 23       	and	r18, r24
    212a:	39 23       	and	r19, r25
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	88 2f       	mov	r24, r24
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a9 01       	movw	r20, r18
    2134:	02 c0       	rjmp	.+4      	; 0x213a <DIO_u8read+0xc6>
    2136:	55 95       	asr	r21
    2138:	47 95       	ror	r20
    213a:	8a 95       	dec	r24
    213c:	e2 f7       	brpl	.-8      	; 0x2136 <DIO_u8read+0xc2>
    213e:	ca 01       	movw	r24, r20
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	3b c0       	rjmp	.+118    	; 0x21ba <DIO_u8read+0x146>
		break;
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
    2144:	e3 e3       	ldi	r30, 0x33	; 51
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	48 2f       	mov	r20, r24
    214c:	50 e0       	ldi	r21, 0x00	; 0
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	28 2f       	mov	r18, r24
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	02 c0       	rjmp	.+4      	; 0x215e <DIO_u8read+0xea>
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	2a 95       	dec	r18
    2160:	e2 f7       	brpl	.-8      	; 0x215a <DIO_u8read+0xe6>
    2162:	9a 01       	movw	r18, r20
    2164:	28 23       	and	r18, r24
    2166:	39 23       	and	r19, r25
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	88 2f       	mov	r24, r24
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	a9 01       	movw	r20, r18
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <DIO_u8read+0x102>
    2172:	55 95       	asr	r21
    2174:	47 95       	ror	r20
    2176:	8a 95       	dec	r24
    2178:	e2 f7       	brpl	.-8      	; 0x2172 <DIO_u8read+0xfe>
    217a:	ca 01       	movw	r24, r20
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	1d c0       	rjmp	.+58     	; 0x21ba <DIO_u8read+0x146>
		break;
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
    2180:	e0 e3       	ldi	r30, 0x30	; 48
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	48 2f       	mov	r20, r24
    2188:	50 e0       	ldi	r21, 0x00	; 0
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	02 c0       	rjmp	.+4      	; 0x219a <DIO_u8read+0x126>
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	2a 95       	dec	r18
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <DIO_u8read+0x122>
    219e:	9a 01       	movw	r18, r20
    21a0:	28 23       	and	r18, r24
    21a2:	39 23       	and	r19, r25
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	88 2f       	mov	r24, r24
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a9 01       	movw	r20, r18
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <DIO_u8read+0x13e>
    21ae:	55 95       	asr	r21
    21b0:	47 95       	ror	r20
    21b2:	8a 95       	dec	r24
    21b4:	e2 f7       	brpl	.-8      	; 0x21ae <DIO_u8read+0x13a>
    21b6:	ca 01       	movw	r24, r20
    21b8:	89 83       	std	Y+1, r24	; 0x01
		break;
		default: 
		break;
	}
	return return_value ;
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <DIO_toggle>:
void DIO_toggle(u8 portname,u8 pinnumber)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <DIO_toggle+0x6>
    21d2:	00 d0       	rcall	.+0      	; 0x21d4 <DIO_toggle+0x8>
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	3c 83       	std	Y+4, r19	; 0x04
    21e4:	2b 83       	std	Y+3, r18	; 0x03
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	82 34       	cpi	r24, 0x42	; 66
    21ec:	91 05       	cpc	r25, r1
    21ee:	51 f1       	breq	.+84     	; 0x2244 <DIO_toggle+0x78>
    21f0:	2b 81       	ldd	r18, Y+3	; 0x03
    21f2:	3c 81       	ldd	r19, Y+4	; 0x04
    21f4:	23 34       	cpi	r18, 0x43	; 67
    21f6:	31 05       	cpc	r19, r1
    21f8:	34 f4       	brge	.+12     	; 0x2206 <DIO_toggle+0x3a>
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	9c 81       	ldd	r25, Y+4	; 0x04
    21fe:	81 34       	cpi	r24, 0x41	; 65
    2200:	91 05       	cpc	r25, r1
    2202:	61 f0       	breq	.+24     	; 0x221c <DIO_toggle+0x50>
    2204:	5a c0       	rjmp	.+180    	; 0x22ba <DIO_toggle+0xee>
    2206:	2b 81       	ldd	r18, Y+3	; 0x03
    2208:	3c 81       	ldd	r19, Y+4	; 0x04
    220a:	23 34       	cpi	r18, 0x43	; 67
    220c:	31 05       	cpc	r19, r1
    220e:	71 f1       	breq	.+92     	; 0x226c <DIO_toggle+0xa0>
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	84 34       	cpi	r24, 0x44	; 68
    2216:	91 05       	cpc	r25, r1
    2218:	e9 f1       	breq	.+122    	; 0x2294 <DIO_toggle+0xc8>
    221a:	4f c0       	rjmp	.+158    	; 0x22ba <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    221c:	ab e3       	ldi	r26, 0x3B	; 59
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	eb e3       	ldi	r30, 0x3B	; 59
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	48 2f       	mov	r20, r24
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	02 2e       	mov	r0, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <DIO_toggle+0x6e>
    2236:	88 0f       	add	r24, r24
    2238:	99 1f       	adc	r25, r25
    223a:	0a 94       	dec	r0
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <DIO_toggle+0x6a>
    223e:	84 27       	eor	r24, r20
    2240:	8c 93       	st	X, r24
    2242:	3b c0       	rjmp	.+118    	; 0x22ba <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    2244:	a8 e3       	ldi	r26, 0x38	; 56
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e8 e3       	ldi	r30, 0x38	; 56
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	48 2f       	mov	r20, r24
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	28 2f       	mov	r18, r24
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	02 2e       	mov	r0, r18
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <DIO_toggle+0x96>
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	0a 94       	dec	r0
    2264:	e2 f7       	brpl	.-8      	; 0x225e <DIO_toggle+0x92>
    2266:	84 27       	eor	r24, r20
    2268:	8c 93       	st	X, r24
    226a:	27 c0       	rjmp	.+78     	; 0x22ba <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    226c:	a5 e3       	ldi	r26, 0x35	; 53
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	e5 e3       	ldi	r30, 0x35	; 53
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	48 2f       	mov	r20, r24
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	28 2f       	mov	r18, r24
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	02 2e       	mov	r0, r18
    2284:	02 c0       	rjmp	.+4      	; 0x228a <DIO_toggle+0xbe>
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	0a 94       	dec	r0
    228c:	e2 f7       	brpl	.-8      	; 0x2286 <DIO_toggle+0xba>
    228e:	84 27       	eor	r24, r20
    2290:	8c 93       	st	X, r24
    2292:	13 c0       	rjmp	.+38     	; 0x22ba <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    2294:	a2 e3       	ldi	r26, 0x32	; 50
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e2 e3       	ldi	r30, 0x32	; 50
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	48 2f       	mov	r20, r24
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	02 2e       	mov	r0, r18
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <DIO_toggle+0xe6>
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	0a 94       	dec	r0
    22b4:	e2 f7       	brpl	.-8      	; 0x22ae <DIO_toggle+0xe2>
    22b6:	84 27       	eor	r24, r20
    22b8:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <DIO_set_port_direction>:
void DIO_set_port_direction(u8 portname,u8 direction)
{
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <DIO_set_port_direction+0x6>
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <DIO_set_port_direction+0x8>
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	3c 83       	std	Y+4, r19	; 0x04
    22e0:	2b 83       	std	Y+3, r18	; 0x03
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	9c 81       	ldd	r25, Y+4	; 0x04
    22e6:	82 34       	cpi	r24, 0x42	; 66
    22e8:	91 05       	cpc	r25, r1
    22ea:	d9 f0       	breq	.+54     	; 0x2322 <DIO_set_port_direction+0x5a>
    22ec:	2b 81       	ldd	r18, Y+3	; 0x03
    22ee:	3c 81       	ldd	r19, Y+4	; 0x04
    22f0:	23 34       	cpi	r18, 0x43	; 67
    22f2:	31 05       	cpc	r19, r1
    22f4:	34 f4       	brge	.+12     	; 0x2302 <DIO_set_port_direction+0x3a>
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	81 34       	cpi	r24, 0x41	; 65
    22fc:	91 05       	cpc	r25, r1
    22fe:	61 f0       	breq	.+24     	; 0x2318 <DIO_set_port_direction+0x50>
    2300:	1e c0       	rjmp	.+60     	; 0x233e <DIO_set_port_direction+0x76>
    2302:	2b 81       	ldd	r18, Y+3	; 0x03
    2304:	3c 81       	ldd	r19, Y+4	; 0x04
    2306:	23 34       	cpi	r18, 0x43	; 67
    2308:	31 05       	cpc	r19, r1
    230a:	81 f0       	breq	.+32     	; 0x232c <DIO_set_port_direction+0x64>
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	84 34       	cpi	r24, 0x44	; 68
    2312:	91 05       	cpc	r25, r1
    2314:	81 f0       	breq	.+32     	; 0x2336 <DIO_set_port_direction+0x6e>
    2316:	13 c0       	rjmp	.+38     	; 0x233e <DIO_set_port_direction+0x76>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
    2318:	ea e3       	ldi	r30, 0x3A	; 58
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	80 83       	st	Z, r24
    2320:	0e c0       	rjmp	.+28     	; 0x233e <DIO_set_port_direction+0x76>
		break ;
		case 'B':
		DDRB=direction; //set the direction of port B
    2322:	e7 e3       	ldi	r30, 0x37	; 55
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	80 83       	st	Z, r24
    232a:	09 c0       	rjmp	.+18     	; 0x233e <DIO_set_port_direction+0x76>
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
    232c:	e4 e3       	ldi	r30, 0x34	; 52
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	80 83       	st	Z, r24
    2334:	04 c0       	rjmp	.+8      	; 0x233e <DIO_set_port_direction+0x76>
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
    2336:	e1 e3       	ldi	r30, 0x31	; 49
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	80 83       	st	Z, r24
		break ;
		default:
		break ;
	}
	
}
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <DIO_write_port>:
void DIO_write_port(u8 portname,u8 portvalue)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	00 d0       	rcall	.+0      	; 0x2352 <DIO_write_port+0x6>
    2352:	00 d0       	rcall	.+0      	; 0x2354 <DIO_write_port+0x8>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	3c 83       	std	Y+4, r19	; 0x04
    2364:	2b 83       	std	Y+3, r18	; 0x03
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	9c 81       	ldd	r25, Y+4	; 0x04
    236a:	82 34       	cpi	r24, 0x42	; 66
    236c:	91 05       	cpc	r25, r1
    236e:	d9 f0       	breq	.+54     	; 0x23a6 <DIO_write_port+0x5a>
    2370:	2b 81       	ldd	r18, Y+3	; 0x03
    2372:	3c 81       	ldd	r19, Y+4	; 0x04
    2374:	23 34       	cpi	r18, 0x43	; 67
    2376:	31 05       	cpc	r19, r1
    2378:	34 f4       	brge	.+12     	; 0x2386 <DIO_write_port+0x3a>
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	9c 81       	ldd	r25, Y+4	; 0x04
    237e:	81 34       	cpi	r24, 0x41	; 65
    2380:	91 05       	cpc	r25, r1
    2382:	61 f0       	breq	.+24     	; 0x239c <DIO_write_port+0x50>
    2384:	1e c0       	rjmp	.+60     	; 0x23c2 <DIO_write_port+0x76>
    2386:	2b 81       	ldd	r18, Y+3	; 0x03
    2388:	3c 81       	ldd	r19, Y+4	; 0x04
    238a:	23 34       	cpi	r18, 0x43	; 67
    238c:	31 05       	cpc	r19, r1
    238e:	81 f0       	breq	.+32     	; 0x23b0 <DIO_write_port+0x64>
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	9c 81       	ldd	r25, Y+4	; 0x04
    2394:	84 34       	cpi	r24, 0x44	; 68
    2396:	91 05       	cpc	r25, r1
    2398:	81 f0       	breq	.+32     	; 0x23ba <DIO_write_port+0x6e>
    239a:	13 c0       	rjmp	.+38     	; 0x23c2 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    239c:	eb e3       	ldi	r30, 0x3B	; 59
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	80 83       	st	Z, r24
    23a4:	0e c0       	rjmp	.+28     	; 0x23c2 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    23a6:	e8 e3       	ldi	r30, 0x38	; 56
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	80 83       	st	Z, r24
    23ae:	09 c0       	rjmp	.+18     	; 0x23c2 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    23b0:	e5 e3       	ldi	r30, 0x35	; 53
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	80 83       	st	Z, r24
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    23ba:	e2 e3       	ldi	r30, 0x32	; 50
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	80 83       	st	Z, r24
		break ;
		default:
		 break ;
	}
}
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <DIO_read_port>:

unsigned char DIO_read_port(u8 portname)
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <DIO_read_port+0x6>
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <DIO_read_port+0x8>
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
    23de:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	3c 83       	std	Y+4, r19	; 0x04
    23e8:	2b 83       	std	Y+3, r18	; 0x03
    23ea:	8b 81       	ldd	r24, Y+3	; 0x03
    23ec:	9c 81       	ldd	r25, Y+4	; 0x04
    23ee:	82 34       	cpi	r24, 0x42	; 66
    23f0:	91 05       	cpc	r25, r1
    23f2:	d9 f0       	breq	.+54     	; 0x242a <DIO_read_port+0x5a>
    23f4:	2b 81       	ldd	r18, Y+3	; 0x03
    23f6:	3c 81       	ldd	r19, Y+4	; 0x04
    23f8:	23 34       	cpi	r18, 0x43	; 67
    23fa:	31 05       	cpc	r19, r1
    23fc:	34 f4       	brge	.+12     	; 0x240a <DIO_read_port+0x3a>
    23fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2400:	9c 81       	ldd	r25, Y+4	; 0x04
    2402:	81 34       	cpi	r24, 0x41	; 65
    2404:	91 05       	cpc	r25, r1
    2406:	61 f0       	breq	.+24     	; 0x2420 <DIO_read_port+0x50>
    2408:	1e c0       	rjmp	.+60     	; 0x2446 <DIO_read_port+0x76>
    240a:	2b 81       	ldd	r18, Y+3	; 0x03
    240c:	3c 81       	ldd	r19, Y+4	; 0x04
    240e:	23 34       	cpi	r18, 0x43	; 67
    2410:	31 05       	cpc	r19, r1
    2412:	81 f0       	breq	.+32     	; 0x2434 <DIO_read_port+0x64>
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	84 34       	cpi	r24, 0x44	; 68
    241a:	91 05       	cpc	r25, r1
    241c:	81 f0       	breq	.+32     	; 0x243e <DIO_read_port+0x6e>
    241e:	13 c0       	rjmp	.+38     	; 0x2446 <DIO_read_port+0x76>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
    2420:	e9 e3       	ldi	r30, 0x39	; 57
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	0e c0       	rjmp	.+28     	; 0x2446 <DIO_read_port+0x76>
		break ;
		case 'B':
		return_val=PINB; // read the value of port B 
    242a:	e6 e3       	ldi	r30, 0x36	; 54
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	09 c0       	rjmp	.+18     	; 0x2446 <DIO_read_port+0x76>
		break ;
		case 'C' :
		return_val=PINC; // read the value of port C 
    2434:	e3 e3       	ldi	r30, 0x33	; 51
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	04 c0       	rjmp	.+8      	; 0x2446 <DIO_read_port+0x76>
		break ;
		case 'D':
		return_val=PIND; // read the value of port D 
    243e:	e0 e3       	ldi	r30, 0x30	; 48
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	89 83       	std	Y+1, r24	; 0x01
		break ;
		default:
		break ;
	}
	return return_val;
    2446:	89 81       	ldd	r24, Y+1	; 0x01
}
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	00 d0       	rcall	.+0      	; 0x245c <DIO_vconnectpullup+0x6>
    245c:	00 d0       	rcall	.+0      	; 0x245e <DIO_vconnectpullup+0x8>
    245e:	0f 92       	push	r0
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	89 83       	std	Y+1, r24	; 0x01
    2466:	6a 83       	std	Y+2, r22	; 0x02
    2468:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	3d 83       	std	Y+5, r19	; 0x05
    2472:	2c 83       	std	Y+4, r18	; 0x04
    2474:	8c 81       	ldd	r24, Y+4	; 0x04
    2476:	9d 81       	ldd	r25, Y+5	; 0x05
    2478:	82 34       	cpi	r24, 0x42	; 66
    247a:	91 05       	cpc	r25, r1
    247c:	09 f4       	brne	.+2      	; 0x2480 <DIO_vconnectpullup+0x2a>
    247e:	44 c0       	rjmp	.+136    	; 0x2508 <DIO_vconnectpullup+0xb2>
    2480:	2c 81       	ldd	r18, Y+4	; 0x04
    2482:	3d 81       	ldd	r19, Y+5	; 0x05
    2484:	23 34       	cpi	r18, 0x43	; 67
    2486:	31 05       	cpc	r19, r1
    2488:	34 f4       	brge	.+12     	; 0x2496 <DIO_vconnectpullup+0x40>
    248a:	8c 81       	ldd	r24, Y+4	; 0x04
    248c:	9d 81       	ldd	r25, Y+5	; 0x05
    248e:	81 34       	cpi	r24, 0x41	; 65
    2490:	91 05       	cpc	r25, r1
    2492:	71 f0       	breq	.+28     	; 0x24b0 <DIO_vconnectpullup+0x5a>
    2494:	bc c0       	rjmp	.+376    	; 0x260e <DIO_vconnectpullup+0x1b8>
    2496:	2c 81       	ldd	r18, Y+4	; 0x04
    2498:	3d 81       	ldd	r19, Y+5	; 0x05
    249a:	23 34       	cpi	r18, 0x43	; 67
    249c:	31 05       	cpc	r19, r1
    249e:	09 f4       	brne	.+2      	; 0x24a2 <DIO_vconnectpullup+0x4c>
    24a0:	5f c0       	rjmp	.+190    	; 0x2560 <DIO_vconnectpullup+0x10a>
    24a2:	8c 81       	ldd	r24, Y+4	; 0x04
    24a4:	9d 81       	ldd	r25, Y+5	; 0x05
    24a6:	84 34       	cpi	r24, 0x44	; 68
    24a8:	91 05       	cpc	r25, r1
    24aa:	09 f4       	brne	.+2      	; 0x24ae <DIO_vconnectpullup+0x58>
    24ac:	85 c0       	rjmp	.+266    	; 0x25b8 <DIO_vconnectpullup+0x162>
    24ae:	af c0       	rjmp	.+350    	; 0x260e <DIO_vconnectpullup+0x1b8>
	{
		case 'A':
		if(connect_pullup==1)
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	81 30       	cpi	r24, 0x01	; 1
    24b4:	a1 f4       	brne	.+40     	; 0x24de <DIO_vconnectpullup+0x88>
		{
			SET_BIT(PORTA,pinnumber);
    24b6:	ab e3       	ldi	r26, 0x3B	; 59
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	eb e3       	ldi	r30, 0x3B	; 59
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	48 2f       	mov	r20, r24
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	02 2e       	mov	r0, r18
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <DIO_vconnectpullup+0x7e>
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	0a 94       	dec	r0
    24d6:	e2 f7       	brpl	.-8      	; 0x24d0 <DIO_vconnectpullup+0x7a>
    24d8:	84 2b       	or	r24, r20
    24da:	8c 93       	st	X, r24
    24dc:	98 c0       	rjmp	.+304    	; 0x260e <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    24de:	ab e3       	ldi	r26, 0x3B	; 59
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	eb e3       	ldi	r30, 0x3B	; 59
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	48 2f       	mov	r20, r24
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	28 2f       	mov	r18, r24
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	02 2e       	mov	r0, r18
    24f6:	02 c0       	rjmp	.+4      	; 0x24fc <DIO_vconnectpullup+0xa6>
    24f8:	88 0f       	add	r24, r24
    24fa:	99 1f       	adc	r25, r25
    24fc:	0a 94       	dec	r0
    24fe:	e2 f7       	brpl	.-8      	; 0x24f8 <DIO_vconnectpullup+0xa2>
    2500:	80 95       	com	r24
    2502:	84 23       	and	r24, r20
    2504:	8c 93       	st	X, r24
    2506:	83 c0       	rjmp	.+262    	; 0x260e <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'B':
		if(connect_pullup==1)
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	a1 f4       	brne	.+40     	; 0x2536 <DIO_vconnectpullup+0xe0>
		{
			SET_BIT(PORTB,pinnumber);
    250e:	a8 e3       	ldi	r26, 0x38	; 56
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	e8 e3       	ldi	r30, 0x38	; 56
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	48 2f       	mov	r20, r24
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	28 2f       	mov	r18, r24
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	02 2e       	mov	r0, r18
    2526:	02 c0       	rjmp	.+4      	; 0x252c <DIO_vconnectpullup+0xd6>
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	0a 94       	dec	r0
    252e:	e2 f7       	brpl	.-8      	; 0x2528 <DIO_vconnectpullup+0xd2>
    2530:	84 2b       	or	r24, r20
    2532:	8c 93       	st	X, r24
    2534:	6c c0       	rjmp	.+216    	; 0x260e <DIO_vconnectpullup+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    2536:	a8 e3       	ldi	r26, 0x38	; 56
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e8 e3       	ldi	r30, 0x38	; 56
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	48 2f       	mov	r20, r24
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	02 2e       	mov	r0, r18
    254e:	02 c0       	rjmp	.+4      	; 0x2554 <DIO_vconnectpullup+0xfe>
    2550:	88 0f       	add	r24, r24
    2552:	99 1f       	adc	r25, r25
    2554:	0a 94       	dec	r0
    2556:	e2 f7       	brpl	.-8      	; 0x2550 <DIO_vconnectpullup+0xfa>
    2558:	80 95       	com	r24
    255a:	84 23       	and	r24, r20
    255c:	8c 93       	st	X, r24
    255e:	57 c0       	rjmp	.+174    	; 0x260e <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'C':
		if(connect_pullup==1)
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	a1 f4       	brne	.+40     	; 0x258e <DIO_vconnectpullup+0x138>
		{
			SET_BIT(PORTC,pinnumber);
    2566:	a5 e3       	ldi	r26, 0x35	; 53
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e5 e3       	ldi	r30, 0x35	; 53
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	48 2f       	mov	r20, r24
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	02 2e       	mov	r0, r18
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <DIO_vconnectpullup+0x12e>
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	0a 94       	dec	r0
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <DIO_vconnectpullup+0x12a>
    2588:	84 2b       	or	r24, r20
    258a:	8c 93       	st	X, r24
    258c:	40 c0       	rjmp	.+128    	; 0x260e <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    258e:	a5 e3       	ldi	r26, 0x35	; 53
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	e5 e3       	ldi	r30, 0x35	; 53
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	48 2f       	mov	r20, r24
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	02 2e       	mov	r0, r18
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <DIO_vconnectpullup+0x156>
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	0a 94       	dec	r0
    25ae:	e2 f7       	brpl	.-8      	; 0x25a8 <DIO_vconnectpullup+0x152>
    25b0:	80 95       	com	r24
    25b2:	84 23       	and	r24, r20
    25b4:	8c 93       	st	X, r24
    25b6:	2b c0       	rjmp	.+86     	; 0x260e <DIO_vconnectpullup+0x1b8>
		}
		break;
		case 'D':
		if(connect_pullup==1)
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	81 30       	cpi	r24, 0x01	; 1
    25bc:	a1 f4       	brne	.+40     	; 0x25e6 <DIO_vconnectpullup+0x190>
		{
			SET_BIT(PORTD,pinnumber);
    25be:	a2 e3       	ldi	r26, 0x32	; 50
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	e2 e3       	ldi	r30, 0x32	; 50
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	48 2f       	mov	r20, r24
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	28 2f       	mov	r18, r24
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	02 2e       	mov	r0, r18
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <DIO_vconnectpullup+0x186>
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	0a 94       	dec	r0
    25de:	e2 f7       	brpl	.-8      	; 0x25d8 <DIO_vconnectpullup+0x182>
    25e0:	84 2b       	or	r24, r20
    25e2:	8c 93       	st	X, r24
    25e4:	14 c0       	rjmp	.+40     	; 0x260e <DIO_vconnectpullup+0x1b8>
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    25e6:	a2 e3       	ldi	r26, 0x32	; 50
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e2 e3       	ldi	r30, 0x32	; 50
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	48 2f       	mov	r20, r24
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	28 2f       	mov	r18, r24
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	02 2e       	mov	r0, r18
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <DIO_vconnectpullup+0x1ae>
    2600:	88 0f       	add	r24, r24
    2602:	99 1f       	adc	r25, r25
    2604:	0a 94       	dec	r0
    2606:	e2 f7       	brpl	.-8      	; 0x2600 <DIO_vconnectpullup+0x1aa>
    2608:	80 95       	com	r24
    260a:	84 23       	and	r24, r20
    260c:	8c 93       	st	X, r24
		}
		break;
		
	}
}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <write_low_nibble>:

void write_low_nibble(u8 portname,u8 value)
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	00 d0       	rcall	.+0      	; 0x2624 <write_low_nibble+0x6>
    2624:	00 d0       	rcall	.+0      	; 0x2626 <write_low_nibble+0x8>
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	8f 70       	andi	r24, 0x0F	; 15
    2632:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	3c 83       	std	Y+4, r19	; 0x04
    263c:	2b 83       	std	Y+3, r18	; 0x03
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	9c 81       	ldd	r25, Y+4	; 0x04
    2642:	82 34       	cpi	r24, 0x42	; 66
    2644:	91 05       	cpc	r25, r1
    2646:	31 f1       	breq	.+76     	; 0x2694 <write_low_nibble+0x76>
    2648:	2b 81       	ldd	r18, Y+3	; 0x03
    264a:	3c 81       	ldd	r19, Y+4	; 0x04
    264c:	23 34       	cpi	r18, 0x43	; 67
    264e:	31 05       	cpc	r19, r1
    2650:	34 f4       	brge	.+12     	; 0x265e <write_low_nibble+0x40>
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	9c 81       	ldd	r25, Y+4	; 0x04
    2656:	81 34       	cpi	r24, 0x41	; 65
    2658:	91 05       	cpc	r25, r1
    265a:	61 f0       	breq	.+24     	; 0x2674 <write_low_nibble+0x56>
    265c:	4a c0       	rjmp	.+148    	; 0x26f2 <write_low_nibble+0xd4>
    265e:	2b 81       	ldd	r18, Y+3	; 0x03
    2660:	3c 81       	ldd	r19, Y+4	; 0x04
    2662:	23 34       	cpi	r18, 0x43	; 67
    2664:	31 05       	cpc	r19, r1
    2666:	31 f1       	breq	.+76     	; 0x26b4 <write_low_nibble+0x96>
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	84 34       	cpi	r24, 0x44	; 68
    266e:	91 05       	cpc	r25, r1
    2670:	89 f1       	breq	.+98     	; 0x26d4 <write_low_nibble+0xb6>
    2672:	3f c0       	rjmp	.+126    	; 0x26f2 <write_low_nibble+0xd4>
	{
		case 'A':
		PORTA&=0xf0;
    2674:	ab e3       	ldi	r26, 0x3B	; 59
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	eb e3       	ldi	r30, 0x3B	; 59
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	80 7f       	andi	r24, 0xF0	; 240
    2680:	8c 93       	st	X, r24
		PORTA|=value;
    2682:	ab e3       	ldi	r26, 0x3B	; 59
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	eb e3       	ldi	r30, 0x3B	; 59
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	90 81       	ld	r25, Z
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	89 2b       	or	r24, r25
    2690:	8c 93       	st	X, r24
    2692:	2f c0       	rjmp	.+94     	; 0x26f2 <write_low_nibble+0xd4>
		break;

		case 'B':
		PORTB&=0xf0;
    2694:	a8 e3       	ldi	r26, 0x38	; 56
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e8 e3       	ldi	r30, 0x38	; 56
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	80 7f       	andi	r24, 0xF0	; 240
    26a0:	8c 93       	st	X, r24
		PORTB|=value;
    26a2:	a8 e3       	ldi	r26, 0x38	; 56
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e8 e3       	ldi	r30, 0x38	; 56
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	90 81       	ld	r25, Z
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	89 2b       	or	r24, r25
    26b0:	8c 93       	st	X, r24
    26b2:	1f c0       	rjmp	.+62     	; 0x26f2 <write_low_nibble+0xd4>
		break;

		case 'C':
		PORTC&=0xf0;
    26b4:	a5 e3       	ldi	r26, 0x35	; 53
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	e5 e3       	ldi	r30, 0x35	; 53
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	80 7f       	andi	r24, 0xF0	; 240
    26c0:	8c 93       	st	X, r24
		PORTC|=value;
    26c2:	a5 e3       	ldi	r26, 0x35	; 53
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e5 e3       	ldi	r30, 0x35	; 53
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	90 81       	ld	r25, Z
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	89 2b       	or	r24, r25
    26d0:	8c 93       	st	X, r24
    26d2:	0f c0       	rjmp	.+30     	; 0x26f2 <write_low_nibble+0xd4>
		break;

		case 'D':
		PORTD&=0xf0;
    26d4:	a2 e3       	ldi	r26, 0x32	; 50
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e2 e3       	ldi	r30, 0x32	; 50
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	80 7f       	andi	r24, 0xF0	; 240
    26e0:	8c 93       	st	X, r24
		PORTD|=value;
    26e2:	a2 e3       	ldi	r26, 0x32	; 50
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e2 e3       	ldi	r30, 0x32	; 50
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	90 81       	ld	r25, Z
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	89 2b       	or	r24, r25
    26f0:	8c 93       	st	X, r24
		break;

	}
}
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <write_high_nibble>:

void write_high_nibble(u8 portname,u8 value){
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	00 d0       	rcall	.+0      	; 0x2706 <write_high_nibble+0x6>
    2706:	00 d0       	rcall	.+0      	; 0x2708 <write_high_nibble+0x8>
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	82 95       	swap	r24
    2714:	80 7f       	andi	r24, 0xF0	; 240
    2716:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	3c 83       	std	Y+4, r19	; 0x04
    2720:	2b 83       	std	Y+3, r18	; 0x03
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	9c 81       	ldd	r25, Y+4	; 0x04
    2726:	82 34       	cpi	r24, 0x42	; 66
    2728:	91 05       	cpc	r25, r1
    272a:	31 f1       	breq	.+76     	; 0x2778 <write_high_nibble+0x78>
    272c:	2b 81       	ldd	r18, Y+3	; 0x03
    272e:	3c 81       	ldd	r19, Y+4	; 0x04
    2730:	23 34       	cpi	r18, 0x43	; 67
    2732:	31 05       	cpc	r19, r1
    2734:	34 f4       	brge	.+12     	; 0x2742 <write_high_nibble+0x42>
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	81 34       	cpi	r24, 0x41	; 65
    273c:	91 05       	cpc	r25, r1
    273e:	61 f0       	breq	.+24     	; 0x2758 <write_high_nibble+0x58>
    2740:	4a c0       	rjmp	.+148    	; 0x27d6 <write_high_nibble+0xd6>
    2742:	2b 81       	ldd	r18, Y+3	; 0x03
    2744:	3c 81       	ldd	r19, Y+4	; 0x04
    2746:	23 34       	cpi	r18, 0x43	; 67
    2748:	31 05       	cpc	r19, r1
    274a:	31 f1       	breq	.+76     	; 0x2798 <write_high_nibble+0x98>
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	84 34       	cpi	r24, 0x44	; 68
    2752:	91 05       	cpc	r25, r1
    2754:	89 f1       	breq	.+98     	; 0x27b8 <write_high_nibble+0xb8>
    2756:	3f c0       	rjmp	.+126    	; 0x27d6 <write_high_nibble+0xd6>
	{
		case 'A':
		PORTA&=0x0f;
    2758:	ab e3       	ldi	r26, 0x3B	; 59
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	eb e3       	ldi	r30, 0x3B	; 59
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	8f 70       	andi	r24, 0x0F	; 15
    2764:	8c 93       	st	X, r24
		PORTA|=value;
    2766:	ab e3       	ldi	r26, 0x3B	; 59
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	eb e3       	ldi	r30, 0x3B	; 59
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	90 81       	ld	r25, Z
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	89 2b       	or	r24, r25
    2774:	8c 93       	st	X, r24
    2776:	2f c0       	rjmp	.+94     	; 0x27d6 <write_high_nibble+0xd6>
		break;

		case 'B':
		PORTB&=0x0f;
    2778:	a8 e3       	ldi	r26, 0x38	; 56
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	e8 e3       	ldi	r30, 0x38	; 56
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	8f 70       	andi	r24, 0x0F	; 15
    2784:	8c 93       	st	X, r24
		PORTB|=value;
    2786:	a8 e3       	ldi	r26, 0x38	; 56
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e8 e3       	ldi	r30, 0x38	; 56
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	90 81       	ld	r25, Z
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	89 2b       	or	r24, r25
    2794:	8c 93       	st	X, r24
    2796:	1f c0       	rjmp	.+62     	; 0x27d6 <write_high_nibble+0xd6>
		break;

		case 'C':
		PORTC&=0x0f;
    2798:	a5 e3       	ldi	r26, 0x35	; 53
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e5 e3       	ldi	r30, 0x35	; 53
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	8f 70       	andi	r24, 0x0F	; 15
    27a4:	8c 93       	st	X, r24
		PORTC|=value;
    27a6:	a5 e3       	ldi	r26, 0x35	; 53
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e5 e3       	ldi	r30, 0x35	; 53
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	90 81       	ld	r25, Z
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	89 2b       	or	r24, r25
    27b4:	8c 93       	st	X, r24
    27b6:	0f c0       	rjmp	.+30     	; 0x27d6 <write_high_nibble+0xd6>
		break;

		case 'D':
		PORTD&=0x0f;
    27b8:	a2 e3       	ldi	r26, 0x32	; 50
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	e2 e3       	ldi	r30, 0x32	; 50
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	8f 70       	andi	r24, 0x0F	; 15
    27c4:	8c 93       	st	X, r24
		PORTD|=value;
    27c6:	a2 e3       	ldi	r26, 0x32	; 50
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e2 e3       	ldi	r30, 0x32	; 50
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	90 81       	ld	r25, Z
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	89 2b       	or	r24, r25
    27d4:	8c 93       	st	X, r24
		break;

	}
}
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	08 95       	ret

000027e4 <seven_seg_vinit>:

#include "../DIO/DIO.h"
void seven_seg_vinit(unsigned char port_name)
{
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	0f 92       	push	r0
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	89 83       	std	Y+1, r24	; 0x01
	DIO_set_port_direction(port_name,0xFF);
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	6f ef       	ldi	r22, 0xFF	; 255
    27f4:	0e 94 64 11 	call	0x22c8	; 0x22c8 <DIO_set_port_direction>
}
    27f8:	0f 90       	pop	r0
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <seven_seg_write>:

void seven_seg_write(unsigned char portname,unsigned char number)
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	61 97       	sbiw	r28, 0x11	; 17
    280a:	0f b6       	in	r0, 0x3f	; 63
    280c:	f8 94       	cli
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	cd bf       	out	0x3d, r28	; 61
    2814:	8b 87       	std	Y+11, r24	; 0x0b
    2816:	6c 87       	std	Y+12, r22	; 0x0c
unsigned char arr[]={ 0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
    2818:	ce 01       	movw	r24, r28
    281a:	01 96       	adiw	r24, 0x01	; 1
    281c:	9e 87       	std	Y+14, r25	; 0x0e
    281e:	8d 87       	std	Y+13, r24	; 0x0d
    2820:	e9 eb       	ldi	r30, 0xB9	; 185
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	f8 8b       	std	Y+16, r31	; 0x10
    2826:	ef 87       	std	Y+15, r30	; 0x0f
    2828:	fa e0       	ldi	r31, 0x0A	; 10
    282a:	f9 8b       	std	Y+17, r31	; 0x11
    282c:	ef 85       	ldd	r30, Y+15	; 0x0f
    282e:	f8 89       	ldd	r31, Y+16	; 0x10
    2830:	00 80       	ld	r0, Z
    2832:	8f 85       	ldd	r24, Y+15	; 0x0f
    2834:	98 89       	ldd	r25, Y+16	; 0x10
    2836:	01 96       	adiw	r24, 0x01	; 1
    2838:	98 8b       	std	Y+16, r25	; 0x10
    283a:	8f 87       	std	Y+15, r24	; 0x0f
    283c:	ed 85       	ldd	r30, Y+13	; 0x0d
    283e:	fe 85       	ldd	r31, Y+14	; 0x0e
    2840:	00 82       	st	Z, r0
    2842:	8d 85       	ldd	r24, Y+13	; 0x0d
    2844:	9e 85       	ldd	r25, Y+14	; 0x0e
    2846:	01 96       	adiw	r24, 0x01	; 1
    2848:	9e 87       	std	Y+14, r25	; 0x0e
    284a:	8d 87       	std	Y+13, r24	; 0x0d
    284c:	99 89       	ldd	r25, Y+17	; 0x11
    284e:	91 50       	subi	r25, 0x01	; 1
    2850:	99 8b       	std	Y+17, r25	; 0x11
    2852:	e9 89       	ldd	r30, Y+17	; 0x11
    2854:	ee 23       	and	r30, r30
    2856:	51 f7       	brne	.-44     	; 0x282c <seven_seg_write+0x2c>

DIO_write_port(portname,arr[number]);
    2858:	8c 85       	ldd	r24, Y+12	; 0x0c
    285a:	28 2f       	mov	r18, r24
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	ce 01       	movw	r24, r28
    2860:	01 96       	adiw	r24, 0x01	; 1
    2862:	fc 01       	movw	r30, r24
    2864:	e2 0f       	add	r30, r18
    2866:	f3 1f       	adc	r31, r19
    2868:	90 81       	ld	r25, Z
    286a:	8b 85       	ldd	r24, Y+11	; 0x0b
    286c:	69 2f       	mov	r22, r25
    286e:	0e 94 a6 11 	call	0x234c	; 0x234c <DIO_write_port>
}
    2872:	61 96       	adiw	r28, 0x11	; 17
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <main>:
#include "main.h"
volatile unsigned char seconds_counter=0;
unsigned char minutes_counter=0,hours_counter=0;
unsigned char value,first_digit,second_digit;
int main(void)
{
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	df 93       	push	r29
    288a:	cf 93       	push	r28
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	c4 5c       	subi	r28, 0xC4	; 196
    2892:	d0 40       	sbci	r29, 0x00	; 0
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
	keypad_vInit();
    289e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <keypad_vInit>
	LED_vInit('A',3);
    28a2:	81 e4       	ldi	r24, 0x41	; 65
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	63 e0       	ldi	r22, 0x03	; 3
    28a8:	70 e0       	ldi	r23, 0x00	; 0
    28aa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <LED_vInit>
	LCD_vInit();
    28ae:	0e 94 d1 06 	call	0xda2	; 0xda2 <LCD_vInit>
	seven_seg_vinit('B');
    28b2:	82 e4       	ldi	r24, 0x42	; 66
    28b4:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <seven_seg_vinit>
	SET_BIT(DDRC,0);
    28b8:	a4 e3       	ldi	r26, 0x34	; 52
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e4 e3       	ldi	r30, 0x34	; 52
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	81 60       	ori	r24, 0x01	; 1
    28c4:	8c 93       	st	X, r24
    SET_BIT(DDRC,1);
    28c6:	a4 e3       	ldi	r26, 0x34	; 52
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e4 e3       	ldi	r30, 0x34	; 52
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	82 60       	ori	r24, 0x02	; 2
    28d2:	8c 93       	st	X, r24
	SET_BIT(DDRC,2);
    28d4:	a4 e3       	ldi	r26, 0x34	; 52
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e4 e3       	ldi	r30, 0x34	; 52
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	84 60       	ori	r24, 0x04	; 4
    28e0:	8c 93       	st	X, r24
	SET_BIT(DDRC,3);
    28e2:	a4 e3       	ldi	r26, 0x34	; 52
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	e4 e3       	ldi	r30, 0x34	; 52
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	80 81       	ld	r24, Z
    28ec:	88 60       	ori	r24, 0x08	; 8
    28ee:	8c 93       	st	X, r24
	SET_BIT(DDRC,4);
    28f0:	a4 e3       	ldi	r26, 0x34	; 52
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	e4 e3       	ldi	r30, 0x34	; 52
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	80 61       	ori	r24, 0x10	; 16
    28fc:	8c 93       	st	X, r24
	SET_BIT(DDRC,5);
    28fe:	a4 e3       	ldi	r26, 0x34	; 52
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e4 e3       	ldi	r30, 0x34	; 52
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	80 62       	ori	r24, 0x20	; 32
    290a:	8c 93       	st	X, r24
	LCD_vSend_string("press 1 to");
    290c:	80 e6       	ldi	r24, 0x60	; 96
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_vSend_string>
	LCD_movecursor(2,1);
    2914:	82 e0       	ldi	r24, 0x02	; 2
    2916:	61 e0       	ldi	r22, 0x01	; 1
    2918:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_movecursor>
	LCD_vSend_string("set clock");
    291c:	8b e6       	ldi	r24, 0x6B	; 107
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_vSend_string>
	timer2_overflow_init_interrupt();
    2924:	0e 94 a3 05 	call	0xb46	; 0xb46 <timer2_overflow_init_interrupt>
	
	while(1)
	{
		value=keypad_u8check_press();
    2928:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <keypad_u8check_press>
    292c:	80 93 c9 00 	sts	0x00C9, r24
		if (value!=NOTPRESSED)
    2930:	80 91 c9 00 	lds	r24, 0x00C9
    2934:	8f 3f       	cpi	r24, 0xFF	; 255
    2936:	09 f4       	brne	.+2      	; 0x293a <main+0xb6>
    2938:	77 c6       	rjmp	.+3310   	; 0x3628 <main+0xda4>
		{
			if (value=='1')
    293a:	80 91 c9 00 	lds	r24, 0x00C9
    293e:	81 33       	cpi	r24, 0x31	; 49
    2940:	09 f0       	breq	.+2      	; 0x2944 <main+0xc0>
    2942:	9f c5       	rjmp	.+2878   	; 0x3482 <main+0xbfe>
			{
				LED_vTurnOff('A',3);
    2944:	81 e4       	ldi	r24, 0x41	; 65
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	63 e0       	ldi	r22, 0x03	; 3
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	0e 94 b0 06 	call	0xd60	; 0xd60 <LED_vTurnOff>
			
				LCD_clearscreen();
    2950:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_clearscreen>
				LCD_vSend_string("hours=--");
    2954:	85 e7       	ldi	r24, 0x75	; 117
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_vSend_string>
				LCD_movecursor(1,7);
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	67 e0       	ldi	r22, 0x07	; 7
    2960:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_movecursor>
    2964:	fe 01       	movw	r30, r28
    2966:	ef 53       	subi	r30, 0x3F	; 63
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	aa ef       	ldi	r26, 0xFA	; 250
    2970:	b3 e4       	ldi	r27, 0x43	; 67
    2972:	80 83       	st	Z, r24
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	a2 83       	std	Z+2, r26	; 0x02
    2978:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297a:	8e 01       	movw	r16, r28
    297c:	03 54       	subi	r16, 0x43	; 67
    297e:	1f 4f       	sbci	r17, 0xFF	; 255
    2980:	fe 01       	movw	r30, r28
    2982:	ef 53       	subi	r30, 0x3F	; 63
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	60 81       	ld	r22, Z
    2988:	71 81       	ldd	r23, Z+1	; 0x01
    298a:	82 81       	ldd	r24, Z+2	; 0x02
    298c:	93 81       	ldd	r25, Z+3	; 0x03
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	4a ef       	ldi	r20, 0xFA	; 250
    2994:	54 e4       	ldi	r21, 0x44	; 68
    2996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	f8 01       	movw	r30, r16
    29a0:	80 83       	st	Z, r24
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	a2 83       	std	Z+2, r26	; 0x02
    29a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29a8:	fe 01       	movw	r30, r28
    29aa:	e3 54       	subi	r30, 0x43	; 67
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	60 81       	ld	r22, Z
    29b0:	71 81       	ldd	r23, Z+1	; 0x01
    29b2:	82 81       	ldd	r24, Z+2	; 0x02
    29b4:	93 81       	ldd	r25, Z+3	; 0x03
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e8       	ldi	r20, 0x80	; 128
    29bc:	5f e3       	ldi	r21, 0x3F	; 63
    29be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c2:	88 23       	and	r24, r24
    29c4:	44 f4       	brge	.+16     	; 0x29d6 <main+0x152>
		__ticks = 1;
    29c6:	fe 01       	movw	r30, r28
    29c8:	e5 54       	subi	r30, 0x45	; 69
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	80 83       	st	Z, r24
    29d4:	64 c0       	rjmp	.+200    	; 0x2a9e <main+0x21a>
	else if (__tmp > 65535)
    29d6:	fe 01       	movw	r30, r28
    29d8:	e3 54       	subi	r30, 0x43	; 67
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	60 81       	ld	r22, Z
    29de:	71 81       	ldd	r23, Z+1	; 0x01
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	3f ef       	ldi	r19, 0xFF	; 255
    29e8:	4f e7       	ldi	r20, 0x7F	; 127
    29ea:	57 e4       	ldi	r21, 0x47	; 71
    29ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f0:	18 16       	cp	r1, r24
    29f2:	0c f0       	brlt	.+2      	; 0x29f6 <main+0x172>
    29f4:	43 c0       	rjmp	.+134    	; 0x2a7c <main+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f6:	fe 01       	movw	r30, r28
    29f8:	ef 53       	subi	r30, 0x3F	; 63
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	60 81       	ld	r22, Z
    29fe:	71 81       	ldd	r23, Z+1	; 0x01
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e2       	ldi	r20, 0x20	; 32
    2a0a:	51 e4       	ldi	r21, 0x41	; 65
    2a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	8e 01       	movw	r16, r28
    2a16:	05 54       	subi	r16, 0x45	; 69
    2a18:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1a:	bc 01       	movw	r22, r24
    2a1c:	cd 01       	movw	r24, r26
    2a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	f8 01       	movw	r30, r16
    2a28:	91 83       	std	Z+1, r25	; 0x01
    2a2a:	80 83       	st	Z, r24
    2a2c:	1f c0       	rjmp	.+62     	; 0x2a6c <main+0x1e8>
    2a2e:	fe 01       	movw	r30, r28
    2a30:	e7 54       	subi	r30, 0x47	; 71
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	88 ec       	ldi	r24, 0xC8	; 200
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	80 83       	st	Z, r24
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e7 54       	subi	r30, 0x47	; 71
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <main+0x1c2>
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e7 54       	subi	r30, 0x47	; 71
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	91 83       	std	Z+1, r25	; 0x01
    2a52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a54:	de 01       	movw	r26, r28
    2a56:	a5 54       	subi	r26, 0x45	; 69
    2a58:	bf 4f       	sbci	r27, 0xFF	; 255
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	e5 54       	subi	r30, 0x45	; 69
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 81       	ld	r24, Z
    2a62:	91 81       	ldd	r25, Z+1	; 0x01
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	11 96       	adiw	r26, 0x01	; 1
    2a68:	9c 93       	st	X, r25
    2a6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e5 54       	subi	r30, 0x45	; 69
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	80 81       	ld	r24, Z
    2a74:	91 81       	ldd	r25, Z+1	; 0x01
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	d1 f6       	brne	.-76     	; 0x2a2e <main+0x1aa>
    2a7a:	27 c0       	rjmp	.+78     	; 0x2aca <main+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7c:	8e 01       	movw	r16, r28
    2a7e:	05 54       	subi	r16, 0x45	; 69
    2a80:	1f 4f       	sbci	r17, 0xFF	; 255
    2a82:	fe 01       	movw	r30, r28
    2a84:	e3 54       	subi	r30, 0x43	; 67
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	60 81       	ld	r22, Z
    2a8a:	71 81       	ldd	r23, Z+1	; 0x01
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	93 81       	ldd	r25, Z+3	; 0x03
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	f8 01       	movw	r30, r16
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	80 83       	st	Z, r24
    2a9e:	de 01       	movw	r26, r28
    2aa0:	a9 54       	subi	r26, 0x49	; 73
    2aa2:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e5 54       	subi	r30, 0x45	; 69
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 81       	ld	r24, Z
    2aac:	91 81       	ldd	r25, Z+1	; 0x01
    2aae:	8d 93       	st	X+, r24
    2ab0:	9c 93       	st	X, r25
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e9 54       	subi	r30, 0x49	; 73
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	91 81       	ldd	r25, Z+1	; 0x01
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <main+0x238>
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e9 54       	subi	r30, 0x49	; 73
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	80 83       	st	Z, r24
				_delay_ms(500);
				do
				{
					first_digit=keypad_u8check_press();
    2aca:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <keypad_u8check_press>
    2ace:	80 93 c7 00 	sts	0x00C7, r24
					
				} while (first_digit==NOTPRESSED);
    2ad2:	80 91 c7 00 	lds	r24, 0x00C7
    2ad6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ad8:	c1 f3       	breq	.-16     	; 0x2aca <main+0x246>
				LCD_vSend_char(first_digit);
    2ada:	80 91 c7 00 	lds	r24, 0x00C7
    2ade:	0e 94 c2 0b 	call	0x1784	; 0x1784 <LCD_vSend_char>
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	ed 54       	subi	r30, 0x4D	; 77
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	a6 e9       	ldi	r26, 0x96	; 150
    2aee:	b3 e4       	ldi	r27, 0x43	; 67
    2af0:	80 83       	st	Z, r24
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	a2 83       	std	Z+2, r26	; 0x02
    2af6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af8:	8e 01       	movw	r16, r28
    2afa:	01 55       	subi	r16, 0x51	; 81
    2afc:	1f 4f       	sbci	r17, 0xFF	; 255
    2afe:	fe 01       	movw	r30, r28
    2b00:	ed 54       	subi	r30, 0x4D	; 77
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	60 81       	ld	r22, Z
    2b06:	71 81       	ldd	r23, Z+1	; 0x01
    2b08:	82 81       	ldd	r24, Z+2	; 0x02
    2b0a:	93 81       	ldd	r25, Z+3	; 0x03
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	4a ef       	ldi	r20, 0xFA	; 250
    2b12:	54 e4       	ldi	r21, 0x44	; 68
    2b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	f8 01       	movw	r30, r16
    2b1e:	80 83       	st	Z, r24
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	a2 83       	std	Z+2, r26	; 0x02
    2b24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b26:	fe 01       	movw	r30, r28
    2b28:	e1 55       	subi	r30, 0x51	; 81
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	60 81       	ld	r22, Z
    2b2e:	71 81       	ldd	r23, Z+1	; 0x01
    2b30:	82 81       	ldd	r24, Z+2	; 0x02
    2b32:	93 81       	ldd	r25, Z+3	; 0x03
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e8       	ldi	r20, 0x80	; 128
    2b3a:	5f e3       	ldi	r21, 0x3F	; 63
    2b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	44 f4       	brge	.+16     	; 0x2b54 <main+0x2d0>
		__ticks = 1;
    2b44:	fe 01       	movw	r30, r28
    2b46:	e3 55       	subi	r30, 0x53	; 83
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	80 83       	st	Z, r24
    2b52:	64 c0       	rjmp	.+200    	; 0x2c1c <main+0x398>
	else if (__tmp > 65535)
    2b54:	fe 01       	movw	r30, r28
    2b56:	e1 55       	subi	r30, 0x51	; 81
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	60 81       	ld	r22, Z
    2b5c:	71 81       	ldd	r23, Z+1	; 0x01
    2b5e:	82 81       	ldd	r24, Z+2	; 0x02
    2b60:	93 81       	ldd	r25, Z+3	; 0x03
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	3f ef       	ldi	r19, 0xFF	; 255
    2b66:	4f e7       	ldi	r20, 0x7F	; 127
    2b68:	57 e4       	ldi	r21, 0x47	; 71
    2b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b6e:	18 16       	cp	r1, r24
    2b70:	0c f0       	brlt	.+2      	; 0x2b74 <main+0x2f0>
    2b72:	43 c0       	rjmp	.+134    	; 0x2bfa <main+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b74:	fe 01       	movw	r30, r28
    2b76:	ed 54       	subi	r30, 0x4D	; 77
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	60 81       	ld	r22, Z
    2b7c:	71 81       	ldd	r23, Z+1	; 0x01
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	93 81       	ldd	r25, Z+3	; 0x03
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	40 e2       	ldi	r20, 0x20	; 32
    2b88:	51 e4       	ldi	r21, 0x41	; 65
    2b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	8e 01       	movw	r16, r28
    2b94:	03 55       	subi	r16, 0x53	; 83
    2b96:	1f 4f       	sbci	r17, 0xFF	; 255
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	f8 01       	movw	r30, r16
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	80 83       	st	Z, r24
    2baa:	1f c0       	rjmp	.+62     	; 0x2bea <main+0x366>
    2bac:	fe 01       	movw	r30, r28
    2bae:	e5 55       	subi	r30, 0x55	; 85
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	88 ec       	ldi	r24, 0xC8	; 200
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	80 83       	st	Z, r24
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e5 55       	subi	r30, 0x55	; 85
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	80 81       	ld	r24, Z
    2bc2:	91 81       	ldd	r25, Z+1	; 0x01
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <main+0x340>
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e5 55       	subi	r30, 0x55	; 85
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd2:	de 01       	movw	r26, r28
    2bd4:	a3 55       	subi	r26, 0x53	; 83
    2bd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e3 55       	subi	r30, 0x53	; 83
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	80 81       	ld	r24, Z
    2be0:	91 81       	ldd	r25, Z+1	; 0x01
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	11 96       	adiw	r26, 0x01	; 1
    2be6:	9c 93       	st	X, r25
    2be8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bea:	fe 01       	movw	r30, r28
    2bec:	e3 55       	subi	r30, 0x53	; 83
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	91 81       	ldd	r25, Z+1	; 0x01
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	d1 f6       	brne	.-76     	; 0x2bac <main+0x328>
    2bf8:	27 c0       	rjmp	.+78     	; 0x2c48 <main+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfa:	8e 01       	movw	r16, r28
    2bfc:	03 55       	subi	r16, 0x53	; 83
    2bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2c00:	fe 01       	movw	r30, r28
    2c02:	e1 55       	subi	r30, 0x51	; 81
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	60 81       	ld	r22, Z
    2c08:	71 81       	ldd	r23, Z+1	; 0x01
    2c0a:	82 81       	ldd	r24, Z+2	; 0x02
    2c0c:	93 81       	ldd	r25, Z+3	; 0x03
    2c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	f8 01       	movw	r30, r16
    2c18:	91 83       	std	Z+1, r25	; 0x01
    2c1a:	80 83       	st	Z, r24
    2c1c:	de 01       	movw	r26, r28
    2c1e:	a7 55       	subi	r26, 0x57	; 87
    2c20:	bf 4f       	sbci	r27, 0xFF	; 255
    2c22:	fe 01       	movw	r30, r28
    2c24:	e3 55       	subi	r30, 0x53	; 83
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 81       	ld	r24, Z
    2c2a:	91 81       	ldd	r25, Z+1	; 0x01
    2c2c:	8d 93       	st	X+, r24
    2c2e:	9c 93       	st	X, r25
    2c30:	fe 01       	movw	r30, r28
    2c32:	e7 55       	subi	r30, 0x57	; 87
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 81       	ld	r24, Z
    2c38:	91 81       	ldd	r25, Z+1	; 0x01
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <main+0x3b6>
    2c3e:	fe 01       	movw	r30, r28
    2c40:	e7 55       	subi	r30, 0x57	; 87
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	91 83       	std	Z+1, r25	; 0x01
    2c46:	80 83       	st	Z, r24
				_delay_ms(300);
				do
				{
					second_digit=keypad_u8check_press();
    2c48:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <keypad_u8check_press>
    2c4c:	80 93 c8 00 	sts	0x00C8, r24
					
				} while (second_digit==NOTPRESSED);
    2c50:	80 91 c8 00 	lds	r24, 0x00C8
    2c54:	8f 3f       	cpi	r24, 0xFF	; 255
    2c56:	c1 f3       	breq	.-16     	; 0x2c48 <main+0x3c4>
				LCD_vSend_char(second_digit);
    2c58:	80 91 c8 00 	lds	r24, 0x00C8
    2c5c:	0e 94 c2 0b 	call	0x1784	; 0x1784 <LCD_vSend_char>
    2c60:	fe 01       	movw	r30, r28
    2c62:	eb 55       	subi	r30, 0x5B	; 91
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a6 e9       	ldi	r26, 0x96	; 150
    2c6c:	b3 e4       	ldi	r27, 0x43	; 67
    2c6e:	80 83       	st	Z, r24
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	a2 83       	std	Z+2, r26	; 0x02
    2c74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c76:	8e 01       	movw	r16, r28
    2c78:	0f 55       	subi	r16, 0x5F	; 95
    2c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	eb 55       	subi	r30, 0x5B	; 91
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	93 81       	ldd	r25, Z+3	; 0x03
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	4a ef       	ldi	r20, 0xFA	; 250
    2c90:	54 e4       	ldi	r21, 0x44	; 68
    2c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	f8 01       	movw	r30, r16
    2c9c:	80 83       	st	Z, r24
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	a2 83       	std	Z+2, r26	; 0x02
    2ca2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	ef 55       	subi	r30, 0x5F	; 95
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	60 81       	ld	r22, Z
    2cac:	71 81       	ldd	r23, Z+1	; 0x01
    2cae:	82 81       	ldd	r24, Z+2	; 0x02
    2cb0:	93 81       	ldd	r25, Z+3	; 0x03
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e8       	ldi	r20, 0x80	; 128
    2cb8:	5f e3       	ldi	r21, 0x3F	; 63
    2cba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cbe:	88 23       	and	r24, r24
    2cc0:	44 f4       	brge	.+16     	; 0x2cd2 <main+0x44e>
		__ticks = 1;
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e1 56       	subi	r30, 0x61	; 97
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	80 83       	st	Z, r24
    2cd0:	64 c0       	rjmp	.+200    	; 0x2d9a <main+0x516>
	else if (__tmp > 65535)
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	ef 55       	subi	r30, 0x5F	; 95
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	3f ef       	ldi	r19, 0xFF	; 255
    2ce4:	4f e7       	ldi	r20, 0x7F	; 127
    2ce6:	57 e4       	ldi	r21, 0x47	; 71
    2ce8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cec:	18 16       	cp	r1, r24
    2cee:	0c f0       	brlt	.+2      	; 0x2cf2 <main+0x46e>
    2cf0:	43 c0       	rjmp	.+134    	; 0x2d78 <main+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	eb 55       	subi	r30, 0x5B	; 91
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	60 81       	ld	r22, Z
    2cfa:	71 81       	ldd	r23, Z+1	; 0x01
    2cfc:	82 81       	ldd	r24, Z+2	; 0x02
    2cfe:	93 81       	ldd	r25, Z+3	; 0x03
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 e2       	ldi	r20, 0x20	; 32
    2d06:	51 e4       	ldi	r21, 0x41	; 65
    2d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	8e 01       	movw	r16, r28
    2d12:	01 56       	subi	r16, 0x61	; 97
    2d14:	1f 4f       	sbci	r17, 0xFF	; 255
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	f8 01       	movw	r30, r16
    2d24:	91 83       	std	Z+1, r25	; 0x01
    2d26:	80 83       	st	Z, r24
    2d28:	1f c0       	rjmp	.+62     	; 0x2d68 <main+0x4e4>
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e3 56       	subi	r30, 0x63	; 99
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	88 ec       	ldi	r24, 0xC8	; 200
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	91 83       	std	Z+1, r25	; 0x01
    2d36:	80 83       	st	Z, r24
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e3 56       	subi	r30, 0x63	; 99
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 81       	ld	r24, Z
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <main+0x4be>
    2d46:	fe 01       	movw	r30, r28
    2d48:	e3 56       	subi	r30, 0x63	; 99
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	91 83       	std	Z+1, r25	; 0x01
    2d4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d50:	de 01       	movw	r26, r28
    2d52:	a1 56       	subi	r26, 0x61	; 97
    2d54:	bf 4f       	sbci	r27, 0xFF	; 255
    2d56:	fe 01       	movw	r30, r28
    2d58:	e1 56       	subi	r30, 0x61	; 97
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	91 81       	ldd	r25, Z+1	; 0x01
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	11 96       	adiw	r26, 0x01	; 1
    2d64:	9c 93       	st	X, r25
    2d66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e1 56       	subi	r30, 0x61	; 97
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	80 81       	ld	r24, Z
    2d70:	91 81       	ldd	r25, Z+1	; 0x01
    2d72:	00 97       	sbiw	r24, 0x00	; 0
    2d74:	d1 f6       	brne	.-76     	; 0x2d2a <main+0x4a6>
    2d76:	27 c0       	rjmp	.+78     	; 0x2dc6 <main+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d78:	8e 01       	movw	r16, r28
    2d7a:	01 56       	subi	r16, 0x61	; 97
    2d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7e:	fe 01       	movw	r30, r28
    2d80:	ef 55       	subi	r30, 0x5F	; 95
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	60 81       	ld	r22, Z
    2d86:	71 81       	ldd	r23, Z+1	; 0x01
    2d88:	82 81       	ldd	r24, Z+2	; 0x02
    2d8a:	93 81       	ldd	r25, Z+3	; 0x03
    2d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	f8 01       	movw	r30, r16
    2d96:	91 83       	std	Z+1, r25	; 0x01
    2d98:	80 83       	st	Z, r24
    2d9a:	de 01       	movw	r26, r28
    2d9c:	a5 56       	subi	r26, 0x65	; 101
    2d9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2da0:	fe 01       	movw	r30, r28
    2da2:	e1 56       	subi	r30, 0x61	; 97
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	8d 93       	st	X+, r24
    2dac:	9c 93       	st	X, r25
    2dae:	fe 01       	movw	r30, r28
    2db0:	e5 56       	subi	r30, 0x65	; 101
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	91 81       	ldd	r25, Z+1	; 0x01
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <main+0x534>
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	e5 56       	subi	r30, 0x65	; 101
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	91 83       	std	Z+1, r25	; 0x01
    2dc4:	80 83       	st	Z, r24
				_delay_ms(300);
				hours_counter=(second_digit-48)+10*(first_digit-48);
    2dc6:	80 91 c7 00 	lds	r24, 0x00C7
    2dca:	88 2f       	mov	r24, r24
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	9c 01       	movw	r18, r24
    2dd0:	22 0f       	add	r18, r18
    2dd2:	33 1f       	adc	r19, r19
    2dd4:	c9 01       	movw	r24, r18
    2dd6:	88 0f       	add	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	88 0f       	add	r24, r24
    2ddc:	99 1f       	adc	r25, r25
    2dde:	82 0f       	add	r24, r18
    2de0:	93 1f       	adc	r25, r19
    2de2:	98 2f       	mov	r25, r24
    2de4:	80 91 c8 00 	lds	r24, 0x00C8
    2de8:	89 0f       	add	r24, r25
    2dea:	80 51       	subi	r24, 0x10	; 16
    2dec:	80 93 c6 00 	sts	0x00C6, r24
				LCD_clearscreen();
    2df0:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_clearscreen>
				
				LCD_vSend_string("minutes=--");
    2df4:	8e e7       	ldi	r24, 0x7E	; 126
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_vSend_string>
				LCD_movecursor(1,9);
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	69 e0       	ldi	r22, 0x09	; 9
    2e00:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_movecursor>
				do
				{
					first_digit=keypad_u8check_press();
    2e04:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <keypad_u8check_press>
    2e08:	80 93 c7 00 	sts	0x00C7, r24
					
				} while (first_digit==NOTPRESSED);
    2e0c:	80 91 c7 00 	lds	r24, 0x00C7
    2e10:	8f 3f       	cpi	r24, 0xFF	; 255
    2e12:	c1 f3       	breq	.-16     	; 0x2e04 <main+0x580>
				LCD_vSend_char(first_digit);
    2e14:	80 91 c7 00 	lds	r24, 0x00C7
    2e18:	0e 94 c2 0b 	call	0x1784	; 0x1784 <LCD_vSend_char>
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	e9 56       	subi	r30, 0x69	; 105
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	a6 e9       	ldi	r26, 0x96	; 150
    2e28:	b3 e4       	ldi	r27, 0x43	; 67
    2e2a:	80 83       	st	Z, r24
    2e2c:	91 83       	std	Z+1, r25	; 0x01
    2e2e:	a2 83       	std	Z+2, r26	; 0x02
    2e30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e32:	8e 01       	movw	r16, r28
    2e34:	0d 56       	subi	r16, 0x6D	; 109
    2e36:	1f 4f       	sbci	r17, 0xFF	; 255
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e9 56       	subi	r30, 0x69	; 105
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	60 81       	ld	r22, Z
    2e40:	71 81       	ldd	r23, Z+1	; 0x01
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	4a ef       	ldi	r20, 0xFA	; 250
    2e4c:	54 e4       	ldi	r21, 0x44	; 68
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	f8 01       	movw	r30, r16
    2e58:	80 83       	st	Z, r24
    2e5a:	91 83       	std	Z+1, r25	; 0x01
    2e5c:	a2 83       	std	Z+2, r26	; 0x02
    2e5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e60:	fe 01       	movw	r30, r28
    2e62:	ed 56       	subi	r30, 0x6D	; 109
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	60 81       	ld	r22, Z
    2e68:	71 81       	ldd	r23, Z+1	; 0x01
    2e6a:	82 81       	ldd	r24, Z+2	; 0x02
    2e6c:	93 81       	ldd	r25, Z+3	; 0x03
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e8       	ldi	r20, 0x80	; 128
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e7a:	88 23       	and	r24, r24
    2e7c:	44 f4       	brge	.+16     	; 0x2e8e <main+0x60a>
		__ticks = 1;
    2e7e:	fe 01       	movw	r30, r28
    2e80:	ef 56       	subi	r30, 0x6F	; 111
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	91 83       	std	Z+1, r25	; 0x01
    2e8a:	80 83       	st	Z, r24
    2e8c:	64 c0       	rjmp	.+200    	; 0x2f56 <main+0x6d2>
	else if (__tmp > 65535)
    2e8e:	fe 01       	movw	r30, r28
    2e90:	ed 56       	subi	r30, 0x6D	; 109
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	60 81       	ld	r22, Z
    2e96:	71 81       	ldd	r23, Z+1	; 0x01
    2e98:	82 81       	ldd	r24, Z+2	; 0x02
    2e9a:	93 81       	ldd	r25, Z+3	; 0x03
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ea0:	4f e7       	ldi	r20, 0x7F	; 127
    2ea2:	57 e4       	ldi	r21, 0x47	; 71
    2ea4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ea8:	18 16       	cp	r1, r24
    2eaa:	0c f0       	brlt	.+2      	; 0x2eae <main+0x62a>
    2eac:	43 c0       	rjmp	.+134    	; 0x2f34 <main+0x6b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e9 56       	subi	r30, 0x69	; 105
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	60 81       	ld	r22, Z
    2eb6:	71 81       	ldd	r23, Z+1	; 0x01
    2eb8:	82 81       	ldd	r24, Z+2	; 0x02
    2eba:	93 81       	ldd	r25, Z+3	; 0x03
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e2       	ldi	r20, 0x20	; 32
    2ec2:	51 e4       	ldi	r21, 0x41	; 65
    2ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	8e 01       	movw	r16, r28
    2ece:	0f 56       	subi	r16, 0x6F	; 111
    2ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed2:	bc 01       	movw	r22, r24
    2ed4:	cd 01       	movw	r24, r26
    2ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	f8 01       	movw	r30, r16
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	80 83       	st	Z, r24
    2ee4:	1f c0       	rjmp	.+62     	; 0x2f24 <main+0x6a0>
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	e1 57       	subi	r30, 0x71	; 113
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	88 ec       	ldi	r24, 0xC8	; 200
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	91 83       	std	Z+1, r25	; 0x01
    2ef2:	80 83       	st	Z, r24
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	e1 57       	subi	r30, 0x71	; 113
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	80 81       	ld	r24, Z
    2efc:	91 81       	ldd	r25, Z+1	; 0x01
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	f1 f7       	brne	.-4      	; 0x2efe <main+0x67a>
    2f02:	fe 01       	movw	r30, r28
    2f04:	e1 57       	subi	r30, 0x71	; 113
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0c:	de 01       	movw	r26, r28
    2f0e:	af 56       	subi	r26, 0x6F	; 111
    2f10:	bf 4f       	sbci	r27, 0xFF	; 255
    2f12:	fe 01       	movw	r30, r28
    2f14:	ef 56       	subi	r30, 0x6F	; 111
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	80 81       	ld	r24, Z
    2f1a:	91 81       	ldd	r25, Z+1	; 0x01
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	11 96       	adiw	r26, 0x01	; 1
    2f20:	9c 93       	st	X, r25
    2f22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f24:	fe 01       	movw	r30, r28
    2f26:	ef 56       	subi	r30, 0x6F	; 111
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	80 81       	ld	r24, Z
    2f2c:	91 81       	ldd	r25, Z+1	; 0x01
    2f2e:	00 97       	sbiw	r24, 0x00	; 0
    2f30:	d1 f6       	brne	.-76     	; 0x2ee6 <main+0x662>
    2f32:	27 c0       	rjmp	.+78     	; 0x2f82 <main+0x6fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f34:	8e 01       	movw	r16, r28
    2f36:	0f 56       	subi	r16, 0x6F	; 111
    2f38:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	ed 56       	subi	r30, 0x6D	; 109
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	60 81       	ld	r22, Z
    2f42:	71 81       	ldd	r23, Z+1	; 0x01
    2f44:	82 81       	ldd	r24, Z+2	; 0x02
    2f46:	93 81       	ldd	r25, Z+3	; 0x03
    2f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	f8 01       	movw	r30, r16
    2f52:	91 83       	std	Z+1, r25	; 0x01
    2f54:	80 83       	st	Z, r24
    2f56:	de 01       	movw	r26, r28
    2f58:	a3 57       	subi	r26, 0x73	; 115
    2f5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	ef 56       	subi	r30, 0x6F	; 111
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	80 81       	ld	r24, Z
    2f64:	91 81       	ldd	r25, Z+1	; 0x01
    2f66:	8d 93       	st	X+, r24
    2f68:	9c 93       	st	X, r25
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	e3 57       	subi	r30, 0x73	; 115
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	80 81       	ld	r24, Z
    2f72:	91 81       	ldd	r25, Z+1	; 0x01
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <main+0x6f0>
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e3 57       	subi	r30, 0x73	; 115
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	91 83       	std	Z+1, r25	; 0x01
    2f80:	80 83       	st	Z, r24
				_delay_ms(300);
				do
				{
					second_digit=keypad_u8check_press();
    2f82:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <keypad_u8check_press>
    2f86:	80 93 c8 00 	sts	0x00C8, r24
					
				} while (second_digit==NOTPRESSED);
    2f8a:	80 91 c8 00 	lds	r24, 0x00C8
    2f8e:	8f 3f       	cpi	r24, 0xFF	; 255
    2f90:	c1 f3       	breq	.-16     	; 0x2f82 <main+0x6fe>
				LCD_vSend_char(second_digit);
    2f92:	80 91 c8 00 	lds	r24, 0x00C8
    2f96:	0e 94 c2 0b 	call	0x1784	; 0x1784 <LCD_vSend_char>
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	e7 57       	subi	r30, 0x77	; 119
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	a6 e9       	ldi	r26, 0x96	; 150
    2fa6:	b3 e4       	ldi	r27, 0x43	; 67
    2fa8:	80 83       	st	Z, r24
    2faa:	91 83       	std	Z+1, r25	; 0x01
    2fac:	a2 83       	std	Z+2, r26	; 0x02
    2fae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb0:	8e 01       	movw	r16, r28
    2fb2:	0b 57       	subi	r16, 0x7B	; 123
    2fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e7 57       	subi	r30, 0x77	; 119
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	60 81       	ld	r22, Z
    2fbe:	71 81       	ldd	r23, Z+1	; 0x01
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	93 81       	ldd	r25, Z+3	; 0x03
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	4a ef       	ldi	r20, 0xFA	; 250
    2fca:	54 e4       	ldi	r21, 0x44	; 68
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	f8 01       	movw	r30, r16
    2fd6:	80 83       	st	Z, r24
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	a2 83       	std	Z+2, r26	; 0x02
    2fdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fde:	fe 01       	movw	r30, r28
    2fe0:	eb 57       	subi	r30, 0x7B	; 123
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	60 81       	ld	r22, Z
    2fe6:	71 81       	ldd	r23, Z+1	; 0x01
    2fe8:	82 81       	ldd	r24, Z+2	; 0x02
    2fea:	93 81       	ldd	r25, Z+3	; 0x03
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	40 e8       	ldi	r20, 0x80	; 128
    2ff2:	5f e3       	ldi	r21, 0x3F	; 63
    2ff4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ff8:	88 23       	and	r24, r24
    2ffa:	44 f4       	brge	.+16     	; 0x300c <main+0x788>
		__ticks = 1;
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	ed 57       	subi	r30, 0x7D	; 125
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	91 83       	std	Z+1, r25	; 0x01
    3008:	80 83       	st	Z, r24
    300a:	64 c0       	rjmp	.+200    	; 0x30d4 <main+0x850>
	else if (__tmp > 65535)
    300c:	fe 01       	movw	r30, r28
    300e:	eb 57       	subi	r30, 0x7B	; 123
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	60 81       	ld	r22, Z
    3014:	71 81       	ldd	r23, Z+1	; 0x01
    3016:	82 81       	ldd	r24, Z+2	; 0x02
    3018:	93 81       	ldd	r25, Z+3	; 0x03
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	3f ef       	ldi	r19, 0xFF	; 255
    301e:	4f e7       	ldi	r20, 0x7F	; 127
    3020:	57 e4       	ldi	r21, 0x47	; 71
    3022:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3026:	18 16       	cp	r1, r24
    3028:	0c f0       	brlt	.+2      	; 0x302c <main+0x7a8>
    302a:	43 c0       	rjmp	.+134    	; 0x30b2 <main+0x82e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302c:	fe 01       	movw	r30, r28
    302e:	e7 57       	subi	r30, 0x77	; 119
    3030:	ff 4f       	sbci	r31, 0xFF	; 255
    3032:	60 81       	ld	r22, Z
    3034:	71 81       	ldd	r23, Z+1	; 0x01
    3036:	82 81       	ldd	r24, Z+2	; 0x02
    3038:	93 81       	ldd	r25, Z+3	; 0x03
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e2       	ldi	r20, 0x20	; 32
    3040:	51 e4       	ldi	r21, 0x41	; 65
    3042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	8e 01       	movw	r16, r28
    304c:	0d 57       	subi	r16, 0x7D	; 125
    304e:	1f 4f       	sbci	r17, 0xFF	; 255
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	f8 01       	movw	r30, r16
    305e:	91 83       	std	Z+1, r25	; 0x01
    3060:	80 83       	st	Z, r24
    3062:	1f c0       	rjmp	.+62     	; 0x30a2 <main+0x81e>
    3064:	fe 01       	movw	r30, r28
    3066:	ef 57       	subi	r30, 0x7F	; 127
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	88 ec       	ldi	r24, 0xC8	; 200
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	91 83       	std	Z+1, r25	; 0x01
    3070:	80 83       	st	Z, r24
    3072:	fe 01       	movw	r30, r28
    3074:	ef 57       	subi	r30, 0x7F	; 127
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	80 81       	ld	r24, Z
    307a:	91 81       	ldd	r25, Z+1	; 0x01
    307c:	01 97       	sbiw	r24, 0x01	; 1
    307e:	f1 f7       	brne	.-4      	; 0x307c <main+0x7f8>
    3080:	fe 01       	movw	r30, r28
    3082:	ef 57       	subi	r30, 0x7F	; 127
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	91 83       	std	Z+1, r25	; 0x01
    3088:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308a:	de 01       	movw	r26, r28
    308c:	ad 57       	subi	r26, 0x7D	; 125
    308e:	bf 4f       	sbci	r27, 0xFF	; 255
    3090:	fe 01       	movw	r30, r28
    3092:	ed 57       	subi	r30, 0x7D	; 125
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 81       	ld	r24, Z
    3098:	91 81       	ldd	r25, Z+1	; 0x01
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	11 96       	adiw	r26, 0x01	; 1
    309e:	9c 93       	st	X, r25
    30a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a2:	fe 01       	movw	r30, r28
    30a4:	ed 57       	subi	r30, 0x7D	; 125
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	d1 f6       	brne	.-76     	; 0x3064 <main+0x7e0>
    30b0:	27 c0       	rjmp	.+78     	; 0x3100 <main+0x87c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b2:	8e 01       	movw	r16, r28
    30b4:	0d 57       	subi	r16, 0x7D	; 125
    30b6:	1f 4f       	sbci	r17, 0xFF	; 255
    30b8:	fe 01       	movw	r30, r28
    30ba:	eb 57       	subi	r30, 0x7B	; 123
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	60 81       	ld	r22, Z
    30c0:	71 81       	ldd	r23, Z+1	; 0x01
    30c2:	82 81       	ldd	r24, Z+2	; 0x02
    30c4:	93 81       	ldd	r25, Z+3	; 0x03
    30c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	f8 01       	movw	r30, r16
    30d0:	91 83       	std	Z+1, r25	; 0x01
    30d2:	80 83       	st	Z, r24
    30d4:	de 01       	movw	r26, r28
    30d6:	a1 58       	subi	r26, 0x81	; 129
    30d8:	bf 4f       	sbci	r27, 0xFF	; 255
    30da:	fe 01       	movw	r30, r28
    30dc:	ed 57       	subi	r30, 0x7D	; 125
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	80 81       	ld	r24, Z
    30e2:	91 81       	ldd	r25, Z+1	; 0x01
    30e4:	8d 93       	st	X+, r24
    30e6:	9c 93       	st	X, r25
    30e8:	fe 01       	movw	r30, r28
    30ea:	e1 58       	subi	r30, 0x81	; 129
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	80 81       	ld	r24, Z
    30f0:	91 81       	ldd	r25, Z+1	; 0x01
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	f1 f7       	brne	.-4      	; 0x30f2 <main+0x86e>
    30f6:	fe 01       	movw	r30, r28
    30f8:	e1 58       	subi	r30, 0x81	; 129
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	80 83       	st	Z, r24
				_delay_ms(300);
				minutes_counter=(second_digit-48)+10*(first_digit-48);
    3100:	80 91 c7 00 	lds	r24, 0x00C7
    3104:	88 2f       	mov	r24, r24
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	9c 01       	movw	r18, r24
    310a:	22 0f       	add	r18, r18
    310c:	33 1f       	adc	r19, r19
    310e:	c9 01       	movw	r24, r18
    3110:	88 0f       	add	r24, r24
    3112:	99 1f       	adc	r25, r25
    3114:	88 0f       	add	r24, r24
    3116:	99 1f       	adc	r25, r25
    3118:	82 0f       	add	r24, r18
    311a:	93 1f       	adc	r25, r19
    311c:	98 2f       	mov	r25, r24
    311e:	80 91 c8 00 	lds	r24, 0x00C8
    3122:	89 0f       	add	r24, r25
    3124:	80 51       	subi	r24, 0x10	; 16
    3126:	80 93 c5 00 	sts	0x00C5, r24
				LCD_clearscreen();
    312a:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_clearscreen>
				
				LCD_vSend_string("seconds=--");
    312e:	89 e8       	ldi	r24, 0x89	; 137
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_vSend_string>
				LCD_movecursor(1,9);
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	69 e0       	ldi	r22, 0x09	; 9
    313a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_movecursor>
				
				do 
				{
					first_digit=keypad_u8check_press();
    313e:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <keypad_u8check_press>
    3142:	80 93 c7 00 	sts	0x00C7, r24
					
				} while (first_digit==NOTPRESSED);
    3146:	80 91 c7 00 	lds	r24, 0x00C7
    314a:	8f 3f       	cpi	r24, 0xFF	; 255
    314c:	c1 f3       	breq	.-16     	; 0x313e <main+0x8ba>
				LCD_vSend_char(first_digit);
    314e:	80 91 c7 00 	lds	r24, 0x00C7
    3152:	0e 94 c2 0b 	call	0x1784	; 0x1784 <LCD_vSend_char>
    3156:	fe 01       	movw	r30, r28
    3158:	e5 58       	subi	r30, 0x85	; 133
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	a6 e9       	ldi	r26, 0x96	; 150
    3162:	b3 e4       	ldi	r27, 0x43	; 67
    3164:	80 83       	st	Z, r24
    3166:	91 83       	std	Z+1, r25	; 0x01
    3168:	a2 83       	std	Z+2, r26	; 0x02
    316a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    316c:	8e 01       	movw	r16, r28
    316e:	09 58       	subi	r16, 0x89	; 137
    3170:	1f 4f       	sbci	r17, 0xFF	; 255
    3172:	fe 01       	movw	r30, r28
    3174:	e5 58       	subi	r30, 0x85	; 133
    3176:	ff 4f       	sbci	r31, 0xFF	; 255
    3178:	60 81       	ld	r22, Z
    317a:	71 81       	ldd	r23, Z+1	; 0x01
    317c:	82 81       	ldd	r24, Z+2	; 0x02
    317e:	93 81       	ldd	r25, Z+3	; 0x03
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	4a ef       	ldi	r20, 0xFA	; 250
    3186:	54 e4       	ldi	r21, 0x44	; 68
    3188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	f8 01       	movw	r30, r16
    3192:	80 83       	st	Z, r24
    3194:	91 83       	std	Z+1, r25	; 0x01
    3196:	a2 83       	std	Z+2, r26	; 0x02
    3198:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    319a:	fe 01       	movw	r30, r28
    319c:	e9 58       	subi	r30, 0x89	; 137
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	60 81       	ld	r22, Z
    31a2:	71 81       	ldd	r23, Z+1	; 0x01
    31a4:	82 81       	ldd	r24, Z+2	; 0x02
    31a6:	93 81       	ldd	r25, Z+3	; 0x03
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	40 e8       	ldi	r20, 0x80	; 128
    31ae:	5f e3       	ldi	r21, 0x3F	; 63
    31b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31b4:	88 23       	and	r24, r24
    31b6:	44 f4       	brge	.+16     	; 0x31c8 <main+0x944>
		__ticks = 1;
    31b8:	fe 01       	movw	r30, r28
    31ba:	eb 58       	subi	r30, 0x8B	; 139
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	91 83       	std	Z+1, r25	; 0x01
    31c4:	80 83       	st	Z, r24
    31c6:	64 c0       	rjmp	.+200    	; 0x3290 <main+0xa0c>
	else if (__tmp > 65535)
    31c8:	fe 01       	movw	r30, r28
    31ca:	e9 58       	subi	r30, 0x89	; 137
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	60 81       	ld	r22, Z
    31d0:	71 81       	ldd	r23, Z+1	; 0x01
    31d2:	82 81       	ldd	r24, Z+2	; 0x02
    31d4:	93 81       	ldd	r25, Z+3	; 0x03
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	3f ef       	ldi	r19, 0xFF	; 255
    31da:	4f e7       	ldi	r20, 0x7F	; 127
    31dc:	57 e4       	ldi	r21, 0x47	; 71
    31de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31e2:	18 16       	cp	r1, r24
    31e4:	0c f0       	brlt	.+2      	; 0x31e8 <main+0x964>
    31e6:	43 c0       	rjmp	.+134    	; 0x326e <main+0x9ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e8:	fe 01       	movw	r30, r28
    31ea:	e5 58       	subi	r30, 0x85	; 133
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	60 81       	ld	r22, Z
    31f0:	71 81       	ldd	r23, Z+1	; 0x01
    31f2:	82 81       	ldd	r24, Z+2	; 0x02
    31f4:	93 81       	ldd	r25, Z+3	; 0x03
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e2       	ldi	r20, 0x20	; 32
    31fc:	51 e4       	ldi	r21, 0x41	; 65
    31fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	8e 01       	movw	r16, r28
    3208:	0b 58       	subi	r16, 0x8B	; 139
    320a:	1f 4f       	sbci	r17, 0xFF	; 255
    320c:	bc 01       	movw	r22, r24
    320e:	cd 01       	movw	r24, r26
    3210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	f8 01       	movw	r30, r16
    321a:	91 83       	std	Z+1, r25	; 0x01
    321c:	80 83       	st	Z, r24
    321e:	1f c0       	rjmp	.+62     	; 0x325e <main+0x9da>
    3220:	fe 01       	movw	r30, r28
    3222:	ed 58       	subi	r30, 0x8D	; 141
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	88 ec       	ldi	r24, 0xC8	; 200
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	91 83       	std	Z+1, r25	; 0x01
    322c:	80 83       	st	Z, r24
    322e:	fe 01       	movw	r30, r28
    3230:	ed 58       	subi	r30, 0x8D	; 141
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	80 81       	ld	r24, Z
    3236:	91 81       	ldd	r25, Z+1	; 0x01
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	f1 f7       	brne	.-4      	; 0x3238 <main+0x9b4>
    323c:	fe 01       	movw	r30, r28
    323e:	ed 58       	subi	r30, 0x8D	; 141
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	91 83       	std	Z+1, r25	; 0x01
    3244:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3246:	de 01       	movw	r26, r28
    3248:	ab 58       	subi	r26, 0x8B	; 139
    324a:	bf 4f       	sbci	r27, 0xFF	; 255
    324c:	fe 01       	movw	r30, r28
    324e:	eb 58       	subi	r30, 0x8B	; 139
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	80 81       	ld	r24, Z
    3254:	91 81       	ldd	r25, Z+1	; 0x01
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	11 96       	adiw	r26, 0x01	; 1
    325a:	9c 93       	st	X, r25
    325c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325e:	fe 01       	movw	r30, r28
    3260:	eb 58       	subi	r30, 0x8B	; 139
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	80 81       	ld	r24, Z
    3266:	91 81       	ldd	r25, Z+1	; 0x01
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	d1 f6       	brne	.-76     	; 0x3220 <main+0x99c>
    326c:	27 c0       	rjmp	.+78     	; 0x32bc <main+0xa38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    326e:	8e 01       	movw	r16, r28
    3270:	0b 58       	subi	r16, 0x8B	; 139
    3272:	1f 4f       	sbci	r17, 0xFF	; 255
    3274:	fe 01       	movw	r30, r28
    3276:	e9 58       	subi	r30, 0x89	; 137
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	60 81       	ld	r22, Z
    327c:	71 81       	ldd	r23, Z+1	; 0x01
    327e:	82 81       	ldd	r24, Z+2	; 0x02
    3280:	93 81       	ldd	r25, Z+3	; 0x03
    3282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	f8 01       	movw	r30, r16
    328c:	91 83       	std	Z+1, r25	; 0x01
    328e:	80 83       	st	Z, r24
    3290:	de 01       	movw	r26, r28
    3292:	af 58       	subi	r26, 0x8F	; 143
    3294:	bf 4f       	sbci	r27, 0xFF	; 255
    3296:	fe 01       	movw	r30, r28
    3298:	eb 58       	subi	r30, 0x8B	; 139
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	80 81       	ld	r24, Z
    329e:	91 81       	ldd	r25, Z+1	; 0x01
    32a0:	8d 93       	st	X+, r24
    32a2:	9c 93       	st	X, r25
    32a4:	fe 01       	movw	r30, r28
    32a6:	ef 58       	subi	r30, 0x8F	; 143
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	80 81       	ld	r24, Z
    32ac:	91 81       	ldd	r25, Z+1	; 0x01
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	f1 f7       	brne	.-4      	; 0x32ae <main+0xa2a>
    32b2:	fe 01       	movw	r30, r28
    32b4:	ef 58       	subi	r30, 0x8F	; 143
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	91 83       	std	Z+1, r25	; 0x01
    32ba:	80 83       	st	Z, r24
				_delay_ms(300);
				do
				{
					second_digit=keypad_u8check_press();
    32bc:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <keypad_u8check_press>
    32c0:	80 93 c8 00 	sts	0x00C8, r24
					
				} while (second_digit==NOTPRESSED);
    32c4:	80 91 c8 00 	lds	r24, 0x00C8
    32c8:	8f 3f       	cpi	r24, 0xFF	; 255
    32ca:	c1 f3       	breq	.-16     	; 0x32bc <main+0xa38>
				LCD_vSend_char(second_digit);
    32cc:	80 91 c8 00 	lds	r24, 0x00C8
    32d0:	0e 94 c2 0b 	call	0x1784	; 0x1784 <LCD_vSend_char>
    32d4:	fe 01       	movw	r30, r28
    32d6:	e3 59       	subi	r30, 0x93	; 147
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	a6 e9       	ldi	r26, 0x96	; 150
    32e0:	b3 e4       	ldi	r27, 0x43	; 67
    32e2:	80 83       	st	Z, r24
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	a2 83       	std	Z+2, r26	; 0x02
    32e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ea:	8e 01       	movw	r16, r28
    32ec:	07 59       	subi	r16, 0x97	; 151
    32ee:	1f 4f       	sbci	r17, 0xFF	; 255
    32f0:	fe 01       	movw	r30, r28
    32f2:	e3 59       	subi	r30, 0x93	; 147
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	60 81       	ld	r22, Z
    32f8:	71 81       	ldd	r23, Z+1	; 0x01
    32fa:	82 81       	ldd	r24, Z+2	; 0x02
    32fc:	93 81       	ldd	r25, Z+3	; 0x03
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	4a ef       	ldi	r20, 0xFA	; 250
    3304:	54 e4       	ldi	r21, 0x44	; 68
    3306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	f8 01       	movw	r30, r16
    3310:	80 83       	st	Z, r24
    3312:	91 83       	std	Z+1, r25	; 0x01
    3314:	a2 83       	std	Z+2, r26	; 0x02
    3316:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3318:	fe 01       	movw	r30, r28
    331a:	e7 59       	subi	r30, 0x97	; 151
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	60 81       	ld	r22, Z
    3320:	71 81       	ldd	r23, Z+1	; 0x01
    3322:	82 81       	ldd	r24, Z+2	; 0x02
    3324:	93 81       	ldd	r25, Z+3	; 0x03
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e8       	ldi	r20, 0x80	; 128
    332c:	5f e3       	ldi	r21, 0x3F	; 63
    332e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3332:	88 23       	and	r24, r24
    3334:	44 f4       	brge	.+16     	; 0x3346 <main+0xac2>
		__ticks = 1;
    3336:	fe 01       	movw	r30, r28
    3338:	e9 59       	subi	r30, 0x99	; 153
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	91 83       	std	Z+1, r25	; 0x01
    3342:	80 83       	st	Z, r24
    3344:	64 c0       	rjmp	.+200    	; 0x340e <main+0xb8a>
	else if (__tmp > 65535)
    3346:	fe 01       	movw	r30, r28
    3348:	e7 59       	subi	r30, 0x97	; 151
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	60 81       	ld	r22, Z
    334e:	71 81       	ldd	r23, Z+1	; 0x01
    3350:	82 81       	ldd	r24, Z+2	; 0x02
    3352:	93 81       	ldd	r25, Z+3	; 0x03
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	3f ef       	ldi	r19, 0xFF	; 255
    3358:	4f e7       	ldi	r20, 0x7F	; 127
    335a:	57 e4       	ldi	r21, 0x47	; 71
    335c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3360:	18 16       	cp	r1, r24
    3362:	0c f0       	brlt	.+2      	; 0x3366 <main+0xae2>
    3364:	43 c0       	rjmp	.+134    	; 0x33ec <main+0xb68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3366:	fe 01       	movw	r30, r28
    3368:	e3 59       	subi	r30, 0x93	; 147
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	60 81       	ld	r22, Z
    336e:	71 81       	ldd	r23, Z+1	; 0x01
    3370:	82 81       	ldd	r24, Z+2	; 0x02
    3372:	93 81       	ldd	r25, Z+3	; 0x03
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e2       	ldi	r20, 0x20	; 32
    337a:	51 e4       	ldi	r21, 0x41	; 65
    337c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	8e 01       	movw	r16, r28
    3386:	09 59       	subi	r16, 0x99	; 153
    3388:	1f 4f       	sbci	r17, 0xFF	; 255
    338a:	bc 01       	movw	r22, r24
    338c:	cd 01       	movw	r24, r26
    338e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	f8 01       	movw	r30, r16
    3398:	91 83       	std	Z+1, r25	; 0x01
    339a:	80 83       	st	Z, r24
    339c:	1f c0       	rjmp	.+62     	; 0x33dc <main+0xb58>
    339e:	fe 01       	movw	r30, r28
    33a0:	eb 59       	subi	r30, 0x9B	; 155
    33a2:	ff 4f       	sbci	r31, 0xFF	; 255
    33a4:	88 ec       	ldi	r24, 0xC8	; 200
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	91 83       	std	Z+1, r25	; 0x01
    33aa:	80 83       	st	Z, r24
    33ac:	fe 01       	movw	r30, r28
    33ae:	eb 59       	subi	r30, 0x9B	; 155
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	80 81       	ld	r24, Z
    33b4:	91 81       	ldd	r25, Z+1	; 0x01
    33b6:	01 97       	sbiw	r24, 0x01	; 1
    33b8:	f1 f7       	brne	.-4      	; 0x33b6 <main+0xb32>
    33ba:	fe 01       	movw	r30, r28
    33bc:	eb 59       	subi	r30, 0x9B	; 155
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	91 83       	std	Z+1, r25	; 0x01
    33c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c4:	de 01       	movw	r26, r28
    33c6:	a9 59       	subi	r26, 0x99	; 153
    33c8:	bf 4f       	sbci	r27, 0xFF	; 255
    33ca:	fe 01       	movw	r30, r28
    33cc:	e9 59       	subi	r30, 0x99	; 153
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	80 81       	ld	r24, Z
    33d2:	91 81       	ldd	r25, Z+1	; 0x01
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	11 96       	adiw	r26, 0x01	; 1
    33d8:	9c 93       	st	X, r25
    33da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33dc:	fe 01       	movw	r30, r28
    33de:	e9 59       	subi	r30, 0x99	; 153
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	80 81       	ld	r24, Z
    33e4:	91 81       	ldd	r25, Z+1	; 0x01
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	d1 f6       	brne	.-76     	; 0x339e <main+0xb1a>
    33ea:	27 c0       	rjmp	.+78     	; 0x343a <main+0xbb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ec:	8e 01       	movw	r16, r28
    33ee:	09 59       	subi	r16, 0x99	; 153
    33f0:	1f 4f       	sbci	r17, 0xFF	; 255
    33f2:	fe 01       	movw	r30, r28
    33f4:	e7 59       	subi	r30, 0x97	; 151
    33f6:	ff 4f       	sbci	r31, 0xFF	; 255
    33f8:	60 81       	ld	r22, Z
    33fa:	71 81       	ldd	r23, Z+1	; 0x01
    33fc:	82 81       	ldd	r24, Z+2	; 0x02
    33fe:	93 81       	ldd	r25, Z+3	; 0x03
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	f8 01       	movw	r30, r16
    340a:	91 83       	std	Z+1, r25	; 0x01
    340c:	80 83       	st	Z, r24
    340e:	de 01       	movw	r26, r28
    3410:	ad 59       	subi	r26, 0x9D	; 157
    3412:	bf 4f       	sbci	r27, 0xFF	; 255
    3414:	fe 01       	movw	r30, r28
    3416:	e9 59       	subi	r30, 0x99	; 153
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	80 81       	ld	r24, Z
    341c:	91 81       	ldd	r25, Z+1	; 0x01
    341e:	8d 93       	st	X+, r24
    3420:	9c 93       	st	X, r25
    3422:	fe 01       	movw	r30, r28
    3424:	ed 59       	subi	r30, 0x9D	; 157
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	80 81       	ld	r24, Z
    342a:	91 81       	ldd	r25, Z+1	; 0x01
    342c:	01 97       	sbiw	r24, 0x01	; 1
    342e:	f1 f7       	brne	.-4      	; 0x342c <main+0xba8>
    3430:	fe 01       	movw	r30, r28
    3432:	ed 59       	subi	r30, 0x9D	; 157
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	91 83       	std	Z+1, r25	; 0x01
    3438:	80 83       	st	Z, r24
				_delay_ms(300);
				seconds_counter=(second_digit-48)+10*(first_digit-48);
    343a:	80 91 c7 00 	lds	r24, 0x00C7
    343e:	88 2f       	mov	r24, r24
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	9c 01       	movw	r18, r24
    3444:	22 0f       	add	r18, r18
    3446:	33 1f       	adc	r19, r19
    3448:	c9 01       	movw	r24, r18
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	88 0f       	add	r24, r24
    3450:	99 1f       	adc	r25, r25
    3452:	82 0f       	add	r24, r18
    3454:	93 1f       	adc	r25, r19
    3456:	98 2f       	mov	r25, r24
    3458:	80 91 c8 00 	lds	r24, 0x00C8
    345c:	89 0f       	add	r24, r25
    345e:	80 51       	subi	r24, 0x10	; 16
    3460:	80 93 c4 00 	sts	0x00C4, r24
				LCD_clearscreen();
    3464:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_clearscreen>
				LCD_vSend_string("press 1 to");
    3468:	80 e6       	ldi	r24, 0x60	; 96
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_vSend_string>
				LCD_movecursor(2,1);
    3470:	82 e0       	ldi	r24, 0x02	; 2
    3472:	61 e0       	ldi	r22, 0x01	; 1
    3474:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_movecursor>
				LCD_vSend_string("set clock");
    3478:	8b e6       	ldi	r24, 0x6B	; 107
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_vSend_string>
    3480:	d3 c0       	rjmp	.+422    	; 0x3628 <main+0xda4>
			}
			else
			{


				LCD_clearscreen();
    3482:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_clearscreen>
				LCD_vSend_string("wrong choice");
    3486:	84 e9       	ldi	r24, 0x94	; 148
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_vSend_string>
				//_delay_ms(1000);
				LED_vTurnOn('A',3);
    348e:	81 e4       	ldi	r24, 0x41	; 65
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	63 e0       	ldi	r22, 0x03	; 3
    3494:	70 e0       	ldi	r23, 0x00	; 0
    3496:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LED_vTurnOn>
    349a:	fe 01       	movw	r30, r28
    349c:	e1 5a       	subi	r30, 0xA1	; 161
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	aa e7       	ldi	r26, 0x7A	; 122
    34a6:	b4 e4       	ldi	r27, 0x44	; 68
    34a8:	80 83       	st	Z, r24
    34aa:	91 83       	std	Z+1, r25	; 0x01
    34ac:	a2 83       	std	Z+2, r26	; 0x02
    34ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b0:	8e 01       	movw	r16, r28
    34b2:	05 5a       	subi	r16, 0xA5	; 165
    34b4:	1f 4f       	sbci	r17, 0xFF	; 255
    34b6:	fe 01       	movw	r30, r28
    34b8:	e1 5a       	subi	r30, 0xA1	; 161
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	60 81       	ld	r22, Z
    34be:	71 81       	ldd	r23, Z+1	; 0x01
    34c0:	82 81       	ldd	r24, Z+2	; 0x02
    34c2:	93 81       	ldd	r25, Z+3	; 0x03
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	4a ef       	ldi	r20, 0xFA	; 250
    34ca:	54 e4       	ldi	r21, 0x44	; 68
    34cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	f8 01       	movw	r30, r16
    34d6:	80 83       	st	Z, r24
    34d8:	91 83       	std	Z+1, r25	; 0x01
    34da:	a2 83       	std	Z+2, r26	; 0x02
    34dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34de:	fe 01       	movw	r30, r28
    34e0:	e5 5a       	subi	r30, 0xA5	; 165
    34e2:	ff 4f       	sbci	r31, 0xFF	; 255
    34e4:	60 81       	ld	r22, Z
    34e6:	71 81       	ldd	r23, Z+1	; 0x01
    34e8:	82 81       	ldd	r24, Z+2	; 0x02
    34ea:	93 81       	ldd	r25, Z+3	; 0x03
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	40 e8       	ldi	r20, 0x80	; 128
    34f2:	5f e3       	ldi	r21, 0x3F	; 63
    34f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34f8:	88 23       	and	r24, r24
    34fa:	44 f4       	brge	.+16     	; 0x350c <main+0xc88>
		__ticks = 1;
    34fc:	fe 01       	movw	r30, r28
    34fe:	e7 5a       	subi	r30, 0xA7	; 167
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	91 83       	std	Z+1, r25	; 0x01
    3508:	80 83       	st	Z, r24
    350a:	64 c0       	rjmp	.+200    	; 0x35d4 <main+0xd50>
	else if (__tmp > 65535)
    350c:	fe 01       	movw	r30, r28
    350e:	e5 5a       	subi	r30, 0xA5	; 165
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	60 81       	ld	r22, Z
    3514:	71 81       	ldd	r23, Z+1	; 0x01
    3516:	82 81       	ldd	r24, Z+2	; 0x02
    3518:	93 81       	ldd	r25, Z+3	; 0x03
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	3f ef       	ldi	r19, 0xFF	; 255
    351e:	4f e7       	ldi	r20, 0x7F	; 127
    3520:	57 e4       	ldi	r21, 0x47	; 71
    3522:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3526:	18 16       	cp	r1, r24
    3528:	0c f0       	brlt	.+2      	; 0x352c <main+0xca8>
    352a:	43 c0       	rjmp	.+134    	; 0x35b2 <main+0xd2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352c:	fe 01       	movw	r30, r28
    352e:	e1 5a       	subi	r30, 0xA1	; 161
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	60 81       	ld	r22, Z
    3534:	71 81       	ldd	r23, Z+1	; 0x01
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	93 81       	ldd	r25, Z+3	; 0x03
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e2       	ldi	r20, 0x20	; 32
    3540:	51 e4       	ldi	r21, 0x41	; 65
    3542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	8e 01       	movw	r16, r28
    354c:	07 5a       	subi	r16, 0xA7	; 167
    354e:	1f 4f       	sbci	r17, 0xFF	; 255
    3550:	bc 01       	movw	r22, r24
    3552:	cd 01       	movw	r24, r26
    3554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	f8 01       	movw	r30, r16
    355e:	91 83       	std	Z+1, r25	; 0x01
    3560:	80 83       	st	Z, r24
    3562:	1f c0       	rjmp	.+62     	; 0x35a2 <main+0xd1e>
    3564:	fe 01       	movw	r30, r28
    3566:	e9 5a       	subi	r30, 0xA9	; 169
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	88 ec       	ldi	r24, 0xC8	; 200
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	91 83       	std	Z+1, r25	; 0x01
    3570:	80 83       	st	Z, r24
    3572:	fe 01       	movw	r30, r28
    3574:	e9 5a       	subi	r30, 0xA9	; 169
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	80 81       	ld	r24, Z
    357a:	91 81       	ldd	r25, Z+1	; 0x01
    357c:	01 97       	sbiw	r24, 0x01	; 1
    357e:	f1 f7       	brne	.-4      	; 0x357c <main+0xcf8>
    3580:	fe 01       	movw	r30, r28
    3582:	e9 5a       	subi	r30, 0xA9	; 169
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	91 83       	std	Z+1, r25	; 0x01
    3588:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    358a:	de 01       	movw	r26, r28
    358c:	a7 5a       	subi	r26, 0xA7	; 167
    358e:	bf 4f       	sbci	r27, 0xFF	; 255
    3590:	fe 01       	movw	r30, r28
    3592:	e7 5a       	subi	r30, 0xA7	; 167
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	80 81       	ld	r24, Z
    3598:	91 81       	ldd	r25, Z+1	; 0x01
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	11 96       	adiw	r26, 0x01	; 1
    359e:	9c 93       	st	X, r25
    35a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a2:	fe 01       	movw	r30, r28
    35a4:	e7 5a       	subi	r30, 0xA7	; 167
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	80 81       	ld	r24, Z
    35aa:	91 81       	ldd	r25, Z+1	; 0x01
    35ac:	00 97       	sbiw	r24, 0x00	; 0
    35ae:	d1 f6       	brne	.-76     	; 0x3564 <main+0xce0>
    35b0:	27 c0       	rjmp	.+78     	; 0x3600 <main+0xd7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b2:	8e 01       	movw	r16, r28
    35b4:	07 5a       	subi	r16, 0xA7	; 167
    35b6:	1f 4f       	sbci	r17, 0xFF	; 255
    35b8:	fe 01       	movw	r30, r28
    35ba:	e5 5a       	subi	r30, 0xA5	; 165
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	60 81       	ld	r22, Z
    35c0:	71 81       	ldd	r23, Z+1	; 0x01
    35c2:	82 81       	ldd	r24, Z+2	; 0x02
    35c4:	93 81       	ldd	r25, Z+3	; 0x03
    35c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	f8 01       	movw	r30, r16
    35d0:	91 83       	std	Z+1, r25	; 0x01
    35d2:	80 83       	st	Z, r24
    35d4:	de 01       	movw	r26, r28
    35d6:	ab 5a       	subi	r26, 0xAB	; 171
    35d8:	bf 4f       	sbci	r27, 0xFF	; 255
    35da:	fe 01       	movw	r30, r28
    35dc:	e7 5a       	subi	r30, 0xA7	; 167
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	80 81       	ld	r24, Z
    35e2:	91 81       	ldd	r25, Z+1	; 0x01
    35e4:	8d 93       	st	X+, r24
    35e6:	9c 93       	st	X, r25
    35e8:	fe 01       	movw	r30, r28
    35ea:	eb 5a       	subi	r30, 0xAB	; 171
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	80 81       	ld	r24, Z
    35f0:	91 81       	ldd	r25, Z+1	; 0x01
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	f1 f7       	brne	.-4      	; 0x35f2 <main+0xd6e>
    35f6:	fe 01       	movw	r30, r28
    35f8:	eb 5a       	subi	r30, 0xAB	; 171
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	91 83       	std	Z+1, r25	; 0x01
    35fe:	80 83       	st	Z, r24
				_delay_ms(1000);

					LED_vTurnOff('A',3);
    3600:	81 e4       	ldi	r24, 0x41	; 65
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	63 e0       	ldi	r22, 0x03	; 3
    3606:	70 e0       	ldi	r23, 0x00	; 0
    3608:	0e 94 b0 06 	call	0xd60	; 0xd60 <LED_vTurnOff>
				LCD_clearscreen();
    360c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_clearscreen>
				LCD_vSend_string("press 1 to");
    3610:	80 e6       	ldi	r24, 0x60	; 96
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_vSend_string>
				LCD_movecursor(2,1);
    3618:	82 e0       	ldi	r24, 0x02	; 2
    361a:	61 e0       	ldi	r22, 0x01	; 1
    361c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <LCD_movecursor>
				LCD_vSend_string("set clock");
    3620:	8b e6       	ldi	r24, 0x6B	; 107
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_vSend_string>
			}
		}
		
		SET_BIT(PORTC,1);
    3628:	a5 e3       	ldi	r26, 0x35	; 53
    362a:	b0 e0       	ldi	r27, 0x00	; 0
    362c:	e5 e3       	ldi	r30, 0x35	; 53
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	80 81       	ld	r24, Z
    3632:	82 60       	ori	r24, 0x02	; 2
    3634:	8c 93       	st	X, r24
		SET_BIT(PORTC,2);
    3636:	a5 e3       	ldi	r26, 0x35	; 53
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	e5 e3       	ldi	r30, 0x35	; 53
    363c:	f0 e0       	ldi	r31, 0x00	; 0
    363e:	80 81       	ld	r24, Z
    3640:	84 60       	ori	r24, 0x04	; 4
    3642:	8c 93       	st	X, r24
		SET_BIT(PORTC,3);
    3644:	a5 e3       	ldi	r26, 0x35	; 53
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	e5 e3       	ldi	r30, 0x35	; 53
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	80 81       	ld	r24, Z
    364e:	88 60       	ori	r24, 0x08	; 8
    3650:	8c 93       	st	X, r24
		SET_BIT(PORTC,4);
    3652:	a5 e3       	ldi	r26, 0x35	; 53
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	e5 e3       	ldi	r30, 0x35	; 53
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	80 61       	ori	r24, 0x10	; 16
    365e:	8c 93       	st	X, r24
		SET_BIT(PORTC,5);
    3660:	a5 e3       	ldi	r26, 0x35	; 53
    3662:	b0 e0       	ldi	r27, 0x00	; 0
    3664:	e5 e3       	ldi	r30, 0x35	; 53
    3666:	f0 e0       	ldi	r31, 0x00	; 0
    3668:	80 81       	ld	r24, Z
    366a:	80 62       	ori	r24, 0x20	; 32
    366c:	8c 93       	st	X, r24
		CLR_BIT(PORTC,0);
    366e:	a5 e3       	ldi	r26, 0x35	; 53
    3670:	b0 e0       	ldi	r27, 0x00	; 0
    3672:	e5 e3       	ldi	r30, 0x35	; 53
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	80 81       	ld	r24, Z
    3678:	8e 7f       	andi	r24, 0xFE	; 254
    367a:	8c 93       	st	X, r24
		seven_seg_write('B',seconds_counter%10);
    367c:	80 91 c4 00 	lds	r24, 0x00C4
    3680:	9a e0       	ldi	r25, 0x0A	; 10
    3682:	69 2f       	mov	r22, r25
    3684:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__udivmodqi4>
    3688:	89 2f       	mov	r24, r25
    368a:	98 2f       	mov	r25, r24
    368c:	82 e4       	ldi	r24, 0x42	; 66
    368e:	69 2f       	mov	r22, r25
    3690:	0e 94 00 14 	call	0x2800	; 0x2800 <seven_seg_write>
    3694:	fe 01       	movw	r30, r28
    3696:	ef 5a       	subi	r30, 0xAF	; 175
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	a0 ea       	ldi	r26, 0xA0	; 160
    36a0:	b0 e4       	ldi	r27, 0x40	; 64
    36a2:	80 83       	st	Z, r24
    36a4:	91 83       	std	Z+1, r25	; 0x01
    36a6:	a2 83       	std	Z+2, r26	; 0x02
    36a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36aa:	8e 01       	movw	r16, r28
    36ac:	03 5b       	subi	r16, 0xB3	; 179
    36ae:	1f 4f       	sbci	r17, 0xFF	; 255
    36b0:	fe 01       	movw	r30, r28
    36b2:	ef 5a       	subi	r30, 0xAF	; 175
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	60 81       	ld	r22, Z
    36b8:	71 81       	ldd	r23, Z+1	; 0x01
    36ba:	82 81       	ldd	r24, Z+2	; 0x02
    36bc:	93 81       	ldd	r25, Z+3	; 0x03
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	4a ef       	ldi	r20, 0xFA	; 250
    36c4:	54 e4       	ldi	r21, 0x44	; 68
    36c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ca:	dc 01       	movw	r26, r24
    36cc:	cb 01       	movw	r24, r22
    36ce:	f8 01       	movw	r30, r16
    36d0:	80 83       	st	Z, r24
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	a2 83       	std	Z+2, r26	; 0x02
    36d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36d8:	fe 01       	movw	r30, r28
    36da:	e3 5b       	subi	r30, 0xB3	; 179
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	60 81       	ld	r22, Z
    36e0:	71 81       	ldd	r23, Z+1	; 0x01
    36e2:	82 81       	ldd	r24, Z+2	; 0x02
    36e4:	93 81       	ldd	r25, Z+3	; 0x03
    36e6:	20 e0       	ldi	r18, 0x00	; 0
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	40 e8       	ldi	r20, 0x80	; 128
    36ec:	5f e3       	ldi	r21, 0x3F	; 63
    36ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36f2:	88 23       	and	r24, r24
    36f4:	44 f4       	brge	.+16     	; 0x3706 <main+0xe82>
		__ticks = 1;
    36f6:	fe 01       	movw	r30, r28
    36f8:	e5 5b       	subi	r30, 0xB5	; 181
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	91 83       	std	Z+1, r25	; 0x01
    3702:	80 83       	st	Z, r24
    3704:	64 c0       	rjmp	.+200    	; 0x37ce <main+0xf4a>
	else if (__tmp > 65535)
    3706:	fe 01       	movw	r30, r28
    3708:	e3 5b       	subi	r30, 0xB3	; 179
    370a:	ff 4f       	sbci	r31, 0xFF	; 255
    370c:	60 81       	ld	r22, Z
    370e:	71 81       	ldd	r23, Z+1	; 0x01
    3710:	82 81       	ldd	r24, Z+2	; 0x02
    3712:	93 81       	ldd	r25, Z+3	; 0x03
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	3f ef       	ldi	r19, 0xFF	; 255
    3718:	4f e7       	ldi	r20, 0x7F	; 127
    371a:	57 e4       	ldi	r21, 0x47	; 71
    371c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3720:	18 16       	cp	r1, r24
    3722:	0c f0       	brlt	.+2      	; 0x3726 <main+0xea2>
    3724:	43 c0       	rjmp	.+134    	; 0x37ac <main+0xf28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3726:	fe 01       	movw	r30, r28
    3728:	ef 5a       	subi	r30, 0xAF	; 175
    372a:	ff 4f       	sbci	r31, 0xFF	; 255
    372c:	60 81       	ld	r22, Z
    372e:	71 81       	ldd	r23, Z+1	; 0x01
    3730:	82 81       	ldd	r24, Z+2	; 0x02
    3732:	93 81       	ldd	r25, Z+3	; 0x03
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	40 e2       	ldi	r20, 0x20	; 32
    373a:	51 e4       	ldi	r21, 0x41	; 65
    373c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	8e 01       	movw	r16, r28
    3746:	05 5b       	subi	r16, 0xB5	; 181
    3748:	1f 4f       	sbci	r17, 0xFF	; 255
    374a:	bc 01       	movw	r22, r24
    374c:	cd 01       	movw	r24, r26
    374e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	f8 01       	movw	r30, r16
    3758:	91 83       	std	Z+1, r25	; 0x01
    375a:	80 83       	st	Z, r24
    375c:	1f c0       	rjmp	.+62     	; 0x379c <main+0xf18>
    375e:	fe 01       	movw	r30, r28
    3760:	e7 5b       	subi	r30, 0xB7	; 183
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	88 ec       	ldi	r24, 0xC8	; 200
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	91 83       	std	Z+1, r25	; 0x01
    376a:	80 83       	st	Z, r24
    376c:	fe 01       	movw	r30, r28
    376e:	e7 5b       	subi	r30, 0xB7	; 183
    3770:	ff 4f       	sbci	r31, 0xFF	; 255
    3772:	80 81       	ld	r24, Z
    3774:	91 81       	ldd	r25, Z+1	; 0x01
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	f1 f7       	brne	.-4      	; 0x3776 <main+0xef2>
    377a:	fe 01       	movw	r30, r28
    377c:	e7 5b       	subi	r30, 0xB7	; 183
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	91 83       	std	Z+1, r25	; 0x01
    3782:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3784:	de 01       	movw	r26, r28
    3786:	a5 5b       	subi	r26, 0xB5	; 181
    3788:	bf 4f       	sbci	r27, 0xFF	; 255
    378a:	fe 01       	movw	r30, r28
    378c:	e5 5b       	subi	r30, 0xB5	; 181
    378e:	ff 4f       	sbci	r31, 0xFF	; 255
    3790:	80 81       	ld	r24, Z
    3792:	91 81       	ldd	r25, Z+1	; 0x01
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	11 96       	adiw	r26, 0x01	; 1
    3798:	9c 93       	st	X, r25
    379a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379c:	fe 01       	movw	r30, r28
    379e:	e5 5b       	subi	r30, 0xB5	; 181
    37a0:	ff 4f       	sbci	r31, 0xFF	; 255
    37a2:	80 81       	ld	r24, Z
    37a4:	91 81       	ldd	r25, Z+1	; 0x01
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	d1 f6       	brne	.-76     	; 0x375e <main+0xeda>
    37aa:	27 c0       	rjmp	.+78     	; 0x37fa <main+0xf76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ac:	8e 01       	movw	r16, r28
    37ae:	05 5b       	subi	r16, 0xB5	; 181
    37b0:	1f 4f       	sbci	r17, 0xFF	; 255
    37b2:	fe 01       	movw	r30, r28
    37b4:	e3 5b       	subi	r30, 0xB3	; 179
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	60 81       	ld	r22, Z
    37ba:	71 81       	ldd	r23, Z+1	; 0x01
    37bc:	82 81       	ldd	r24, Z+2	; 0x02
    37be:	93 81       	ldd	r25, Z+3	; 0x03
    37c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c4:	dc 01       	movw	r26, r24
    37c6:	cb 01       	movw	r24, r22
    37c8:	f8 01       	movw	r30, r16
    37ca:	91 83       	std	Z+1, r25	; 0x01
    37cc:	80 83       	st	Z, r24
    37ce:	de 01       	movw	r26, r28
    37d0:	a9 5b       	subi	r26, 0xB9	; 185
    37d2:	bf 4f       	sbci	r27, 0xFF	; 255
    37d4:	fe 01       	movw	r30, r28
    37d6:	e5 5b       	subi	r30, 0xB5	; 181
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	80 81       	ld	r24, Z
    37dc:	91 81       	ldd	r25, Z+1	; 0x01
    37de:	8d 93       	st	X+, r24
    37e0:	9c 93       	st	X, r25
    37e2:	fe 01       	movw	r30, r28
    37e4:	e9 5b       	subi	r30, 0xB9	; 185
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	80 81       	ld	r24, Z
    37ea:	91 81       	ldd	r25, Z+1	; 0x01
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	f1 f7       	brne	.-4      	; 0x37ec <main+0xf68>
    37f0:	fe 01       	movw	r30, r28
    37f2:	e9 5b       	subi	r30, 0xB9	; 185
    37f4:	ff 4f       	sbci	r31, 0xFF	; 255
    37f6:	91 83       	std	Z+1, r25	; 0x01
    37f8:	80 83       	st	Z, r24
		_delay_ms(5);
		
		SET_BIT(PORTC,0);
    37fa:	a5 e3       	ldi	r26, 0x35	; 53
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	e5 e3       	ldi	r30, 0x35	; 53
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	81 60       	ori	r24, 0x01	; 1
    3806:	8c 93       	st	X, r24
		SET_BIT(PORTC,2);
    3808:	a5 e3       	ldi	r26, 0x35	; 53
    380a:	b0 e0       	ldi	r27, 0x00	; 0
    380c:	e5 e3       	ldi	r30, 0x35	; 53
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	80 81       	ld	r24, Z
    3812:	84 60       	ori	r24, 0x04	; 4
    3814:	8c 93       	st	X, r24
		SET_BIT(PORTC,3);
    3816:	a5 e3       	ldi	r26, 0x35	; 53
    3818:	b0 e0       	ldi	r27, 0x00	; 0
    381a:	e5 e3       	ldi	r30, 0x35	; 53
    381c:	f0 e0       	ldi	r31, 0x00	; 0
    381e:	80 81       	ld	r24, Z
    3820:	88 60       	ori	r24, 0x08	; 8
    3822:	8c 93       	st	X, r24
		SET_BIT(PORTC,4);
    3824:	a5 e3       	ldi	r26, 0x35	; 53
    3826:	b0 e0       	ldi	r27, 0x00	; 0
    3828:	e5 e3       	ldi	r30, 0x35	; 53
    382a:	f0 e0       	ldi	r31, 0x00	; 0
    382c:	80 81       	ld	r24, Z
    382e:	80 61       	ori	r24, 0x10	; 16
    3830:	8c 93       	st	X, r24
		SET_BIT(PORTC,5);
    3832:	a5 e3       	ldi	r26, 0x35	; 53
    3834:	b0 e0       	ldi	r27, 0x00	; 0
    3836:	e5 e3       	ldi	r30, 0x35	; 53
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	80 81       	ld	r24, Z
    383c:	80 62       	ori	r24, 0x20	; 32
    383e:	8c 93       	st	X, r24
		CLR_BIT(PORTC,1);
    3840:	a5 e3       	ldi	r26, 0x35	; 53
    3842:	b0 e0       	ldi	r27, 0x00	; 0
    3844:	e5 e3       	ldi	r30, 0x35	; 53
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	8d 7f       	andi	r24, 0xFD	; 253
    384c:	8c 93       	st	X, r24
		seven_seg_write('B',seconds_counter/10);
    384e:	80 91 c4 00 	lds	r24, 0x00C4
    3852:	9a e0       	ldi	r25, 0x0A	; 10
    3854:	69 2f       	mov	r22, r25
    3856:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__udivmodqi4>
    385a:	98 2f       	mov	r25, r24
    385c:	82 e4       	ldi	r24, 0x42	; 66
    385e:	69 2f       	mov	r22, r25
    3860:	0e 94 00 14 	call	0x2800	; 0x2800 <seven_seg_write>
    3864:	fe 01       	movw	r30, r28
    3866:	ed 5b       	subi	r30, 0xBD	; 189
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	a0 ea       	ldi	r26, 0xA0	; 160
    3870:	b0 e4       	ldi	r27, 0x40	; 64
    3872:	80 83       	st	Z, r24
    3874:	91 83       	std	Z+1, r25	; 0x01
    3876:	a2 83       	std	Z+2, r26	; 0x02
    3878:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    387a:	8e 01       	movw	r16, r28
    387c:	01 5c       	subi	r16, 0xC1	; 193
    387e:	1f 4f       	sbci	r17, 0xFF	; 255
    3880:	fe 01       	movw	r30, r28
    3882:	ed 5b       	subi	r30, 0xBD	; 189
    3884:	ff 4f       	sbci	r31, 0xFF	; 255
    3886:	60 81       	ld	r22, Z
    3888:	71 81       	ldd	r23, Z+1	; 0x01
    388a:	82 81       	ldd	r24, Z+2	; 0x02
    388c:	93 81       	ldd	r25, Z+3	; 0x03
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	4a ef       	ldi	r20, 0xFA	; 250
    3894:	54 e4       	ldi	r21, 0x44	; 68
    3896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    389a:	dc 01       	movw	r26, r24
    389c:	cb 01       	movw	r24, r22
    389e:	f8 01       	movw	r30, r16
    38a0:	80 83       	st	Z, r24
    38a2:	91 83       	std	Z+1, r25	; 0x01
    38a4:	a2 83       	std	Z+2, r26	; 0x02
    38a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38a8:	fe 01       	movw	r30, r28
    38aa:	ff 96       	adiw	r30, 0x3f	; 63
    38ac:	60 81       	ld	r22, Z
    38ae:	71 81       	ldd	r23, Z+1	; 0x01
    38b0:	82 81       	ldd	r24, Z+2	; 0x02
    38b2:	93 81       	ldd	r25, Z+3	; 0x03
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	40 e8       	ldi	r20, 0x80	; 128
    38ba:	5f e3       	ldi	r21, 0x3F	; 63
    38bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38c0:	88 23       	and	r24, r24
    38c2:	2c f4       	brge	.+10     	; 0x38ce <main+0x104a>
		__ticks = 1;
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	9e af       	std	Y+62, r25	; 0x3e
    38ca:	8d af       	std	Y+61, r24	; 0x3d
    38cc:	46 c0       	rjmp	.+140    	; 0x395a <main+0x10d6>
	else if (__tmp > 65535)
    38ce:	fe 01       	movw	r30, r28
    38d0:	ff 96       	adiw	r30, 0x3f	; 63
    38d2:	60 81       	ld	r22, Z
    38d4:	71 81       	ldd	r23, Z+1	; 0x01
    38d6:	82 81       	ldd	r24, Z+2	; 0x02
    38d8:	93 81       	ldd	r25, Z+3	; 0x03
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	3f ef       	ldi	r19, 0xFF	; 255
    38de:	4f e7       	ldi	r20, 0x7F	; 127
    38e0:	57 e4       	ldi	r21, 0x47	; 71
    38e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38e6:	18 16       	cp	r1, r24
    38e8:	64 f5       	brge	.+88     	; 0x3942 <main+0x10be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ea:	fe 01       	movw	r30, r28
    38ec:	ed 5b       	subi	r30, 0xBD	; 189
    38ee:	ff 4f       	sbci	r31, 0xFF	; 255
    38f0:	60 81       	ld	r22, Z
    38f2:	71 81       	ldd	r23, Z+1	; 0x01
    38f4:	82 81       	ldd	r24, Z+2	; 0x02
    38f6:	93 81       	ldd	r25, Z+3	; 0x03
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	40 e2       	ldi	r20, 0x20	; 32
    38fe:	51 e4       	ldi	r21, 0x41	; 65
    3900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3904:	dc 01       	movw	r26, r24
    3906:	cb 01       	movw	r24, r22
    3908:	bc 01       	movw	r22, r24
    390a:	cd 01       	movw	r24, r26
    390c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	9e af       	std	Y+62, r25	; 0x3e
    3916:	8d af       	std	Y+61, r24	; 0x3d
    3918:	0f c0       	rjmp	.+30     	; 0x3938 <main+0x10b4>
    391a:	88 ec       	ldi	r24, 0xC8	; 200
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	9c af       	std	Y+60, r25	; 0x3c
    3920:	8b af       	std	Y+59, r24	; 0x3b
    3922:	8b ad       	ldd	r24, Y+59	; 0x3b
    3924:	9c ad       	ldd	r25, Y+60	; 0x3c
    3926:	01 97       	sbiw	r24, 0x01	; 1
    3928:	f1 f7       	brne	.-4      	; 0x3926 <main+0x10a2>
    392a:	9c af       	std	Y+60, r25	; 0x3c
    392c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    392e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3930:	9e ad       	ldd	r25, Y+62	; 0x3e
    3932:	01 97       	sbiw	r24, 0x01	; 1
    3934:	9e af       	std	Y+62, r25	; 0x3e
    3936:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3938:	8d ad       	ldd	r24, Y+61	; 0x3d
    393a:	9e ad       	ldd	r25, Y+62	; 0x3e
    393c:	00 97       	sbiw	r24, 0x00	; 0
    393e:	69 f7       	brne	.-38     	; 0x391a <main+0x1096>
    3940:	16 c0       	rjmp	.+44     	; 0x396e <main+0x10ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3942:	fe 01       	movw	r30, r28
    3944:	ff 96       	adiw	r30, 0x3f	; 63
    3946:	60 81       	ld	r22, Z
    3948:	71 81       	ldd	r23, Z+1	; 0x01
    394a:	82 81       	ldd	r24, Z+2	; 0x02
    394c:	93 81       	ldd	r25, Z+3	; 0x03
    394e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	9e af       	std	Y+62, r25	; 0x3e
    3958:	8d af       	std	Y+61, r24	; 0x3d
    395a:	8d ad       	ldd	r24, Y+61	; 0x3d
    395c:	9e ad       	ldd	r25, Y+62	; 0x3e
    395e:	9a af       	std	Y+58, r25	; 0x3a
    3960:	89 af       	std	Y+57, r24	; 0x39
    3962:	89 ad       	ldd	r24, Y+57	; 0x39
    3964:	9a ad       	ldd	r25, Y+58	; 0x3a
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	f1 f7       	brne	.-4      	; 0x3966 <main+0x10e2>
    396a:	9a af       	std	Y+58, r25	; 0x3a
    396c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(5);
		
		SET_BIT(PORTC,0);
    396e:	a5 e3       	ldi	r26, 0x35	; 53
    3970:	b0 e0       	ldi	r27, 0x00	; 0
    3972:	e5 e3       	ldi	r30, 0x35	; 53
    3974:	f0 e0       	ldi	r31, 0x00	; 0
    3976:	80 81       	ld	r24, Z
    3978:	81 60       	ori	r24, 0x01	; 1
    397a:	8c 93       	st	X, r24
		SET_BIT(PORTC,1);
    397c:	a5 e3       	ldi	r26, 0x35	; 53
    397e:	b0 e0       	ldi	r27, 0x00	; 0
    3980:	e5 e3       	ldi	r30, 0x35	; 53
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	80 81       	ld	r24, Z
    3986:	82 60       	ori	r24, 0x02	; 2
    3988:	8c 93       	st	X, r24
		SET_BIT(PORTC,3);
    398a:	a5 e3       	ldi	r26, 0x35	; 53
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	e5 e3       	ldi	r30, 0x35	; 53
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	80 81       	ld	r24, Z
    3994:	88 60       	ori	r24, 0x08	; 8
    3996:	8c 93       	st	X, r24
		SET_BIT(PORTC,4);
    3998:	a5 e3       	ldi	r26, 0x35	; 53
    399a:	b0 e0       	ldi	r27, 0x00	; 0
    399c:	e5 e3       	ldi	r30, 0x35	; 53
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	80 81       	ld	r24, Z
    39a2:	80 61       	ori	r24, 0x10	; 16
    39a4:	8c 93       	st	X, r24
		SET_BIT(PORTC,5);
    39a6:	a5 e3       	ldi	r26, 0x35	; 53
    39a8:	b0 e0       	ldi	r27, 0x00	; 0
    39aa:	e5 e3       	ldi	r30, 0x35	; 53
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	80 81       	ld	r24, Z
    39b0:	80 62       	ori	r24, 0x20	; 32
    39b2:	8c 93       	st	X, r24
		CLR_BIT(PORTC,2);
    39b4:	a5 e3       	ldi	r26, 0x35	; 53
    39b6:	b0 e0       	ldi	r27, 0x00	; 0
    39b8:	e5 e3       	ldi	r30, 0x35	; 53
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	80 81       	ld	r24, Z
    39be:	8b 7f       	andi	r24, 0xFB	; 251
    39c0:	8c 93       	st	X, r24
		seven_seg_write('B',minutes_counter%10);
    39c2:	80 91 c5 00 	lds	r24, 0x00C5
    39c6:	9a e0       	ldi	r25, 0x0A	; 10
    39c8:	69 2f       	mov	r22, r25
    39ca:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__udivmodqi4>
    39ce:	89 2f       	mov	r24, r25
    39d0:	98 2f       	mov	r25, r24
    39d2:	82 e4       	ldi	r24, 0x42	; 66
    39d4:	69 2f       	mov	r22, r25
    39d6:	0e 94 00 14 	call	0x2800	; 0x2800 <seven_seg_write>
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	a0 ea       	ldi	r26, 0xA0	; 160
    39e0:	b0 e4       	ldi	r27, 0x40	; 64
    39e2:	8d ab       	std	Y+53, r24	; 0x35
    39e4:	9e ab       	std	Y+54, r25	; 0x36
    39e6:	af ab       	std	Y+55, r26	; 0x37
    39e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ea:	6d a9       	ldd	r22, Y+53	; 0x35
    39ec:	7e a9       	ldd	r23, Y+54	; 0x36
    39ee:	8f a9       	ldd	r24, Y+55	; 0x37
    39f0:	98 ad       	ldd	r25, Y+56	; 0x38
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	4a ef       	ldi	r20, 0xFA	; 250
    39f8:	54 e4       	ldi	r21, 0x44	; 68
    39fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fe:	dc 01       	movw	r26, r24
    3a00:	cb 01       	movw	r24, r22
    3a02:	89 ab       	std	Y+49, r24	; 0x31
    3a04:	9a ab       	std	Y+50, r25	; 0x32
    3a06:	ab ab       	std	Y+51, r26	; 0x33
    3a08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a0a:	69 a9       	ldd	r22, Y+49	; 0x31
    3a0c:	7a a9       	ldd	r23, Y+50	; 0x32
    3a0e:	8b a9       	ldd	r24, Y+51	; 0x33
    3a10:	9c a9       	ldd	r25, Y+52	; 0x34
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	40 e8       	ldi	r20, 0x80	; 128
    3a18:	5f e3       	ldi	r21, 0x3F	; 63
    3a1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a1e:	88 23       	and	r24, r24
    3a20:	2c f4       	brge	.+10     	; 0x3a2c <main+0x11a8>
		__ticks = 1;
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	98 ab       	std	Y+48, r25	; 0x30
    3a28:	8f a7       	std	Y+47, r24	; 0x2f
    3a2a:	3f c0       	rjmp	.+126    	; 0x3aaa <main+0x1226>
	else if (__tmp > 65535)
    3a2c:	69 a9       	ldd	r22, Y+49	; 0x31
    3a2e:	7a a9       	ldd	r23, Y+50	; 0x32
    3a30:	8b a9       	ldd	r24, Y+51	; 0x33
    3a32:	9c a9       	ldd	r25, Y+52	; 0x34
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	3f ef       	ldi	r19, 0xFF	; 255
    3a38:	4f e7       	ldi	r20, 0x7F	; 127
    3a3a:	57 e4       	ldi	r21, 0x47	; 71
    3a3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a40:	18 16       	cp	r1, r24
    3a42:	4c f5       	brge	.+82     	; 0x3a96 <main+0x1212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a44:	6d a9       	ldd	r22, Y+53	; 0x35
    3a46:	7e a9       	ldd	r23, Y+54	; 0x36
    3a48:	8f a9       	ldd	r24, Y+55	; 0x37
    3a4a:	98 ad       	ldd	r25, Y+56	; 0x38
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	40 e2       	ldi	r20, 0x20	; 32
    3a52:	51 e4       	ldi	r21, 0x41	; 65
    3a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	bc 01       	movw	r22, r24
    3a5e:	cd 01       	movw	r24, r26
    3a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	98 ab       	std	Y+48, r25	; 0x30
    3a6a:	8f a7       	std	Y+47, r24	; 0x2f
    3a6c:	0f c0       	rjmp	.+30     	; 0x3a8c <main+0x1208>
    3a6e:	88 ec       	ldi	r24, 0xC8	; 200
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	9e a7       	std	Y+46, r25	; 0x2e
    3a74:	8d a7       	std	Y+45, r24	; 0x2d
    3a76:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a78:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	f1 f7       	brne	.-4      	; 0x3a7a <main+0x11f6>
    3a7e:	9e a7       	std	Y+46, r25	; 0x2e
    3a80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a82:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a84:	98 a9       	ldd	r25, Y+48	; 0x30
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	98 ab       	std	Y+48, r25	; 0x30
    3a8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a8e:	98 a9       	ldd	r25, Y+48	; 0x30
    3a90:	00 97       	sbiw	r24, 0x00	; 0
    3a92:	69 f7       	brne	.-38     	; 0x3a6e <main+0x11ea>
    3a94:	14 c0       	rjmp	.+40     	; 0x3abe <main+0x123a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a96:	69 a9       	ldd	r22, Y+49	; 0x31
    3a98:	7a a9       	ldd	r23, Y+50	; 0x32
    3a9a:	8b a9       	ldd	r24, Y+51	; 0x33
    3a9c:	9c a9       	ldd	r25, Y+52	; 0x34
    3a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	98 ab       	std	Y+48, r25	; 0x30
    3aa8:	8f a7       	std	Y+47, r24	; 0x2f
    3aaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aac:	98 a9       	ldd	r25, Y+48	; 0x30
    3aae:	9c a7       	std	Y+44, r25	; 0x2c
    3ab0:	8b a7       	std	Y+43, r24	; 0x2b
    3ab2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ab4:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <main+0x1232>
    3aba:	9c a7       	std	Y+44, r25	; 0x2c
    3abc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(5);
		
		SET_BIT(PORTC,0);
    3abe:	a5 e3       	ldi	r26, 0x35	; 53
    3ac0:	b0 e0       	ldi	r27, 0x00	; 0
    3ac2:	e5 e3       	ldi	r30, 0x35	; 53
    3ac4:	f0 e0       	ldi	r31, 0x00	; 0
    3ac6:	80 81       	ld	r24, Z
    3ac8:	81 60       	ori	r24, 0x01	; 1
    3aca:	8c 93       	st	X, r24
		SET_BIT(PORTC,1);
    3acc:	a5 e3       	ldi	r26, 0x35	; 53
    3ace:	b0 e0       	ldi	r27, 0x00	; 0
    3ad0:	e5 e3       	ldi	r30, 0x35	; 53
    3ad2:	f0 e0       	ldi	r31, 0x00	; 0
    3ad4:	80 81       	ld	r24, Z
    3ad6:	82 60       	ori	r24, 0x02	; 2
    3ad8:	8c 93       	st	X, r24
		SET_BIT(PORTC,2);
    3ada:	a5 e3       	ldi	r26, 0x35	; 53
    3adc:	b0 e0       	ldi	r27, 0x00	; 0
    3ade:	e5 e3       	ldi	r30, 0x35	; 53
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	80 81       	ld	r24, Z
    3ae4:	84 60       	ori	r24, 0x04	; 4
    3ae6:	8c 93       	st	X, r24
		SET_BIT(PORTC,4);
    3ae8:	a5 e3       	ldi	r26, 0x35	; 53
    3aea:	b0 e0       	ldi	r27, 0x00	; 0
    3aec:	e5 e3       	ldi	r30, 0x35	; 53
    3aee:	f0 e0       	ldi	r31, 0x00	; 0
    3af0:	80 81       	ld	r24, Z
    3af2:	80 61       	ori	r24, 0x10	; 16
    3af4:	8c 93       	st	X, r24
		SET_BIT(PORTC,5);
    3af6:	a5 e3       	ldi	r26, 0x35	; 53
    3af8:	b0 e0       	ldi	r27, 0x00	; 0
    3afa:	e5 e3       	ldi	r30, 0x35	; 53
    3afc:	f0 e0       	ldi	r31, 0x00	; 0
    3afe:	80 81       	ld	r24, Z
    3b00:	80 62       	ori	r24, 0x20	; 32
    3b02:	8c 93       	st	X, r24
		CLR_BIT(PORTC,3);
    3b04:	a5 e3       	ldi	r26, 0x35	; 53
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	e5 e3       	ldi	r30, 0x35	; 53
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	80 81       	ld	r24, Z
    3b0e:	87 7f       	andi	r24, 0xF7	; 247
    3b10:	8c 93       	st	X, r24
		seven_seg_write('B',minutes_counter/10);
    3b12:	80 91 c5 00 	lds	r24, 0x00C5
    3b16:	9a e0       	ldi	r25, 0x0A	; 10
    3b18:	69 2f       	mov	r22, r25
    3b1a:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__udivmodqi4>
    3b1e:	98 2f       	mov	r25, r24
    3b20:	82 e4       	ldi	r24, 0x42	; 66
    3b22:	69 2f       	mov	r22, r25
    3b24:	0e 94 00 14 	call	0x2800	; 0x2800 <seven_seg_write>
    3b28:	80 e0       	ldi	r24, 0x00	; 0
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	a0 ea       	ldi	r26, 0xA0	; 160
    3b2e:	b0 e4       	ldi	r27, 0x40	; 64
    3b30:	8f a3       	std	Y+39, r24	; 0x27
    3b32:	98 a7       	std	Y+40, r25	; 0x28
    3b34:	a9 a7       	std	Y+41, r26	; 0x29
    3b36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b38:	6f a1       	ldd	r22, Y+39	; 0x27
    3b3a:	78 a5       	ldd	r23, Y+40	; 0x28
    3b3c:	89 a5       	ldd	r24, Y+41	; 0x29
    3b3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	4a ef       	ldi	r20, 0xFA	; 250
    3b46:	54 e4       	ldi	r21, 0x44	; 68
    3b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	8b a3       	std	Y+35, r24	; 0x23
    3b52:	9c a3       	std	Y+36, r25	; 0x24
    3b54:	ad a3       	std	Y+37, r26	; 0x25
    3b56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b58:	6b a1       	ldd	r22, Y+35	; 0x23
    3b5a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b5c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b5e:	9e a1       	ldd	r25, Y+38	; 0x26
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	40 e8       	ldi	r20, 0x80	; 128
    3b66:	5f e3       	ldi	r21, 0x3F	; 63
    3b68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b6c:	88 23       	and	r24, r24
    3b6e:	2c f4       	brge	.+10     	; 0x3b7a <main+0x12f6>
		__ticks = 1;
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	9a a3       	std	Y+34, r25	; 0x22
    3b76:	89 a3       	std	Y+33, r24	; 0x21
    3b78:	3f c0       	rjmp	.+126    	; 0x3bf8 <main+0x1374>
	else if (__tmp > 65535)
    3b7a:	6b a1       	ldd	r22, Y+35	; 0x23
    3b7c:	7c a1       	ldd	r23, Y+36	; 0x24
    3b7e:	8d a1       	ldd	r24, Y+37	; 0x25
    3b80:	9e a1       	ldd	r25, Y+38	; 0x26
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	3f ef       	ldi	r19, 0xFF	; 255
    3b86:	4f e7       	ldi	r20, 0x7F	; 127
    3b88:	57 e4       	ldi	r21, 0x47	; 71
    3b8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b8e:	18 16       	cp	r1, r24
    3b90:	4c f5       	brge	.+82     	; 0x3be4 <main+0x1360>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b92:	6f a1       	ldd	r22, Y+39	; 0x27
    3b94:	78 a5       	ldd	r23, Y+40	; 0x28
    3b96:	89 a5       	ldd	r24, Y+41	; 0x29
    3b98:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	40 e2       	ldi	r20, 0x20	; 32
    3ba0:	51 e4       	ldi	r21, 0x41	; 65
    3ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba6:	dc 01       	movw	r26, r24
    3ba8:	cb 01       	movw	r24, r22
    3baa:	bc 01       	movw	r22, r24
    3bac:	cd 01       	movw	r24, r26
    3bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	9a a3       	std	Y+34, r25	; 0x22
    3bb8:	89 a3       	std	Y+33, r24	; 0x21
    3bba:	0f c0       	rjmp	.+30     	; 0x3bda <main+0x1356>
    3bbc:	88 ec       	ldi	r24, 0xC8	; 200
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	98 a3       	std	Y+32, r25	; 0x20
    3bc2:	8f 8f       	std	Y+31, r24	; 0x1f
    3bc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bc6:	98 a1       	ldd	r25, Y+32	; 0x20
    3bc8:	01 97       	sbiw	r24, 0x01	; 1
    3bca:	f1 f7       	brne	.-4      	; 0x3bc8 <main+0x1344>
    3bcc:	98 a3       	std	Y+32, r25	; 0x20
    3bce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd0:	89 a1       	ldd	r24, Y+33	; 0x21
    3bd2:	9a a1       	ldd	r25, Y+34	; 0x22
    3bd4:	01 97       	sbiw	r24, 0x01	; 1
    3bd6:	9a a3       	std	Y+34, r25	; 0x22
    3bd8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bda:	89 a1       	ldd	r24, Y+33	; 0x21
    3bdc:	9a a1       	ldd	r25, Y+34	; 0x22
    3bde:	00 97       	sbiw	r24, 0x00	; 0
    3be0:	69 f7       	brne	.-38     	; 0x3bbc <main+0x1338>
    3be2:	14 c0       	rjmp	.+40     	; 0x3c0c <main+0x1388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be4:	6b a1       	ldd	r22, Y+35	; 0x23
    3be6:	7c a1       	ldd	r23, Y+36	; 0x24
    3be8:	8d a1       	ldd	r24, Y+37	; 0x25
    3bea:	9e a1       	ldd	r25, Y+38	; 0x26
    3bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	9a a3       	std	Y+34, r25	; 0x22
    3bf6:	89 a3       	std	Y+33, r24	; 0x21
    3bf8:	89 a1       	ldd	r24, Y+33	; 0x21
    3bfa:	9a a1       	ldd	r25, Y+34	; 0x22
    3bfc:	9e 8f       	std	Y+30, r25	; 0x1e
    3bfe:	8d 8f       	std	Y+29, r24	; 0x1d
    3c00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3c04:	01 97       	sbiw	r24, 0x01	; 1
    3c06:	f1 f7       	brne	.-4      	; 0x3c04 <main+0x1380>
    3c08:	9e 8f       	std	Y+30, r25	; 0x1e
    3c0a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(5);
		
		SET_BIT(PORTC,0);
    3c0c:	a5 e3       	ldi	r26, 0x35	; 53
    3c0e:	b0 e0       	ldi	r27, 0x00	; 0
    3c10:	e5 e3       	ldi	r30, 0x35	; 53
    3c12:	f0 e0       	ldi	r31, 0x00	; 0
    3c14:	80 81       	ld	r24, Z
    3c16:	81 60       	ori	r24, 0x01	; 1
    3c18:	8c 93       	st	X, r24
		SET_BIT(PORTC,1);
    3c1a:	a5 e3       	ldi	r26, 0x35	; 53
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	e5 e3       	ldi	r30, 0x35	; 53
    3c20:	f0 e0       	ldi	r31, 0x00	; 0
    3c22:	80 81       	ld	r24, Z
    3c24:	82 60       	ori	r24, 0x02	; 2
    3c26:	8c 93       	st	X, r24
		SET_BIT(PORTC,2);
    3c28:	a5 e3       	ldi	r26, 0x35	; 53
    3c2a:	b0 e0       	ldi	r27, 0x00	; 0
    3c2c:	e5 e3       	ldi	r30, 0x35	; 53
    3c2e:	f0 e0       	ldi	r31, 0x00	; 0
    3c30:	80 81       	ld	r24, Z
    3c32:	84 60       	ori	r24, 0x04	; 4
    3c34:	8c 93       	st	X, r24
		SET_BIT(PORTC,3);
    3c36:	a5 e3       	ldi	r26, 0x35	; 53
    3c38:	b0 e0       	ldi	r27, 0x00	; 0
    3c3a:	e5 e3       	ldi	r30, 0x35	; 53
    3c3c:	f0 e0       	ldi	r31, 0x00	; 0
    3c3e:	80 81       	ld	r24, Z
    3c40:	88 60       	ori	r24, 0x08	; 8
    3c42:	8c 93       	st	X, r24
		SET_BIT(PORTC,5);
    3c44:	a5 e3       	ldi	r26, 0x35	; 53
    3c46:	b0 e0       	ldi	r27, 0x00	; 0
    3c48:	e5 e3       	ldi	r30, 0x35	; 53
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	80 81       	ld	r24, Z
    3c4e:	80 62       	ori	r24, 0x20	; 32
    3c50:	8c 93       	st	X, r24
		CLR_BIT(PORTC,4);
    3c52:	a5 e3       	ldi	r26, 0x35	; 53
    3c54:	b0 e0       	ldi	r27, 0x00	; 0
    3c56:	e5 e3       	ldi	r30, 0x35	; 53
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	80 81       	ld	r24, Z
    3c5c:	8f 7e       	andi	r24, 0xEF	; 239
    3c5e:	8c 93       	st	X, r24
		seven_seg_write('B',hours_counter%10);
    3c60:	80 91 c6 00 	lds	r24, 0x00C6
    3c64:	9a e0       	ldi	r25, 0x0A	; 10
    3c66:	69 2f       	mov	r22, r25
    3c68:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__udivmodqi4>
    3c6c:	89 2f       	mov	r24, r25
    3c6e:	98 2f       	mov	r25, r24
    3c70:	82 e4       	ldi	r24, 0x42	; 66
    3c72:	69 2f       	mov	r22, r25
    3c74:	0e 94 00 14 	call	0x2800	; 0x2800 <seven_seg_write>
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	a0 ea       	ldi	r26, 0xA0	; 160
    3c7e:	b0 e4       	ldi	r27, 0x40	; 64
    3c80:	89 8f       	std	Y+25, r24	; 0x19
    3c82:	9a 8f       	std	Y+26, r25	; 0x1a
    3c84:	ab 8f       	std	Y+27, r26	; 0x1b
    3c86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c88:	69 8d       	ldd	r22, Y+25	; 0x19
    3c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	4a ef       	ldi	r20, 0xFA	; 250
    3c96:	54 e4       	ldi	r21, 0x44	; 68
    3c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c9c:	dc 01       	movw	r26, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	8d 8b       	std	Y+21, r24	; 0x15
    3ca2:	9e 8b       	std	Y+22, r25	; 0x16
    3ca4:	af 8b       	std	Y+23, r26	; 0x17
    3ca6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    3caa:	7e 89       	ldd	r23, Y+22	; 0x16
    3cac:	8f 89       	ldd	r24, Y+23	; 0x17
    3cae:	98 8d       	ldd	r25, Y+24	; 0x18
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	40 e8       	ldi	r20, 0x80	; 128
    3cb6:	5f e3       	ldi	r21, 0x3F	; 63
    3cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cbc:	88 23       	and	r24, r24
    3cbe:	2c f4       	brge	.+10     	; 0x3cca <main+0x1446>
		__ticks = 1;
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	9c 8b       	std	Y+20, r25	; 0x14
    3cc6:	8b 8b       	std	Y+19, r24	; 0x13
    3cc8:	3f c0       	rjmp	.+126    	; 0x3d48 <main+0x14c4>
	else if (__tmp > 65535)
    3cca:	6d 89       	ldd	r22, Y+21	; 0x15
    3ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    3cce:	8f 89       	ldd	r24, Y+23	; 0x17
    3cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	3f ef       	ldi	r19, 0xFF	; 255
    3cd6:	4f e7       	ldi	r20, 0x7F	; 127
    3cd8:	57 e4       	ldi	r21, 0x47	; 71
    3cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cde:	18 16       	cp	r1, r24
    3ce0:	4c f5       	brge	.+82     	; 0x3d34 <main+0x14b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ce2:	69 8d       	ldd	r22, Y+25	; 0x19
    3ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	40 e2       	ldi	r20, 0x20	; 32
    3cf0:	51 e4       	ldi	r21, 0x41	; 65
    3cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	bc 01       	movw	r22, r24
    3cfc:	cd 01       	movw	r24, r26
    3cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	9c 8b       	std	Y+20, r25	; 0x14
    3d08:	8b 8b       	std	Y+19, r24	; 0x13
    3d0a:	0f c0       	rjmp	.+30     	; 0x3d2a <main+0x14a6>
    3d0c:	88 ec       	ldi	r24, 0xC8	; 200
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	9a 8b       	std	Y+18, r25	; 0x12
    3d12:	89 8b       	std	Y+17, r24	; 0x11
    3d14:	89 89       	ldd	r24, Y+17	; 0x11
    3d16:	9a 89       	ldd	r25, Y+18	; 0x12
    3d18:	01 97       	sbiw	r24, 0x01	; 1
    3d1a:	f1 f7       	brne	.-4      	; 0x3d18 <main+0x1494>
    3d1c:	9a 8b       	std	Y+18, r25	; 0x12
    3d1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d20:	8b 89       	ldd	r24, Y+19	; 0x13
    3d22:	9c 89       	ldd	r25, Y+20	; 0x14
    3d24:	01 97       	sbiw	r24, 0x01	; 1
    3d26:	9c 8b       	std	Y+20, r25	; 0x14
    3d28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d2e:	00 97       	sbiw	r24, 0x00	; 0
    3d30:	69 f7       	brne	.-38     	; 0x3d0c <main+0x1488>
    3d32:	14 c0       	rjmp	.+40     	; 0x3d5c <main+0x14d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d34:	6d 89       	ldd	r22, Y+21	; 0x15
    3d36:	7e 89       	ldd	r23, Y+22	; 0x16
    3d38:	8f 89       	ldd	r24, Y+23	; 0x17
    3d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	9c 8b       	std	Y+20, r25	; 0x14
    3d46:	8b 8b       	std	Y+19, r24	; 0x13
    3d48:	8b 89       	ldd	r24, Y+19	; 0x13
    3d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d4c:	98 8b       	std	Y+16, r25	; 0x10
    3d4e:	8f 87       	std	Y+15, r24	; 0x0f
    3d50:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d52:	98 89       	ldd	r25, Y+16	; 0x10
    3d54:	01 97       	sbiw	r24, 0x01	; 1
    3d56:	f1 f7       	brne	.-4      	; 0x3d54 <main+0x14d0>
    3d58:	98 8b       	std	Y+16, r25	; 0x10
    3d5a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
		
		SET_BIT(PORTC,0);
    3d5c:	a5 e3       	ldi	r26, 0x35	; 53
    3d5e:	b0 e0       	ldi	r27, 0x00	; 0
    3d60:	e5 e3       	ldi	r30, 0x35	; 53
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	80 81       	ld	r24, Z
    3d66:	81 60       	ori	r24, 0x01	; 1
    3d68:	8c 93       	st	X, r24
		SET_BIT(PORTC,1);
    3d6a:	a5 e3       	ldi	r26, 0x35	; 53
    3d6c:	b0 e0       	ldi	r27, 0x00	; 0
    3d6e:	e5 e3       	ldi	r30, 0x35	; 53
    3d70:	f0 e0       	ldi	r31, 0x00	; 0
    3d72:	80 81       	ld	r24, Z
    3d74:	82 60       	ori	r24, 0x02	; 2
    3d76:	8c 93       	st	X, r24
		SET_BIT(PORTC,2);
    3d78:	a5 e3       	ldi	r26, 0x35	; 53
    3d7a:	b0 e0       	ldi	r27, 0x00	; 0
    3d7c:	e5 e3       	ldi	r30, 0x35	; 53
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	80 81       	ld	r24, Z
    3d82:	84 60       	ori	r24, 0x04	; 4
    3d84:	8c 93       	st	X, r24
		SET_BIT(PORTC,3);
    3d86:	a5 e3       	ldi	r26, 0x35	; 53
    3d88:	b0 e0       	ldi	r27, 0x00	; 0
    3d8a:	e5 e3       	ldi	r30, 0x35	; 53
    3d8c:	f0 e0       	ldi	r31, 0x00	; 0
    3d8e:	80 81       	ld	r24, Z
    3d90:	88 60       	ori	r24, 0x08	; 8
    3d92:	8c 93       	st	X, r24
		SET_BIT(PORTC,4);
    3d94:	a5 e3       	ldi	r26, 0x35	; 53
    3d96:	b0 e0       	ldi	r27, 0x00	; 0
    3d98:	e5 e3       	ldi	r30, 0x35	; 53
    3d9a:	f0 e0       	ldi	r31, 0x00	; 0
    3d9c:	80 81       	ld	r24, Z
    3d9e:	80 61       	ori	r24, 0x10	; 16
    3da0:	8c 93       	st	X, r24
		CLR_BIT(PORTC,5);
    3da2:	a5 e3       	ldi	r26, 0x35	; 53
    3da4:	b0 e0       	ldi	r27, 0x00	; 0
    3da6:	e5 e3       	ldi	r30, 0x35	; 53
    3da8:	f0 e0       	ldi	r31, 0x00	; 0
    3daa:	80 81       	ld	r24, Z
    3dac:	8f 7d       	andi	r24, 0xDF	; 223
    3dae:	8c 93       	st	X, r24
		seven_seg_write('B',hours_counter/10);
    3db0:	80 91 c6 00 	lds	r24, 0x00C6
    3db4:	9a e0       	ldi	r25, 0x0A	; 10
    3db6:	69 2f       	mov	r22, r25
    3db8:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__udivmodqi4>
    3dbc:	98 2f       	mov	r25, r24
    3dbe:	82 e4       	ldi	r24, 0x42	; 66
    3dc0:	69 2f       	mov	r22, r25
    3dc2:	0e 94 00 14 	call	0x2800	; 0x2800 <seven_seg_write>
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	a0 ea       	ldi	r26, 0xA0	; 160
    3dcc:	b0 e4       	ldi	r27, 0x40	; 64
    3dce:	8b 87       	std	Y+11, r24	; 0x0b
    3dd0:	9c 87       	std	Y+12, r25	; 0x0c
    3dd2:	ad 87       	std	Y+13, r26	; 0x0d
    3dd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	4a ef       	ldi	r20, 0xFA	; 250
    3de4:	54 e4       	ldi	r21, 0x44	; 68
    3de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dea:	dc 01       	movw	r26, r24
    3dec:	cb 01       	movw	r24, r22
    3dee:	8f 83       	std	Y+7, r24	; 0x07
    3df0:	98 87       	std	Y+8, r25	; 0x08
    3df2:	a9 87       	std	Y+9, r26	; 0x09
    3df4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3df6:	6f 81       	ldd	r22, Y+7	; 0x07
    3df8:	78 85       	ldd	r23, Y+8	; 0x08
    3dfa:	89 85       	ldd	r24, Y+9	; 0x09
    3dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dfe:	20 e0       	ldi	r18, 0x00	; 0
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	40 e8       	ldi	r20, 0x80	; 128
    3e04:	5f e3       	ldi	r21, 0x3F	; 63
    3e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e0a:	88 23       	and	r24, r24
    3e0c:	2c f4       	brge	.+10     	; 0x3e18 <main+0x1594>
		__ticks = 1;
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	9e 83       	std	Y+6, r25	; 0x06
    3e14:	8d 83       	std	Y+5, r24	; 0x05
    3e16:	3f c0       	rjmp	.+126    	; 0x3e96 <main+0x1612>
	else if (__tmp > 65535)
    3e18:	6f 81       	ldd	r22, Y+7	; 0x07
    3e1a:	78 85       	ldd	r23, Y+8	; 0x08
    3e1c:	89 85       	ldd	r24, Y+9	; 0x09
    3e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	3f ef       	ldi	r19, 0xFF	; 255
    3e24:	4f e7       	ldi	r20, 0x7F	; 127
    3e26:	57 e4       	ldi	r21, 0x47	; 71
    3e28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e2c:	18 16       	cp	r1, r24
    3e2e:	4c f5       	brge	.+82     	; 0x3e82 <main+0x15fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e30:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e32:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	40 e2       	ldi	r20, 0x20	; 32
    3e3e:	51 e4       	ldi	r21, 0x41	; 65
    3e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e44:	dc 01       	movw	r26, r24
    3e46:	cb 01       	movw	r24, r22
    3e48:	bc 01       	movw	r22, r24
    3e4a:	cd 01       	movw	r24, r26
    3e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e50:	dc 01       	movw	r26, r24
    3e52:	cb 01       	movw	r24, r22
    3e54:	9e 83       	std	Y+6, r25	; 0x06
    3e56:	8d 83       	std	Y+5, r24	; 0x05
    3e58:	0f c0       	rjmp	.+30     	; 0x3e78 <main+0x15f4>
    3e5a:	88 ec       	ldi	r24, 0xC8	; 200
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	9c 83       	std	Y+4, r25	; 0x04
    3e60:	8b 83       	std	Y+3, r24	; 0x03
    3e62:	8b 81       	ldd	r24, Y+3	; 0x03
    3e64:	9c 81       	ldd	r25, Y+4	; 0x04
    3e66:	01 97       	sbiw	r24, 0x01	; 1
    3e68:	f1 f7       	brne	.-4      	; 0x3e66 <main+0x15e2>
    3e6a:	9c 83       	std	Y+4, r25	; 0x04
    3e6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e70:	9e 81       	ldd	r25, Y+6	; 0x06
    3e72:	01 97       	sbiw	r24, 0x01	; 1
    3e74:	9e 83       	std	Y+6, r25	; 0x06
    3e76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e78:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7c:	00 97       	sbiw	r24, 0x00	; 0
    3e7e:	69 f7       	brne	.-38     	; 0x3e5a <main+0x15d6>
    3e80:	14 c0       	rjmp	.+40     	; 0x3eaa <main+0x1626>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e82:	6f 81       	ldd	r22, Y+7	; 0x07
    3e84:	78 85       	ldd	r23, Y+8	; 0x08
    3e86:	89 85       	ldd	r24, Y+9	; 0x09
    3e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	9e 83       	std	Y+6, r25	; 0x06
    3e94:	8d 83       	std	Y+5, r24	; 0x05
    3e96:	8d 81       	ldd	r24, Y+5	; 0x05
    3e98:	9e 81       	ldd	r25, Y+6	; 0x06
    3e9a:	9a 83       	std	Y+2, r25	; 0x02
    3e9c:	89 83       	std	Y+1, r24	; 0x01
    3e9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea2:	01 97       	sbiw	r24, 0x01	; 1
    3ea4:	f1 f7       	brne	.-4      	; 0x3ea2 <main+0x161e>
    3ea6:	9a 83       	std	Y+2, r25	; 0x02
    3ea8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
		
		if (seconds_counter==60)
    3eaa:	80 91 c4 00 	lds	r24, 0x00C4
    3eae:	8c 33       	cpi	r24, 0x3C	; 60
    3eb0:	39 f4       	brne	.+14     	; 0x3ec0 <main+0x163c>
		{
			seconds_counter=0;
    3eb2:	10 92 c4 00 	sts	0x00C4, r1
			minutes_counter++;
    3eb6:	80 91 c5 00 	lds	r24, 0x00C5
    3eba:	8f 5f       	subi	r24, 0xFF	; 255
    3ebc:	80 93 c5 00 	sts	0x00C5, r24
		}
		if (minutes_counter==60)
    3ec0:	80 91 c5 00 	lds	r24, 0x00C5
    3ec4:	8c 33       	cpi	r24, 0x3C	; 60
    3ec6:	39 f4       	brne	.+14     	; 0x3ed6 <main+0x1652>
		{
			minutes_counter=0;
    3ec8:	10 92 c5 00 	sts	0x00C5, r1
			hours_counter++;
    3ecc:	80 91 c6 00 	lds	r24, 0x00C6
    3ed0:	8f 5f       	subi	r24, 0xFF	; 255
    3ed2:	80 93 c6 00 	sts	0x00C6, r24
		}
		if (hours_counter==24)
    3ed6:	80 91 c6 00 	lds	r24, 0x00C6
    3eda:	88 31       	cpi	r24, 0x18	; 24
    3edc:	11 f0       	breq	.+4      	; 0x3ee2 <main+0x165e>
    3ede:	0c 94 94 14 	jmp	0x2928	; 0x2928 <main+0xa4>
		{
			hours_counter=0;
    3ee2:	10 92 c6 00 	sts	0x00C6, r1
    3ee6:	0c 94 94 14 	jmp	0x2928	; 0x2928 <main+0xa4>

00003eea <__vector_5>:
	}
	
}

ISR(TIMER2_OVF_vect)
{
    3eea:	1f 92       	push	r1
    3eec:	0f 92       	push	r0
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	0f 92       	push	r0
    3ef2:	11 24       	eor	r1, r1
    3ef4:	8f 93       	push	r24
    3ef6:	df 93       	push	r29
    3ef8:	cf 93       	push	r28
    3efa:	cd b7       	in	r28, 0x3d	; 61
    3efc:	de b7       	in	r29, 0x3e	; 62
	seconds_counter++;
    3efe:	80 91 c4 00 	lds	r24, 0x00C4
    3f02:	8f 5f       	subi	r24, 0xFF	; 255
    3f04:	80 93 c4 00 	sts	0x00C4, r24
	
}
    3f08:	cf 91       	pop	r28
    3f0a:	df 91       	pop	r29
    3f0c:	8f 91       	pop	r24
    3f0e:	0f 90       	pop	r0
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	0f 90       	pop	r0
    3f14:	1f 90       	pop	r1
    3f16:	18 95       	reti

00003f18 <__udivmodqi4>:
    3f18:	99 1b       	sub	r25, r25
    3f1a:	79 e0       	ldi	r23, 0x09	; 9
    3f1c:	04 c0       	rjmp	.+8      	; 0x3f26 <__udivmodqi4_ep>

00003f1e <__udivmodqi4_loop>:
    3f1e:	99 1f       	adc	r25, r25
    3f20:	96 17       	cp	r25, r22
    3f22:	08 f0       	brcs	.+2      	; 0x3f26 <__udivmodqi4_ep>
    3f24:	96 1b       	sub	r25, r22

00003f26 <__udivmodqi4_ep>:
    3f26:	88 1f       	adc	r24, r24
    3f28:	7a 95       	dec	r23
    3f2a:	c9 f7       	brne	.-14     	; 0x3f1e <__udivmodqi4_loop>
    3f2c:	80 95       	com	r24
    3f2e:	08 95       	ret

00003f30 <__prologue_saves__>:
    3f30:	2f 92       	push	r2
    3f32:	3f 92       	push	r3
    3f34:	4f 92       	push	r4
    3f36:	5f 92       	push	r5
    3f38:	6f 92       	push	r6
    3f3a:	7f 92       	push	r7
    3f3c:	8f 92       	push	r8
    3f3e:	9f 92       	push	r9
    3f40:	af 92       	push	r10
    3f42:	bf 92       	push	r11
    3f44:	cf 92       	push	r12
    3f46:	df 92       	push	r13
    3f48:	ef 92       	push	r14
    3f4a:	ff 92       	push	r15
    3f4c:	0f 93       	push	r16
    3f4e:	1f 93       	push	r17
    3f50:	cf 93       	push	r28
    3f52:	df 93       	push	r29
    3f54:	cd b7       	in	r28, 0x3d	; 61
    3f56:	de b7       	in	r29, 0x3e	; 62
    3f58:	ca 1b       	sub	r28, r26
    3f5a:	db 0b       	sbc	r29, r27
    3f5c:	0f b6       	in	r0, 0x3f	; 63
    3f5e:	f8 94       	cli
    3f60:	de bf       	out	0x3e, r29	; 62
    3f62:	0f be       	out	0x3f, r0	; 63
    3f64:	cd bf       	out	0x3d, r28	; 61
    3f66:	09 94       	ijmp

00003f68 <__epilogue_restores__>:
    3f68:	2a 88       	ldd	r2, Y+18	; 0x12
    3f6a:	39 88       	ldd	r3, Y+17	; 0x11
    3f6c:	48 88       	ldd	r4, Y+16	; 0x10
    3f6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f70:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f72:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f74:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f76:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f78:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f7a:	b9 84       	ldd	r11, Y+9	; 0x09
    3f7c:	c8 84       	ldd	r12, Y+8	; 0x08
    3f7e:	df 80       	ldd	r13, Y+7	; 0x07
    3f80:	ee 80       	ldd	r14, Y+6	; 0x06
    3f82:	fd 80       	ldd	r15, Y+5	; 0x05
    3f84:	0c 81       	ldd	r16, Y+4	; 0x04
    3f86:	1b 81       	ldd	r17, Y+3	; 0x03
    3f88:	aa 81       	ldd	r26, Y+2	; 0x02
    3f8a:	b9 81       	ldd	r27, Y+1	; 0x01
    3f8c:	ce 0f       	add	r28, r30
    3f8e:	d1 1d       	adc	r29, r1
    3f90:	0f b6       	in	r0, 0x3f	; 63
    3f92:	f8 94       	cli
    3f94:	de bf       	out	0x3e, r29	; 62
    3f96:	0f be       	out	0x3f, r0	; 63
    3f98:	cd bf       	out	0x3d, r28	; 61
    3f9a:	ed 01       	movw	r28, r26
    3f9c:	08 95       	ret

00003f9e <_exit>:
    3f9e:	f8 94       	cli

00003fa0 <__stop_program>:
    3fa0:	ff cf       	rjmp	.-2      	; 0x3fa0 <__stop_program>
